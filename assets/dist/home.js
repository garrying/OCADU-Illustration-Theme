/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./assets/src/js/home.js":
/*!*******************************!*\
  !*** ./assets/src/js/home.js ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var two_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! two.js */ \"./node_modules/two.js/build/two.module.js\");\n/* harmony import */ var matter_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! matter-js */ \"./node_modules/matter-js/build/matter.js\");\n/* harmony import */ var matter_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(matter_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var matter_attractors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! matter-attractors */ \"./node_modules/matter-attractors/build/matter-attractors.js\");\n/* harmony import */ var matter_attractors__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(matter_attractors__WEBPACK_IMPORTED_MODULE_2__);\n/* module decorator */ module = __webpack_require__.hmd(module);\n\n\n\n\n/* eslint-disable */\n\n/*!\n * justifiedGallery - v3.8.1\n * http://miromannino.github.io/Justified-Gallery/\n * Copyright (c) 2020 Miro Mannino\n * Licensed under the MIT license.\n */\n\n!function (e) {\n  \"function\" == typeof define && __webpack_require__.amdO ? define([\"jquery\"], e) :  true && module.exports ? module.exports = function (t, i) {\n    return void 0 === i && (i = \"undefined\" != typeof window ? __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\") : __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")(t)), e(i), i;\n  } : e(jQuery);\n}(function (l) {\n  var r = function (t, i) {\n    this.settings = i, this.checkSettings(), this.imgAnalyzerTimeout = null, this.entries = null, this.buildingRow = {\n      entriesBuff: [],\n      width: 0,\n      height: 0,\n      aspectRatio: 0\n    }, this.lastFetchedEntry = null, this.lastAnalyzedIndex = -1, this.yield = {\n      every: 2,\n      flushed: 0\n    }, this.border = 0 <= i.border ? i.border : i.margins, this.maxRowHeight = this.retrieveMaxRowHeight(), this.suffixRanges = this.retrieveSuffixRanges(), this.offY = this.border, this.rows = 0, this.spinner = {\n      phase: 0,\n      timeSlot: 150,\n      $el: l('<div class=\"jg-spinner\"><span></span><span></span><span></span></div>'),\n      intervalId: null\n    }, this.scrollBarOn = !1, this.checkWidthIntervalId = null, this.galleryWidth = t.width(), this.$gallery = t;\n  };\n  r.prototype.getSuffix = function (t, i) {\n    var e, s;\n    for (e = i < t ? t : i, s = 0; s < this.suffixRanges.length; s++) if (e <= this.suffixRanges[s]) return this.settings.sizeRangeSuffixes[this.suffixRanges[s]];\n    return this.settings.sizeRangeSuffixes[this.suffixRanges[s - 1]];\n  }, r.prototype.removeSuffix = function (t, i) {\n    return t.substring(0, t.length - i.length);\n  }, r.prototype.endsWith = function (t, i) {\n    return -1 !== t.indexOf(i, t.length - i.length);\n  }, r.prototype.getUsedSuffix = function (t) {\n    for (var i in this.settings.sizeRangeSuffixes) if (this.settings.sizeRangeSuffixes.hasOwnProperty(i)) {\n      if (0 === this.settings.sizeRangeSuffixes[i].length) continue;\n      if (this.endsWith(t, this.settings.sizeRangeSuffixes[i])) return this.settings.sizeRangeSuffixes[i];\n    }\n    return \"\";\n  }, r.prototype.newSrc = function (t, i, e, s) {\n    var n;\n    if (this.settings.thumbnailPath) n = this.settings.thumbnailPath(t, i, e, s);else {\n      var r = t.match(this.settings.extension),\n        o = null !== r ? r[0] : \"\";\n      n = t.replace(this.settings.extension, \"\"), n = this.removeSuffix(n, this.getUsedSuffix(n)), n += this.getSuffix(i, e) + o;\n    }\n    return n;\n  }, r.prototype.showImg = function (t, i) {\n    this.settings.cssAnimation ? (t.addClass(\"jg-entry-visible\"), i && i()) : (t.stop().fadeTo(this.settings.imagesAnimationDuration, 1, i), t.find(this.settings.imgSelector).stop().fadeTo(this.settings.imagesAnimationDuration, 1, i));\n  }, r.prototype.extractImgSrcFromImage = function (t) {\n    var i = t.data(\"safe-src\"),\n      e = \"data-safe-src\";\n    return void 0 === i && (i = t.attr(\"src\"), e = \"src\"), t.data(\"jg.originalSrc\", i), t.data(\"jg.src\", i), t.data(\"jg.originalSrcLoc\", e), i;\n  }, r.prototype.imgFromEntry = function (t) {\n    var i = t.find(this.settings.imgSelector);\n    return 0 === i.length ? null : i;\n  }, r.prototype.captionFromEntry = function (t) {\n    var i = t.find(\"> .jg-caption\");\n    return 0 === i.length ? null : i;\n  }, r.prototype.displayEntry = function (t, i, e, s, n, r) {\n    t.width(s), t.height(r), t.css(\"top\", e), t.css(\"left\", i);\n    var o = this.imgFromEntry(t);\n    if (null !== o) {\n      o.css(\"width\", s), o.css(\"height\", n), o.css(\"margin-left\", -s / 2), o.css(\"margin-top\", -n / 2);\n      var a = o.data(\"jg.src\");\n      if (a) {\n        a = this.newSrc(a, s, n, o[0]), o.one(\"error\", function () {\n          this.resetImgSrc(o);\n        });\n        var h = function () {\n          o.attr(\"src\", a);\n        };\n        \"skipped\" === t.data(\"jg.loaded\") && a ? this.onImageEvent(a, function () {\n          this.showImg(t, h), t.data(\"jg.loaded\", !0);\n        }.bind(this)) : this.showImg(t, h);\n      }\n    } else this.showImg(t);\n    this.displayEntryCaption(t);\n  }, r.prototype.displayEntryCaption = function (t) {\n    var i = this.imgFromEntry(t);\n    if (null !== i && this.settings.captions) {\n      var e = this.captionFromEntry(t);\n      if (null === e) {\n        var s = i.attr(\"alt\");\n        this.isValidCaption(s) || (s = t.attr(\"title\")), this.isValidCaption(s) && (e = l('<div class=\"jg-caption\">' + s + \"</div>\"), t.append(e), t.data(\"jg.createdCaption\", !0));\n      }\n      null !== e && (this.settings.cssAnimation || e.stop().fadeTo(0, this.settings.captionSettings.nonVisibleOpacity), this.addCaptionEventsHandlers(t));\n    } else this.removeCaptionEventsHandlers(t);\n  }, r.prototype.isValidCaption = function (t) {\n    return void 0 !== t && 0 < t.length;\n  }, r.prototype.onEntryMouseEnterForCaption = function (t) {\n    var i = this.captionFromEntry(l(t.currentTarget));\n    this.settings.cssAnimation ? i.addClass(\"jg-caption-visible\").removeClass(\"jg-caption-hidden\") : i.stop().fadeTo(this.settings.captionSettings.animationDuration, this.settings.captionSettings.visibleOpacity);\n  }, r.prototype.onEntryMouseLeaveForCaption = function (t) {\n    var i = this.captionFromEntry(l(t.currentTarget));\n    this.settings.cssAnimation ? i.removeClass(\"jg-caption-visible\").removeClass(\"jg-caption-hidden\") : i.stop().fadeTo(this.settings.captionSettings.animationDuration, this.settings.captionSettings.nonVisibleOpacity);\n  }, r.prototype.addCaptionEventsHandlers = function (t) {\n    var i = t.data(\"jg.captionMouseEvents\");\n    void 0 === i && (i = {\n      mouseenter: l.proxy(this.onEntryMouseEnterForCaption, this),\n      mouseleave: l.proxy(this.onEntryMouseLeaveForCaption, this)\n    }, t.on(\"mouseenter\", void 0, void 0, i.mouseenter), t.on(\"mouseleave\", void 0, void 0, i.mouseleave), t.data(\"jg.captionMouseEvents\", i));\n  }, r.prototype.removeCaptionEventsHandlers = function (t) {\n    var i = t.data(\"jg.captionMouseEvents\");\n    void 0 !== i && (t.off(\"mouseenter\", void 0, i.mouseenter), t.off(\"mouseleave\", void 0, i.mouseleave), t.removeData(\"jg.captionMouseEvents\"));\n  }, r.prototype.clearBuildingRow = function () {\n    this.buildingRow.entriesBuff = [], this.buildingRow.aspectRatio = 0, this.buildingRow.width = 0;\n  }, r.prototype.prepareBuildingRow = function (t, i) {\n    var e,\n      s,\n      n,\n      r,\n      o,\n      a = !0,\n      h = 0,\n      g = this.galleryWidth - 2 * this.border - (this.buildingRow.entriesBuff.length - 1) * this.settings.margins,\n      l = g / this.buildingRow.aspectRatio,\n      u = this.settings.rowHeight,\n      d = this.buildingRow.width / g > this.settings.justifyThreshold;\n    if (i || t && \"hide\" === this.settings.lastRow && !d) {\n      for (e = 0; e < this.buildingRow.entriesBuff.length; e++) s = this.buildingRow.entriesBuff[e], this.settings.cssAnimation ? s.removeClass(\"jg-entry-visible\") : (s.stop().fadeTo(0, .1), s.find(\"> img, > a > img\").fadeTo(0, 0));\n      return -1;\n    }\n    for (t && !d && \"justify\" !== this.settings.lastRow && \"hide\" !== this.settings.lastRow && (a = !1, 0 < this.rows && (a = (u = (this.offY - this.border - this.settings.margins * this.rows) / this.rows) * this.buildingRow.aspectRatio / g > this.settings.justifyThreshold)), e = 0; e < this.buildingRow.entriesBuff.length; e++) n = (s = this.buildingRow.entriesBuff[e]).data(\"jg.width\") / s.data(\"jg.height\"), o = a ? (r = e === this.buildingRow.entriesBuff.length - 1 ? g : l * n, l) : (r = u * n, u), g -= Math.round(r), s.data(\"jg.jwidth\", Math.round(r)), s.data(\"jg.jheight\", Math.ceil(o)), (0 === e || o < h) && (h = o);\n    return this.buildingRow.height = h, a;\n  }, r.prototype.flushRow = function (t, i) {\n    var e,\n      s,\n      n,\n      r = this.settings,\n      o = this.border;\n    if (s = this.prepareBuildingRow(t, i), i || t && \"hide\" === r.lastRow && -1 === s) this.clearBuildingRow();else {\n      if (this.maxRowHeight && this.maxRowHeight < this.buildingRow.height && (this.buildingRow.height = this.maxRowHeight), t && (\"center\" === r.lastRow || \"right\" === r.lastRow)) {\n        var a = this.galleryWidth - 2 * this.border - (this.buildingRow.entriesBuff.length - 1) * r.margins;\n        for (n = 0; n < this.buildingRow.entriesBuff.length; n++) a -= (e = this.buildingRow.entriesBuff[n]).data(\"jg.jwidth\");\n        \"center\" === r.lastRow ? o += Math.round(a / 2) : \"right\" === r.lastRow && (o += a);\n      }\n      var h = this.buildingRow.entriesBuff.length - 1;\n      for (n = 0; n <= h; n++) e = this.buildingRow.entriesBuff[this.settings.rtl ? h - n : n], this.displayEntry(e, o, this.offY, e.data(\"jg.jwidth\"), e.data(\"jg.jheight\"), this.buildingRow.height), o += e.data(\"jg.jwidth\") + r.margins;\n      this.galleryHeightToSet = this.offY + this.buildingRow.height + this.border, this.setGalleryTempHeight(this.galleryHeightToSet + this.getSpinnerHeight()), (!t || this.buildingRow.height <= r.rowHeight && s) && (this.offY += this.buildingRow.height + r.margins, this.rows += 1, this.clearBuildingRow(), this.settings.triggerEvent.call(this, \"jg.rowflush\"));\n    }\n  };\n  var i = 0;\n  r.prototype.rememberGalleryHeight = function () {\n    i = this.$gallery.height(), this.$gallery.height(i);\n  }, r.prototype.setGalleryTempHeight = function (t) {\n    i = Math.max(t, i), this.$gallery.height(i);\n  }, r.prototype.setGalleryFinalHeight = function (t) {\n    i = t, this.$gallery.height(t);\n  }, r.prototype.checkWidth = function () {\n    this.checkWidthIntervalId = setInterval(l.proxy(function () {\n      if (this.$gallery.is(\":visible\")) {\n        var t = parseFloat(this.$gallery.width());\n        Math.abs(t - this.galleryWidth) > this.settings.refreshSensitivity && (this.galleryWidth = t, this.rewind(), this.rememberGalleryHeight(), this.startImgAnalyzer(!0));\n      }\n    }, this), this.settings.refreshTime);\n  }, r.prototype.isSpinnerActive = function () {\n    return null !== this.spinner.intervalId;\n  }, r.prototype.getSpinnerHeight = function () {\n    return this.spinner.$el.innerHeight();\n  }, r.prototype.stopLoadingSpinnerAnimation = function () {\n    clearInterval(this.spinner.intervalId), this.spinner.intervalId = null, this.setGalleryTempHeight(this.$gallery.height() - this.getSpinnerHeight()), this.spinner.$el.detach();\n  }, r.prototype.startLoadingSpinnerAnimation = function () {\n    var t = this.spinner,\n      i = t.$el.find(\"span\");\n    clearInterval(t.intervalId), this.$gallery.append(t.$el), this.setGalleryTempHeight(this.offY + this.buildingRow.height + this.getSpinnerHeight()), t.intervalId = setInterval(function () {\n      t.phase < i.length ? i.eq(t.phase).fadeTo(t.timeSlot, 1) : i.eq(t.phase - i.length).fadeTo(t.timeSlot, 0), t.phase = (t.phase + 1) % (2 * i.length);\n    }, t.timeSlot);\n  }, r.prototype.rewind = function () {\n    this.lastFetchedEntry = null, this.lastAnalyzedIndex = -1, this.offY = this.border, this.rows = 0, this.clearBuildingRow();\n  }, r.prototype.getSelectorWithoutSpinner = function () {\n    return this.settings.selector + \", div:not(.jg-spinner)\";\n  }, r.prototype.getAllEntries = function () {\n    var t = this.getSelectorWithoutSpinner();\n    return this.$gallery.children(t).toArray();\n  }, r.prototype.updateEntries = function (t) {\n    var i;\n    if (t && null != this.lastFetchedEntry) {\n      var e = this.getSelectorWithoutSpinner();\n      i = l(this.lastFetchedEntry).nextAll(e).toArray();\n    } else this.entries = [], i = this.getAllEntries();\n    return 0 < i.length && (l.isFunction(this.settings.sort) ? i = this.sortArray(i) : this.settings.randomize && (i = this.shuffleArray(i)), this.lastFetchedEntry = i[i.length - 1], this.settings.filter ? i = this.filterArray(i) : this.resetFilters(i)), this.entries = this.entries.concat(i), !0;\n  }, r.prototype.insertToGallery = function (t) {\n    var i = this;\n    l.each(t, function () {\n      l(this).appendTo(i.$gallery);\n    });\n  }, r.prototype.shuffleArray = function (t) {\n    var i, e, s;\n    for (i = t.length - 1; 0 < i; i--) e = Math.floor(Math.random() * (i + 1)), s = t[i], t[i] = t[e], t[e] = s;\n    return this.insertToGallery(t), t;\n  }, r.prototype.sortArray = function (t) {\n    return t.sort(this.settings.sort), this.insertToGallery(t), t;\n  }, r.prototype.resetFilters = function (t) {\n    for (var i = 0; i < t.length; i++) l(t[i]).removeClass(\"jg-filtered\");\n  }, r.prototype.filterArray = function (t) {\n    var e = this.settings;\n    if (\"string\" === l.type(e.filter)) return t.filter(function (t) {\n      var i = l(t);\n      return i.is(e.filter) ? (i.removeClass(\"jg-filtered\"), !0) : (i.addClass(\"jg-filtered\").removeClass(\"jg-visible\"), !1);\n    });\n    if (l.isFunction(e.filter)) {\n      for (var i = t.filter(e.filter), s = 0; s < t.length; s++) -1 === i.indexOf(t[s]) ? l(t[s]).addClass(\"jg-filtered\").removeClass(\"jg-visible\") : l(t[s]).removeClass(\"jg-filtered\");\n      return i;\n    }\n  }, r.prototype.resetImgSrc = function (t) {\n    \"src\" === t.data(\"jg.originalSrcLoc\") ? t.attr(\"src\", t.data(\"jg.originalSrc\")) : t.attr(\"src\", \"\");\n  }, r.prototype.destroy = function () {\n    clearInterval(this.checkWidthIntervalId), this.stopImgAnalyzerStarter(), l.each(this.getAllEntries(), l.proxy(function (t, i) {\n      var e = l(i);\n      e.css(\"width\", \"\"), e.css(\"height\", \"\"), e.css(\"top\", \"\"), e.css(\"left\", \"\"), e.data(\"jg.loaded\", void 0), e.removeClass(\"jg-entry jg-filtered jg-entry-visible\");\n      var s = this.imgFromEntry(e);\n      s && (s.css(\"width\", \"\"), s.css(\"height\", \"\"), s.css(\"margin-left\", \"\"), s.css(\"margin-top\", \"\"), this.resetImgSrc(s), s.data(\"jg.originalSrc\", void 0), s.data(\"jg.originalSrcLoc\", void 0), s.data(\"jg.src\", void 0)), this.removeCaptionEventsHandlers(e);\n      var n = this.captionFromEntry(e);\n      e.data(\"jg.createdCaption\") ? (e.data(\"jg.createdCaption\", void 0), null !== n && n.remove()) : null !== n && n.fadeTo(0, 1);\n    }, this)), this.$gallery.css(\"height\", \"\"), this.$gallery.removeClass(\"justified-gallery\"), this.$gallery.data(\"jg.controller\", void 0), this.settings.triggerEvent.call(this, \"jg.destroy\");\n  }, r.prototype.analyzeImages = function (t) {\n    for (var i = this.lastAnalyzedIndex + 1; i < this.entries.length; i++) {\n      var e = l(this.entries[i]);\n      if (!0 === e.data(\"jg.loaded\") || \"skipped\" === e.data(\"jg.loaded\")) {\n        var s = this.galleryWidth - 2 * this.border - (this.buildingRow.entriesBuff.length - 1) * this.settings.margins,\n          n = e.data(\"jg.width\") / e.data(\"jg.height\");\n        if (this.buildingRow.entriesBuff.push(e), this.buildingRow.aspectRatio += n, this.buildingRow.width += n * this.settings.rowHeight, this.lastAnalyzedIndex = i, s / (this.buildingRow.aspectRatio + n) < this.settings.rowHeight && (this.flushRow(!1, 0 < this.settings.maxRowsCount && this.rows === this.settings.maxRowsCount), ++this.yield.flushed >= this.yield.every)) return void this.startImgAnalyzer(t);\n      } else if (\"error\" !== e.data(\"jg.loaded\")) return;\n    }\n    0 < this.buildingRow.entriesBuff.length && this.flushRow(!0, 0 < this.settings.maxRowsCount && this.rows === this.settings.maxRowsCount), this.isSpinnerActive() && this.stopLoadingSpinnerAnimation(), this.stopImgAnalyzerStarter(), this.setGalleryFinalHeight(this.galleryHeightToSet), this.settings.triggerEvent.call(this, t ? \"jg.resize\" : \"jg.complete\");\n  }, r.prototype.stopImgAnalyzerStarter = function () {\n    this.yield.flushed = 0, null !== this.imgAnalyzerTimeout && (clearTimeout(this.imgAnalyzerTimeout), this.imgAnalyzerTimeout = null);\n  }, r.prototype.startImgAnalyzer = function (t) {\n    var i = this;\n    this.stopImgAnalyzerStarter(), this.imgAnalyzerTimeout = setTimeout(function () {\n      i.analyzeImages(t);\n    }, .001);\n  }, r.prototype.onImageEvent = function (t, i, e) {\n    if (i || e) {\n      var s = new Image(),\n        n = l(s);\n      i && n.one(\"load\", function () {\n        n.off(\"load error\"), i(s);\n      }), e && n.one(\"error\", function () {\n        n.off(\"load error\"), e(s);\n      }), s.src = t;\n    }\n  }, r.prototype.init = function () {\n    var a = !1,\n      h = !1,\n      g = this;\n    l.each(this.entries, function (t, i) {\n      var e = l(i),\n        s = g.imgFromEntry(e);\n      if (e.addClass(\"jg-entry\"), !0 !== e.data(\"jg.loaded\") && \"skipped\" !== e.data(\"jg.loaded\")) if (null !== g.settings.rel && e.attr(\"rel\", g.settings.rel), null !== g.settings.target && e.attr(\"target\", g.settings.target), null !== s) {\n        var n = g.extractImgSrcFromImage(s);\n        if (!1 === g.settings.waitThumbnailsLoad || !n) {\n          var r = parseFloat(s.attr(\"width\")),\n            o = parseFloat(s.attr(\"height\"));\n          if (\"svg\" === s.prop(\"tagName\") && (r = parseFloat(s[0].getBBox().width), o = parseFloat(s[0].getBBox().height)), !isNaN(r) && !isNaN(o)) return e.data(\"jg.width\", r), e.data(\"jg.height\", o), e.data(\"jg.loaded\", \"skipped\"), h = !0, g.startImgAnalyzer(!1), !0;\n        }\n        e.data(\"jg.loaded\", !1), a = !0, g.isSpinnerActive() || g.startLoadingSpinnerAnimation(), g.onImageEvent(n, function (t) {\n          e.data(\"jg.width\", t.width), e.data(\"jg.height\", t.height), e.data(\"jg.loaded\", !0), g.startImgAnalyzer(!1);\n        }, function () {\n          e.data(\"jg.loaded\", \"error\"), g.startImgAnalyzer(!1);\n        });\n      } else e.data(\"jg.loaded\", !0), e.data(\"jg.width\", e.width() | parseFloat(e.css(\"width\")) | 1), e.data(\"jg.height\", e.height() | parseFloat(e.css(\"height\")) | 1);\n    }), a || h || this.startImgAnalyzer(!1), this.checkWidth();\n  }, r.prototype.checkOrConvertNumber = function (t, i) {\n    if (\"string\" === l.type(t[i]) && (t[i] = parseFloat(t[i])), \"number\" !== l.type(t[i])) throw i + \" must be a number\";\n    if (isNaN(t[i])) throw \"invalid number for \" + i;\n  }, r.prototype.checkSizeRangesSuffixes = function () {\n    if (\"object\" !== l.type(this.settings.sizeRangeSuffixes)) throw \"sizeRangeSuffixes must be defined and must be an object\";\n    var t = [];\n    for (var i in this.settings.sizeRangeSuffixes) this.settings.sizeRangeSuffixes.hasOwnProperty(i) && t.push(i);\n    for (var e = {\n        0: \"\"\n      }, s = 0; s < t.length; s++) if (\"string\" === l.type(t[s])) try {\n      e[parseInt(t[s].replace(/^[a-z]+/, \"\"), 10)] = this.settings.sizeRangeSuffixes[t[s]];\n    } catch (t) {\n      throw \"sizeRangeSuffixes keys must contains correct numbers (\" + t + \")\";\n    } else e[t[s]] = this.settings.sizeRangeSuffixes[t[s]];\n    this.settings.sizeRangeSuffixes = e;\n  }, r.prototype.retrieveMaxRowHeight = function () {\n    var t = null,\n      i = this.settings.rowHeight;\n    if (\"string\" === l.type(this.settings.maxRowHeight)) t = this.settings.maxRowHeight.match(/^[0-9]+%$/) ? i * parseFloat(this.settings.maxRowHeight.match(/^([0-9]+)%$/)[1]) / 100 : parseFloat(this.settings.maxRowHeight);else {\n      if (\"number\" !== l.type(this.settings.maxRowHeight)) {\n        if (!1 === this.settings.maxRowHeight || null == this.settings.maxRowHeight) return null;\n        throw \"maxRowHeight must be a number or a percentage\";\n      }\n      t = this.settings.maxRowHeight;\n    }\n    if (isNaN(t)) throw \"invalid number for maxRowHeight\";\n    return t < i && (t = i), t;\n  }, r.prototype.checkSettings = function () {\n    this.checkSizeRangesSuffixes(), this.checkOrConvertNumber(this.settings, \"rowHeight\"), this.checkOrConvertNumber(this.settings, \"margins\"), this.checkOrConvertNumber(this.settings, \"border\"), this.checkOrConvertNumber(this.settings, \"maxRowsCount\");\n    var t = [\"justify\", \"nojustify\", \"left\", \"center\", \"right\", \"hide\"];\n    if (-1 === t.indexOf(this.settings.lastRow)) throw \"lastRow must be one of: \" + t.join(\", \");\n    if (this.checkOrConvertNumber(this.settings, \"justifyThreshold\"), this.settings.justifyThreshold < 0 || 1 < this.settings.justifyThreshold) throw \"justifyThreshold must be in the interval [0,1]\";\n    if (\"boolean\" !== l.type(this.settings.cssAnimation)) throw \"cssAnimation must be a boolean\";\n    if (\"boolean\" !== l.type(this.settings.captions)) throw \"captions must be a boolean\";\n    if (this.checkOrConvertNumber(this.settings.captionSettings, \"animationDuration\"), this.checkOrConvertNumber(this.settings.captionSettings, \"visibleOpacity\"), this.settings.captionSettings.visibleOpacity < 0 || 1 < this.settings.captionSettings.visibleOpacity) throw \"captionSettings.visibleOpacity must be in the interval [0, 1]\";\n    if (this.checkOrConvertNumber(this.settings.captionSettings, \"nonVisibleOpacity\"), this.settings.captionSettings.nonVisibleOpacity < 0 || 1 < this.settings.captionSettings.nonVisibleOpacity) throw \"captionSettings.nonVisibleOpacity must be in the interval [0, 1]\";\n    if (this.checkOrConvertNumber(this.settings, \"imagesAnimationDuration\"), this.checkOrConvertNumber(this.settings, \"refreshTime\"), this.checkOrConvertNumber(this.settings, \"refreshSensitivity\"), \"boolean\" !== l.type(this.settings.randomize)) throw \"randomize must be a boolean\";\n    if (\"string\" !== l.type(this.settings.selector)) throw \"selector must be a string\";\n    if (!1 !== this.settings.sort && !l.isFunction(this.settings.sort)) throw \"sort must be false or a comparison function\";\n    if (!1 !== this.settings.filter && !l.isFunction(this.settings.filter) && \"string\" !== l.type(this.settings.filter)) throw \"filter must be false, a string or a filter function\";\n  }, r.prototype.retrieveSuffixRanges = function () {\n    var t = [];\n    for (var i in this.settings.sizeRangeSuffixes) this.settings.sizeRangeSuffixes.hasOwnProperty(i) && t.push(parseInt(i, 10));\n    return t.sort(function (t, i) {\n      return i < t ? 1 : t < i ? -1 : 0;\n    }), t;\n  }, r.prototype.updateSettings = function (t) {\n    this.settings = l.extend({}, this.settings, t), this.checkSettings(), this.border = 0 <= this.settings.border ? this.settings.border : this.settings.margins, this.maxRowHeight = this.retrieveMaxRowHeight(), this.suffixRanges = this.retrieveSuffixRanges();\n  }, r.prototype.defaults = {\n    sizeRangeSuffixes: {},\n    thumbnailPath: void 0,\n    rowHeight: 120,\n    maxRowHeight: !1,\n    maxRowsCount: 0,\n    margins: 1,\n    border: -1,\n    lastRow: \"nojustify\",\n    justifyThreshold: .9,\n    waitThumbnailsLoad: !0,\n    captions: !0,\n    cssAnimation: !0,\n    imagesAnimationDuration: 500,\n    captionSettings: {\n      animationDuration: 500,\n      visibleOpacity: .7,\n      nonVisibleOpacity: 0\n    },\n    rel: null,\n    target: null,\n    extension: /\\.[^.\\\\/]+$/,\n    refreshTime: 200,\n    refreshSensitivity: 0,\n    randomize: !1,\n    rtl: !1,\n    sort: !1,\n    filter: !1,\n    selector: \"a\",\n    imgSelector: \"> img, > a > img, > svg, > a > svg\",\n    triggerEvent: function (t) {\n      this.$gallery.trigger(t);\n    }\n  }, l.fn.justifiedGallery = function (n) {\n    return this.each(function (t, i) {\n      var e = l(i);\n      e.addClass(\"justified-gallery\");\n      var s = e.data(\"jg.controller\");\n      if (void 0 === s) {\n        if (null != n && \"object\" !== l.type(n)) {\n          if (\"destroy\" === n) return;\n          throw \"The argument must be an object\";\n        }\n        s = new r(e, l.extend({}, r.prototype.defaults, n)), e.data(\"jg.controller\", s);\n      } else if (\"norewind\" === n) ;else {\n        if (\"destroy\" === n) return void s.destroy();\n        s.updateSettings(n), s.rewind();\n      }\n      s.updateEntries(\"norewind\" === n) && s.init();\n    });\n  };\n});\n\n/* eslint-enable */\n\nconst entities = [];\nconst TitleElement = document.getElementById('title');\nconst two = new two_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n  type: two_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Types.canvas,\n  fitted: true,\n  autostart: true\n}).appendTo(TitleElement);\nconst solver = matter_js__WEBPACK_IMPORTED_MODULE_1___default().Engine.create();\nsolver.gravity.y = 0;\nconst bounds = {\n  length: 0,\n  thickness: 0,\n  properties: {\n    isStatic: true\n  }\n};\nbounds.top = createBoundary(bounds.length, bounds.thickness);\nbounds.left = createBoundary(bounds.thickness, bounds.length);\nbounds.right = createBoundary(bounds.thickness, bounds.length);\nbounds.bottom = createBoundary(bounds.length, bounds.thickness);\nmatter_js__WEBPACK_IMPORTED_MODULE_1___default().World.add(solver.world, [bounds.top.entity, bounds.left.entity, bounds.right.entity, bounds.bottom.entity]);\nmatter_js__WEBPACK_IMPORTED_MODULE_1___default().use((matter_attractors__WEBPACK_IMPORTED_MODULE_2___default()));\nconst attractiveBody = matter_js__WEBPACK_IMPORTED_MODULE_1___default().Bodies.circle(TitleElement.clientWidth / 2, TitleElement.clientHeight / 2, 100, {\n  isStatic: true,\n  plugin: {\n    attractors: [function (bodyA, bodyB) {\n      return {\n        x: (bodyA.position.x - bodyB.position.x) * 1e-6,\n        y: (bodyA.position.y - bodyB.position.y) * 1e-6\n      };\n    }]\n  }\n});\nmatter_js__WEBPACK_IMPORTED_MODULE_1___default().World.add(solver.world, attractiveBody);\nconst defaultStyles = {\n  margin: {\n    top: 100,\n    left: 0,\n    right: 0,\n    bottom: 0\n  }\n};\naddShapes();\nresize();\nconst mouse = addMouseInteraction();\ntwo.bind('update', update);\nfunction addMouseInteraction() {\n  const mouse = matter_js__WEBPACK_IMPORTED_MODULE_1___default().Mouse.create(TitleElement);\n  const mouseConstraint = matter_js__WEBPACK_IMPORTED_MODULE_1___default().MouseConstraint.create(solver, {\n    mouse,\n    constraint: {\n      stiffness: 0.2\n    }\n  });\n  matter_js__WEBPACK_IMPORTED_MODULE_1___default().World.add(solver.world, mouseConstraint);\n  matter_js__WEBPACK_IMPORTED_MODULE_1___default().Events.on(solver, 'afterUpdate', function () {\n    if (!mouse.position.x) {\n      return;\n    }\n    matter_js__WEBPACK_IMPORTED_MODULE_1___default().Body.translate(attractiveBody, {\n      x: mouse.position.x - attractiveBody.position.x,\n      y: mouse.position.y - attractiveBody.position.y\n    });\n  });\n  return mouseConstraint;\n}\nmouse.mouse.element.removeEventListener('mousewheel', mouse.mouse.mousewheel);\nmouse.mouse.element.removeEventListener('DOMMouseScroll', mouse.mouse.mousewheel);\nmouse.mouse.element.removeEventListener('touchmove', mouse.mouse.mousemove);\nmouse.mouse.element.removeEventListener('touchstart', mouse.mouse.mousedown);\nmouse.mouse.element.removeEventListener('touchend', mouse.mouse.mouseup);\nfunction resize() {\n  window.addEventListener('resize', () => {\n    two.width = TitleElement.clientWidth;\n    two.height = TitleElement.clientHeight;\n  });\n}\nfunction addShapes() {\n  let x = 0;\n  let y = 0;\n  for (let i = 0; i < 60; i++) {\n    const group = new two_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Group();\n    const rect = {\n      width: 0,\n      height: 0\n    };\n    let ox = x + rect.width;\n    let oy = y + rect.height;\n    const ca = x + rect.width;\n    const cb = two.width;\n    if (ca >= cb) {\n      x = defaultStyles.margin.left;\n      y += defaultStyles.margin.top + defaultStyles.margin.bottom;\n      ox = x + rect.width / 2;\n      oy = y + rect.height / 2;\n    }\n    const rectangle = new two_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].RoundedRectangle(0, 0, 100, 100, 8);\n    rectangle.fill = 'rgb(251,249,244)';\n    rectangle.noStroke();\n    const entity = matter_js__WEBPACK_IMPORTED_MODULE_1___default().Bodies.rectangle(ox, oy, 1, 1);\n    matter_js__WEBPACK_IMPORTED_MODULE_1___default().Body.scale(entity, 100, 100);\n    entity.scale = new two_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"].Vector(100, 100);\n    entity.object = group;\n    entities.push(entity);\n    x += 100 + defaultStyles.margin.left + defaultStyles.margin.right;\n    group.rectangle = rectangle;\n    group.entity = entity;\n    group.add(rectangle);\n    two.add(group);\n  }\n  matter_js__WEBPACK_IMPORTED_MODULE_1___default().World.add(solver.world, entities);\n}\nfunction update() {\n  const allBodies = matter_js__WEBPACK_IMPORTED_MODULE_1___default().Composite.allBodies(solver.world);\n  matter_js__WEBPACK_IMPORTED_MODULE_1___default().MouseConstraint.update(mouse, allBodies);\n  matter_js__WEBPACK_IMPORTED_MODULE_1___default().MouseConstraint._triggerEvents(mouse);\n  matter_js__WEBPACK_IMPORTED_MODULE_1___default().Engine.update(solver);\n  for (let i = 0; i < entities.length; i++) {\n    const entity = entities[i];\n    entity.object.position.copy(entity.position);\n    entity.object.rotation = entity.angle;\n  }\n}\nfunction createBoundary(width, height) {\n  const rectangle = two.makeRectangle(0, 0, width, height);\n  rectangle.visible = false;\n  rectangle.entity = matter_js__WEBPACK_IMPORTED_MODULE_1___default().Bodies.rectangle(0, 0, width, height, bounds.properties);\n  rectangle.entity.position = rectangle.position;\n  return rectangle;\n}\n\n//# sourceURL=webpack://ocaduillustration/./assets/src/js/home.js?");

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n * jQuery JavaScript Library v3.6.4\n * https://jquery.com/\n *\n * Includes Sizzle.js\n * https://sizzlejs.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2023-03-08T15:28Z\n */\n( function( global, factory ) {\n\n\t\"use strict\";\n\n\tif (  true && typeof module.exports === \"object\" ) {\n\n\t\t// For CommonJS and CommonJS-like environments where a proper `window`\n\t\t// is present, execute the factory and get jQuery.\n\t\t// For environments that do not have a `window` with a `document`\n\t\t// (such as Node.js), expose a factory as module.exports.\n\t\t// This accentuates the need for the creation of a real `window`.\n\t\t// e.g. var jQuery = require(\"jquery\")(window);\n\t\t// See ticket trac-14549 for more info.\n\t\tmodule.exports = global.document ?\n\t\t\tfactory( global, true ) :\n\t\t\tfunction( w ) {\n\t\t\t\tif ( !w.document ) {\n\t\t\t\t\tthrow new Error( \"jQuery requires a window with a document\" );\n\t\t\t\t}\n\t\t\t\treturn factory( w );\n\t\t\t};\n\t} else {\n\t\tfactory( global );\n\t}\n\n// Pass this if window is not defined yet\n} )( typeof window !== \"undefined\" ? window : this, function( window, noGlobal ) {\n\n// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1\n// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode\n// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common\n// enough that all such attempts are guarded in a try block.\n\"use strict\";\n\nvar arr = [];\n\nvar getProto = Object.getPrototypeOf;\n\nvar slice = arr.slice;\n\nvar flat = arr.flat ? function( array ) {\n\treturn arr.flat.call( array );\n} : function( array ) {\n\treturn arr.concat.apply( [], array );\n};\n\n\nvar push = arr.push;\n\nvar indexOf = arr.indexOf;\n\nvar class2type = {};\n\nvar toString = class2type.toString;\n\nvar hasOwn = class2type.hasOwnProperty;\n\nvar fnToString = hasOwn.toString;\n\nvar ObjectFunctionString = fnToString.call( Object );\n\nvar support = {};\n\nvar isFunction = function isFunction( obj ) {\n\n\t\t// Support: Chrome <=57, Firefox <=52\n\t\t// In some browsers, typeof returns \"function\" for HTML <object> elements\n\t\t// (i.e., `typeof document.createElement( \"object\" ) === \"function\"`).\n\t\t// We don't want to classify *any* DOM node as a function.\n\t\t// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5\n\t\t// Plus for old WebKit, typeof returns \"function\" for HTML collections\n\t\t// (e.g., `typeof document.getElementsByTagName(\"div\") === \"function\"`). (gh-4756)\n\t\treturn typeof obj === \"function\" && typeof obj.nodeType !== \"number\" &&\n\t\t\ttypeof obj.item !== \"function\";\n\t};\n\n\nvar isWindow = function isWindow( obj ) {\n\t\treturn obj != null && obj === obj.window;\n\t};\n\n\nvar document = window.document;\n\n\n\n\tvar preservedScriptAttributes = {\n\t\ttype: true,\n\t\tsrc: true,\n\t\tnonce: true,\n\t\tnoModule: true\n\t};\n\n\tfunction DOMEval( code, node, doc ) {\n\t\tdoc = doc || document;\n\n\t\tvar i, val,\n\t\t\tscript = doc.createElement( \"script\" );\n\n\t\tscript.text = code;\n\t\tif ( node ) {\n\t\t\tfor ( i in preservedScriptAttributes ) {\n\n\t\t\t\t// Support: Firefox 64+, Edge 18+\n\t\t\t\t// Some browsers don't support the \"nonce\" property on scripts.\n\t\t\t\t// On the other hand, just using `getAttribute` is not enough as\n\t\t\t\t// the `nonce` attribute is reset to an empty string whenever it\n\t\t\t\t// becomes browsing-context connected.\n\t\t\t\t// See https://github.com/whatwg/html/issues/2369\n\t\t\t\t// See https://html.spec.whatwg.org/#nonce-attributes\n\t\t\t\t// The `node.getAttribute` check was added for the sake of\n\t\t\t\t// `jQuery.globalEval` so that it can fake a nonce-containing node\n\t\t\t\t// via an object.\n\t\t\t\tval = node[ i ] || node.getAttribute && node.getAttribute( i );\n\t\t\t\tif ( val ) {\n\t\t\t\t\tscript.setAttribute( i, val );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tdoc.head.appendChild( script ).parentNode.removeChild( script );\n\t}\n\n\nfunction toType( obj ) {\n\tif ( obj == null ) {\n\t\treturn obj + \"\";\n\t}\n\n\t// Support: Android <=2.3 only (functionish RegExp)\n\treturn typeof obj === \"object\" || typeof obj === \"function\" ?\n\t\tclass2type[ toString.call( obj ) ] || \"object\" :\n\t\ttypeof obj;\n}\n/* global Symbol */\n// Defining this global in .eslintrc.json would create a danger of using the global\n// unguarded in another place, it seems safer to define global only for this module\n\n\n\nvar\n\tversion = \"3.6.4\",\n\n\t// Define a local copy of jQuery\n\tjQuery = function( selector, context ) {\n\n\t\t// The jQuery object is actually just the init constructor 'enhanced'\n\t\t// Need init if jQuery is called (just allow error to be thrown if not included)\n\t\treturn new jQuery.fn.init( selector, context );\n\t};\n\njQuery.fn = jQuery.prototype = {\n\n\t// The current version of jQuery being used\n\tjquery: version,\n\n\tconstructor: jQuery,\n\n\t// The default length of a jQuery object is 0\n\tlength: 0,\n\n\ttoArray: function() {\n\t\treturn slice.call( this );\n\t},\n\n\t// Get the Nth element in the matched element set OR\n\t// Get the whole matched element set as a clean array\n\tget: function( num ) {\n\n\t\t// Return all the elements in a clean array\n\t\tif ( num == null ) {\n\t\t\treturn slice.call( this );\n\t\t}\n\n\t\t// Return just the one element from the set\n\t\treturn num < 0 ? this[ num + this.length ] : this[ num ];\n\t},\n\n\t// Take an array of elements and push it onto the stack\n\t// (returning the new matched element set)\n\tpushStack: function( elems ) {\n\n\t\t// Build a new jQuery matched element set\n\t\tvar ret = jQuery.merge( this.constructor(), elems );\n\n\t\t// Add the old object onto the stack (as a reference)\n\t\tret.prevObject = this;\n\n\t\t// Return the newly-formed element set\n\t\treturn ret;\n\t},\n\n\t// Execute a callback for every element in the matched set.\n\teach: function( callback ) {\n\t\treturn jQuery.each( this, callback );\n\t},\n\n\tmap: function( callback ) {\n\t\treturn this.pushStack( jQuery.map( this, function( elem, i ) {\n\t\t\treturn callback.call( elem, i, elem );\n\t\t} ) );\n\t},\n\n\tslice: function() {\n\t\treturn this.pushStack( slice.apply( this, arguments ) );\n\t},\n\n\tfirst: function() {\n\t\treturn this.eq( 0 );\n\t},\n\n\tlast: function() {\n\t\treturn this.eq( -1 );\n\t},\n\n\teven: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn ( i + 1 ) % 2;\n\t\t} ) );\n\t},\n\n\todd: function() {\n\t\treturn this.pushStack( jQuery.grep( this, function( _elem, i ) {\n\t\t\treturn i % 2;\n\t\t} ) );\n\t},\n\n\teq: function( i ) {\n\t\tvar len = this.length,\n\t\t\tj = +i + ( i < 0 ? len : 0 );\n\t\treturn this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );\n\t},\n\n\tend: function() {\n\t\treturn this.prevObject || this.constructor();\n\t},\n\n\t// For internal use only.\n\t// Behaves like an Array's method, not like a jQuery method.\n\tpush: push,\n\tsort: arr.sort,\n\tsplice: arr.splice\n};\n\njQuery.extend = jQuery.fn.extend = function() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[ 0 ] || {},\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif ( typeof target === \"boolean\" ) {\n\t\tdeep = target;\n\n\t\t// Skip the boolean and the target\n\t\ttarget = arguments[ i ] || {};\n\t\ti++;\n\t}\n\n\t// Handle case when target is a string or something (possible in deep copy)\n\tif ( typeof target !== \"object\" && !isFunction( target ) ) {\n\t\ttarget = {};\n\t}\n\n\t// Extend jQuery itself if only one argument is passed\n\tif ( i === length ) {\n\t\ttarget = this;\n\t\ti--;\n\t}\n\n\tfor ( ; i < length; i++ ) {\n\n\t\t// Only deal with non-null/undefined values\n\t\tif ( ( options = arguments[ i ] ) != null ) {\n\n\t\t\t// Extend the base object\n\t\t\tfor ( name in options ) {\n\t\t\t\tcopy = options[ name ];\n\n\t\t\t\t// Prevent Object.prototype pollution\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif ( name === \"__proto__\" || target === copy ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\tif ( deep && copy && ( jQuery.isPlainObject( copy ) ||\n\t\t\t\t\t( copyIsArray = Array.isArray( copy ) ) ) ) {\n\t\t\t\t\tsrc = target[ name ];\n\n\t\t\t\t\t// Ensure proper type for the source value\n\t\t\t\t\tif ( copyIsArray && !Array.isArray( src ) ) {\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {\n\t\t\t\t\t\tclone = {};\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclone = src;\n\t\t\t\t\t}\n\t\t\t\t\tcopyIsArray = false;\n\n\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\ttarget[ name ] = jQuery.extend( deep, clone, copy );\n\n\t\t\t\t// Don't bring in undefined values\n\t\t\t\t} else if ( copy !== undefined ) {\n\t\t\t\t\ttarget[ name ] = copy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\njQuery.extend( {\n\n\t// Unique for each copy of jQuery on the page\n\texpando: \"jQuery\" + ( version + Math.random() ).replace( /\\D/g, \"\" ),\n\n\t// Assume jQuery is ready without the ready module\n\tisReady: true,\n\n\terror: function( msg ) {\n\t\tthrow new Error( msg );\n\t},\n\n\tnoop: function() {},\n\n\tisPlainObject: function( obj ) {\n\t\tvar proto, Ctor;\n\n\t\t// Detect obvious negatives\n\t\t// Use toString instead of jQuery.type to catch host objects\n\t\tif ( !obj || toString.call( obj ) !== \"[object Object]\" ) {\n\t\t\treturn false;\n\t\t}\n\n\t\tproto = getProto( obj );\n\n\t\t// Objects with no prototype (e.g., `Object.create( null )`) are plain\n\t\tif ( !proto ) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Objects with prototype are plain iff they were constructed by a global Object function\n\t\tCtor = hasOwn.call( proto, \"constructor\" ) && proto.constructor;\n\t\treturn typeof Ctor === \"function\" && fnToString.call( Ctor ) === ObjectFunctionString;\n\t},\n\n\tisEmptyObject: function( obj ) {\n\t\tvar name;\n\n\t\tfor ( name in obj ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t},\n\n\t// Evaluates a script in a provided context; falls back to the global one\n\t// if not specified.\n\tglobalEval: function( code, options, doc ) {\n\t\tDOMEval( code, { nonce: options && options.nonce }, doc );\n\t},\n\n\teach: function( obj, callback ) {\n\t\tvar length, i = 0;\n\n\t\tif ( isArrayLike( obj ) ) {\n\t\t\tlength = obj.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i in obj ) {\n\t\t\t\tif ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn obj;\n\t},\n\n\t// results is for internal usage only\n\tmakeArray: function( arr, results ) {\n\t\tvar ret = results || [];\n\n\t\tif ( arr != null ) {\n\t\t\tif ( isArrayLike( Object( arr ) ) ) {\n\t\t\t\tjQuery.merge( ret,\n\t\t\t\t\ttypeof arr === \"string\" ?\n\t\t\t\t\t\t[ arr ] : arr\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tpush.call( ret, arr );\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t},\n\n\tinArray: function( elem, arr, i ) {\n\t\treturn arr == null ? -1 : indexOf.call( arr, elem, i );\n\t},\n\n\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t// push.apply(_, arraylike) throws on ancient WebKit\n\tmerge: function( first, second ) {\n\t\tvar len = +second.length,\n\t\t\tj = 0,\n\t\t\ti = first.length;\n\n\t\tfor ( ; j < len; j++ ) {\n\t\t\tfirst[ i++ ] = second[ j ];\n\t\t}\n\n\t\tfirst.length = i;\n\n\t\treturn first;\n\t},\n\n\tgrep: function( elems, callback, invert ) {\n\t\tvar callbackInverse,\n\t\t\tmatches = [],\n\t\t\ti = 0,\n\t\t\tlength = elems.length,\n\t\t\tcallbackExpect = !invert;\n\n\t\t// Go through the array, only saving the items\n\t\t// that pass the validator function\n\t\tfor ( ; i < length; i++ ) {\n\t\t\tcallbackInverse = !callback( elems[ i ], i );\n\t\t\tif ( callbackInverse !== callbackExpect ) {\n\t\t\t\tmatches.push( elems[ i ] );\n\t\t\t}\n\t\t}\n\n\t\treturn matches;\n\t},\n\n\t// arg is for internal usage only\n\tmap: function( elems, callback, arg ) {\n\t\tvar length, value,\n\t\t\ti = 0,\n\t\t\tret = [];\n\n\t\t// Go through the array, translating each of the items to their new values\n\t\tif ( isArrayLike( elems ) ) {\n\t\t\tlength = elems.length;\n\t\t\tfor ( ; i < length; i++ ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Go through every key on the object,\n\t\t} else {\n\t\t\tfor ( i in elems ) {\n\t\t\t\tvalue = callback( elems[ i ], i, arg );\n\n\t\t\t\tif ( value != null ) {\n\t\t\t\t\tret.push( value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Flatten any nested arrays\n\t\treturn flat( ret );\n\t},\n\n\t// A global GUID counter for objects\n\tguid: 1,\n\n\t// jQuery.support is not used in Core but other projects attach their\n\t// properties to it so it needs to exist.\n\tsupport: support\n} );\n\nif ( typeof Symbol === \"function\" ) {\n\tjQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];\n}\n\n// Populate the class2type map\njQuery.each( \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split( \" \" ),\n\tfunction( _i, name ) {\n\t\tclass2type[ \"[object \" + name + \"]\" ] = name.toLowerCase();\n\t} );\n\nfunction isArrayLike( obj ) {\n\n\t// Support: real iOS 8.2 only (not reproducible in simulator)\n\t// `in` check used to prevent JIT error (gh-2145)\n\t// hasOwn isn't used here due to false negatives\n\t// regarding Nodelist length in IE\n\tvar length = !!obj && \"length\" in obj && obj.length,\n\t\ttype = toType( obj );\n\n\tif ( isFunction( obj ) || isWindow( obj ) ) {\n\t\treturn false;\n\t}\n\n\treturn type === \"array\" || length === 0 ||\n\t\ttypeof length === \"number\" && length > 0 && ( length - 1 ) in obj;\n}\nvar Sizzle =\n/*!\n * Sizzle CSS Selector Engine v2.3.10\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2023-02-14\n */\n( function( window ) {\nvar i,\n\tsupport,\n\tExpr,\n\tgetText,\n\tisXML,\n\ttokenize,\n\tcompile,\n\tselect,\n\toutermostContext,\n\tsortInput,\n\thasDuplicate,\n\n\t// Local document vars\n\tsetDocument,\n\tdocument,\n\tdocElem,\n\tdocumentIsHTML,\n\trbuggyQSA,\n\trbuggyMatches,\n\tmatches,\n\tcontains,\n\n\t// Instance-specific data\n\texpando = \"sizzle\" + 1 * new Date(),\n\tpreferredDoc = window.document,\n\tdirruns = 0,\n\tdone = 0,\n\tclassCache = createCache(),\n\ttokenCache = createCache(),\n\tcompilerCache = createCache(),\n\tnonnativeSelectorCache = createCache(),\n\tsortOrder = function( a, b ) {\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t}\n\t\treturn 0;\n\t},\n\n\t// Instance methods\n\thasOwn = ( {} ).hasOwnProperty,\n\tarr = [],\n\tpop = arr.pop,\n\tpushNative = arr.push,\n\tpush = arr.push,\n\tslice = arr.slice,\n\n\t// Use a stripped-down indexOf as it's faster than native\n\t// https://jsperf.com/thor-indexof-vs-for/5\n\tindexOf = function( list, elem ) {\n\t\tvar i = 0,\n\t\t\tlen = list.length;\n\t\tfor ( ; i < len; i++ ) {\n\t\t\tif ( list[ i ] === elem ) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t},\n\n\tbooleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|\" +\n\t\t\"ismap|loop|multiple|open|readonly|required|scoped\",\n\n\t// Regular expressions\n\n\t// http://www.w3.org/TR/css3-selectors/#whitespace\n\twhitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n\n\t// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram\n\tidentifier = \"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace +\n\t\t\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",\n\n\t// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n\tattributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace +\n\n\t\t// Operator (capture 2)\n\t\t\"*([*^$|!~]?=)\" + whitespace +\n\n\t\t// \"Attribute values must be CSS identifiers [capture 5]\n\t\t// or strings [capture 3 or capture 4]\"\n\t\t\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" +\n\t\twhitespace + \"*\\\\]\",\n\n\tpseudos = \":(\" + identifier + \")(?:\\\\((\" +\n\n\t\t// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n\t\t// 1. quoted (capture 3; capture 4 or capture 5)\n\t\t\"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" +\n\n\t\t// 2. simple (capture 6)\n\t\t\"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" +\n\n\t\t// 3. anything else (capture 2)\n\t\t\".*\" +\n\t\t\")\\\\)|)\",\n\n\t// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n\trwhitespace = new RegExp( whitespace + \"+\", \"g\" ),\n\trtrim = new RegExp( \"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" +\n\t\twhitespace + \"+$\", \"g\" ),\n\n\trcomma = new RegExp( \"^\" + whitespace + \"*,\" + whitespace + \"*\" ),\n\trleadingCombinator = new RegExp( \"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace +\n\t\t\"*\" ),\n\trdescend = new RegExp( whitespace + \"|>\" ),\n\n\trpseudo = new RegExp( pseudos ),\n\tridentifier = new RegExp( \"^\" + identifier + \"$\" ),\n\n\tmatchExpr = {\n\t\t\"ID\": new RegExp( \"^#(\" + identifier + \")\" ),\n\t\t\"CLASS\": new RegExp( \"^\\\\.(\" + identifier + \")\" ),\n\t\t\"TAG\": new RegExp( \"^(\" + identifier + \"|[*])\" ),\n\t\t\"ATTR\": new RegExp( \"^\" + attributes ),\n\t\t\"PSEUDO\": new RegExp( \"^\" + pseudos ),\n\t\t\"CHILD\": new RegExp( \"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" +\n\t\t\twhitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" +\n\t\t\twhitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\" ),\n\t\t\"bool\": new RegExp( \"^(?:\" + booleans + \")$\", \"i\" ),\n\n\t\t// For use in libraries implementing .is()\n\t\t// We use this for POS matching in `select`\n\t\t\"needsContext\": new RegExp( \"^\" + whitespace +\n\t\t\t\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace +\n\t\t\t\"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\" )\n\t},\n\n\trhtml = /HTML$/i,\n\trinputs = /^(?:input|select|textarea|button)$/i,\n\trheader = /^h\\d$/i,\n\n\trnative = /^[^{]+\\{\\s*\\[native \\w/,\n\n\t// Easily-parseable/retrievable ID or TAG or CLASS selectors\n\trquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n\n\trsibling = /[+~]/,\n\n\t// CSS escapes\n\t// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n\trunescape = new RegExp( \"\\\\\\\\[\\\\da-fA-F]{1,6}\" + whitespace + \"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\", \"g\" ),\n\tfunescape = function( escape, nonHex ) {\n\t\tvar high = \"0x\" + escape.slice( 1 ) - 0x10000;\n\n\t\treturn nonHex ?\n\n\t\t\t// Strip the backslash prefix from a non-hex escape sequence\n\t\t\tnonHex :\n\n\t\t\t// Replace a hexadecimal escape sequence with the encoded Unicode code point\n\t\t\t// Support: IE <=11+\n\t\t\t// For values outside the Basic Multilingual Plane (BMP), manually construct a\n\t\t\t// surrogate pair\n\t\t\thigh < 0 ?\n\t\t\t\tString.fromCharCode( high + 0x10000 ) :\n\t\t\t\tString.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );\n\t},\n\n\t// CSS string/identifier serialization\n\t// https://drafts.csswg.org/cssom/#common-serializing-idioms\n\trcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n\tfcssescape = function( ch, asCodePoint ) {\n\t\tif ( asCodePoint ) {\n\n\t\t\t// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n\t\t\tif ( ch === \"\\0\" ) {\n\t\t\t\treturn \"\\uFFFD\";\n\t\t\t}\n\n\t\t\t// Control characters and (dependent upon position) numbers get escaped as code points\n\t\t\treturn ch.slice( 0, -1 ) + \"\\\\\" +\n\t\t\t\tch.charCodeAt( ch.length - 1 ).toString( 16 ) + \" \";\n\t\t}\n\n\t\t// Other potentially-special ASCII characters get backslash-escaped\n\t\treturn \"\\\\\" + ch;\n\t},\n\n\t// Used for iframes\n\t// See setDocument()\n\t// Removing the function wrapper causes a \"Permission Denied\"\n\t// error in IE\n\tunloadHandler = function() {\n\t\tsetDocument();\n\t},\n\n\tinDisabledFieldset = addCombinator(\n\t\tfunction( elem ) {\n\t\t\treturn elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n\t\t},\n\t\t{ dir: \"parentNode\", next: \"legend\" }\n\t);\n\n// Optimize for push.apply( _, NodeList )\ntry {\n\tpush.apply(\n\t\t( arr = slice.call( preferredDoc.childNodes ) ),\n\t\tpreferredDoc.childNodes\n\t);\n\n\t// Support: Android<4.0\n\t// Detect silently failing push.apply\n\t// eslint-disable-next-line no-unused-expressions\n\tarr[ preferredDoc.childNodes.length ].nodeType;\n} catch ( e ) {\n\tpush = { apply: arr.length ?\n\n\t\t// Leverage slice if possible\n\t\tfunction( target, els ) {\n\t\t\tpushNative.apply( target, slice.call( els ) );\n\t\t} :\n\n\t\t// Support: IE<9\n\t\t// Otherwise append directly\n\t\tfunction( target, els ) {\n\t\t\tvar j = target.length,\n\t\t\t\ti = 0;\n\n\t\t\t// Can't trust NodeList.length\n\t\t\twhile ( ( target[ j++ ] = els[ i++ ] ) ) {}\n\t\t\ttarget.length = j - 1;\n\t\t}\n\t};\n}\n\nfunction Sizzle( selector, context, results, seed ) {\n\tvar m, i, elem, nid, match, groups, newSelector,\n\t\tnewContext = context && context.ownerDocument,\n\n\t\t// nodeType defaults to 9, since context defaults to document\n\t\tnodeType = context ? context.nodeType : 9;\n\n\tresults = results || [];\n\n\t// Return early from calls with invalid selector or context\n\tif ( typeof selector !== \"string\" || !selector ||\n\t\tnodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {\n\n\t\treturn results;\n\t}\n\n\t// Try to shortcut find operations (as opposed to filters) in HTML documents\n\tif ( !seed ) {\n\t\tsetDocument( context );\n\t\tcontext = context || document;\n\n\t\tif ( documentIsHTML ) {\n\n\t\t\t// If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n\t\t\t// (excepting DocumentFragment context, where the methods don't exist)\n\t\t\tif ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {\n\n\t\t\t\t// ID selector\n\t\t\t\tif ( ( m = match[ 1 ] ) ) {\n\n\t\t\t\t\t// Document context\n\t\t\t\t\tif ( nodeType === 9 ) {\n\t\t\t\t\t\tif ( ( elem = context.getElementById( m ) ) ) {\n\n\t\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\t\tif ( elem.id === m ) {\n\t\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t// Element context\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// Support: IE, Opera, Webkit\n\t\t\t\t\t\t// TODO: identify versions\n\t\t\t\t\t\t// getElementById can match elements by name instead of ID\n\t\t\t\t\t\tif ( newContext && ( elem = newContext.getElementById( m ) ) &&\n\t\t\t\t\t\t\tcontains( context, elem ) &&\n\t\t\t\t\t\t\telem.id === m ) {\n\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\treturn results;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t// Type selector\n\t\t\t\t} else if ( match[ 2 ] ) {\n\t\t\t\t\tpush.apply( results, context.getElementsByTagName( selector ) );\n\t\t\t\t\treturn results;\n\n\t\t\t\t// Class selector\n\t\t\t\t} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&\n\t\t\t\t\tcontext.getElementsByClassName ) {\n\n\t\t\t\t\tpush.apply( results, context.getElementsByClassName( m ) );\n\t\t\t\t\treturn results;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Take advantage of querySelectorAll\n\t\t\tif ( support.qsa &&\n\t\t\t\t!nonnativeSelectorCache[ selector + \" \" ] &&\n\t\t\t\t( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&\n\n\t\t\t\t// Support: IE 8 only\n\t\t\t\t// Exclude object elements\n\t\t\t\t( nodeType !== 1 || context.nodeName.toLowerCase() !== \"object\" ) ) {\n\n\t\t\t\tnewSelector = selector;\n\t\t\t\tnewContext = context;\n\n\t\t\t\t// qSA considers elements outside a scoping root when evaluating child or\n\t\t\t\t// descendant combinators, which is not what we want.\n\t\t\t\t// In such cases, we work around the behavior by prefixing every selector in the\n\t\t\t\t// list with an ID selector referencing the scope context.\n\t\t\t\t// The technique has to be used as well when a leading combinator is used\n\t\t\t\t// as such selectors are not recognized by querySelectorAll.\n\t\t\t\t// Thanks to Andrew Dupont for this technique.\n\t\t\t\tif ( nodeType === 1 &&\n\t\t\t\t\t( rdescend.test( selector ) || rleadingCombinator.test( selector ) ) ) {\n\n\t\t\t\t\t// Expand context for sibling selectors\n\t\t\t\t\tnewContext = rsibling.test( selector ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext;\n\n\t\t\t\t\t// We can use :scope instead of the ID hack if the browser\n\t\t\t\t\t// supports it & if we're not changing the context.\n\t\t\t\t\tif ( newContext !== context || !support.scope ) {\n\n\t\t\t\t\t\t// Capture the context ID, setting it first if necessary\n\t\t\t\t\t\tif ( ( nid = context.getAttribute( \"id\" ) ) ) {\n\t\t\t\t\t\t\tnid = nid.replace( rcssescape, fcssescape );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tcontext.setAttribute( \"id\", ( nid = expando ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prefix every selector in the list\n\t\t\t\t\tgroups = tokenize( selector );\n\t\t\t\t\ti = groups.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tgroups[ i ] = ( nid ? \"#\" + nid : \":scope\" ) + \" \" +\n\t\t\t\t\t\t\ttoSelector( groups[ i ] );\n\t\t\t\t\t}\n\t\t\t\t\tnewSelector = groups.join( \",\" );\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tpush.apply( results,\n\t\t\t\t\t\tnewContext.querySelectorAll( newSelector )\n\t\t\t\t\t);\n\t\t\t\t\treturn results;\n\t\t\t\t} catch ( qsaError ) {\n\t\t\t\t\tnonnativeSelectorCache( selector, true );\n\t\t\t\t} finally {\n\t\t\t\t\tif ( nid === expando ) {\n\t\t\t\t\t\tcontext.removeAttribute( \"id\" );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// All others\n\treturn select( selector.replace( rtrim, \"$1\" ), context, results, seed );\n}\n\n/**\n * Create key-value caches of limited size\n * @returns {function(string, object)} Returns the Object data after storing it on itself with\n *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n *\tdeleting the oldest entry\n */\nfunction createCache() {\n\tvar keys = [];\n\n\tfunction cache( key, value ) {\n\n\t\t// Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n\t\tif ( keys.push( key + \" \" ) > Expr.cacheLength ) {\n\n\t\t\t// Only keep the most recent entries\n\t\t\tdelete cache[ keys.shift() ];\n\t\t}\n\t\treturn ( cache[ key + \" \" ] = value );\n\t}\n\treturn cache;\n}\n\n/**\n * Mark a function for special use by Sizzle\n * @param {Function} fn The function to mark\n */\nfunction markFunction( fn ) {\n\tfn[ expando ] = true;\n\treturn fn;\n}\n\n/**\n * Support testing using an element\n * @param {Function} fn Passed the created element and returns a boolean result\n */\nfunction assert( fn ) {\n\tvar el = document.createElement( \"fieldset\" );\n\n\ttry {\n\t\treturn !!fn( el );\n\t} catch ( e ) {\n\t\treturn false;\n\t} finally {\n\n\t\t// Remove from its parent by default\n\t\tif ( el.parentNode ) {\n\t\t\tel.parentNode.removeChild( el );\n\t\t}\n\n\t\t// release memory in IE\n\t\tel = null;\n\t}\n}\n\n/**\n * Adds the same handler for all of the specified attrs\n * @param {String} attrs Pipe-separated list of attributes\n * @param {Function} handler The method that will be applied\n */\nfunction addHandle( attrs, handler ) {\n\tvar arr = attrs.split( \"|\" ),\n\t\ti = arr.length;\n\n\twhile ( i-- ) {\n\t\tExpr.attrHandle[ arr[ i ] ] = handler;\n\t}\n}\n\n/**\n * Checks document order of two siblings\n * @param {Element} a\n * @param {Element} b\n * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n */\nfunction siblingCheck( a, b ) {\n\tvar cur = b && a,\n\t\tdiff = cur && a.nodeType === 1 && b.nodeType === 1 &&\n\t\t\ta.sourceIndex - b.sourceIndex;\n\n\t// Use IE sourceIndex if available on both nodes\n\tif ( diff ) {\n\t\treturn diff;\n\t}\n\n\t// Check if b follows a\n\tif ( cur ) {\n\t\twhile ( ( cur = cur.nextSibling ) ) {\n\t\t\tif ( cur === b ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn a ? 1 : -1;\n}\n\n/**\n * Returns a function to use in pseudos for input types\n * @param {String} type\n */\nfunction createInputPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn name === \"input\" && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for buttons\n * @param {String} type\n */\nfunction createButtonPseudo( type ) {\n\treturn function( elem ) {\n\t\tvar name = elem.nodeName.toLowerCase();\n\t\treturn ( name === \"input\" || name === \"button\" ) && elem.type === type;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for :enabled/:disabled\n * @param {Boolean} disabled true for :disabled; false for :enabled\n */\nfunction createDisabledPseudo( disabled ) {\n\n\t// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n\treturn function( elem ) {\n\n\t\t// Only certain elements can match :enabled or :disabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n\t\t// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n\t\tif ( \"form\" in elem ) {\n\n\t\t\t// Check for inherited disabledness on relevant non-disabled elements:\n\t\t\t// * listed form-associated elements in a disabled fieldset\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n\t\t\t// * option elements in a disabled optgroup\n\t\t\t//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n\t\t\t// All such elements have a \"form\" property.\n\t\t\tif ( elem.parentNode && elem.disabled === false ) {\n\n\t\t\t\t// Option elements defer to a parent optgroup if present\n\t\t\t\tif ( \"label\" in elem ) {\n\t\t\t\t\tif ( \"label\" in elem.parentNode ) {\n\t\t\t\t\t\treturn elem.parentNode.disabled === disabled;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn elem.disabled === disabled;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Support: IE 6 - 11\n\t\t\t\t// Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\t\t\t\treturn elem.isDisabled === disabled ||\n\n\t\t\t\t\t// Where there is no isDisabled, check manually\n\t\t\t\t\t/* jshint -W018 */\n\t\t\t\t\telem.isDisabled !== !disabled &&\n\t\t\t\t\tinDisabledFieldset( elem ) === disabled;\n\t\t\t}\n\n\t\t\treturn elem.disabled === disabled;\n\n\t\t// Try to winnow out elements that can't be disabled before trusting the disabled property.\n\t\t// Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n\t\t// even exist on them, let alone have a boolean value.\n\t\t} else if ( \"label\" in elem ) {\n\t\t\treturn elem.disabled === disabled;\n\t\t}\n\n\t\t// Remaining elements are neither :enabled nor :disabled\n\t\treturn false;\n\t};\n}\n\n/**\n * Returns a function to use in pseudos for positionals\n * @param {Function} fn\n */\nfunction createPositionalPseudo( fn ) {\n\treturn markFunction( function( argument ) {\n\t\targument = +argument;\n\t\treturn markFunction( function( seed, matches ) {\n\t\t\tvar j,\n\t\t\t\tmatchIndexes = fn( [], seed.length, argument ),\n\t\t\t\ti = matchIndexes.length;\n\n\t\t\t// Match elements found at the specified indexes\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( seed[ ( j = matchIndexes[ i ] ) ] ) {\n\t\t\t\t\tseed[ j ] = !( matches[ j ] = seed[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n}\n\n/**\n * Checks a node for validity as a Sizzle context\n * @param {Element|Object=} context\n * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n */\nfunction testContext( context ) {\n\treturn context && typeof context.getElementsByTagName !== \"undefined\" && context;\n}\n\n// Expose support vars for convenience\nsupport = Sizzle.support = {};\n\n/**\n * Detects XML nodes\n * @param {Element|Object} elem An element or a document\n * @returns {Boolean} True iff elem is a non-HTML XML node\n */\nisXML = Sizzle.isXML = function( elem ) {\n\tvar namespace = elem && elem.namespaceURI,\n\t\tdocElem = elem && ( elem.ownerDocument || elem ).documentElement;\n\n\t// Support: IE <=8\n\t// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes\n\t// https://bugs.jquery.com/ticket/4833\n\treturn !rhtml.test( namespace || docElem && docElem.nodeName || \"HTML\" );\n};\n\n/**\n * Sets document-related variables once based on the current document\n * @param {Element|Object} [doc] An element or document object to use to set the document\n * @returns {Object} Returns the current document\n */\nsetDocument = Sizzle.setDocument = function( node ) {\n\tvar hasCompare, subWindow,\n\t\tdoc = node ? node.ownerDocument || node : preferredDoc;\n\n\t// Return early if doc is invalid or already selected\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {\n\t\treturn document;\n\t}\n\n\t// Update global variables\n\tdocument = doc;\n\tdocElem = document.documentElement;\n\tdocumentIsHTML = !isXML( document );\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+\n\t// Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( preferredDoc != document &&\n\t\t( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {\n\n\t\t// Support: IE 11, Edge\n\t\tif ( subWindow.addEventListener ) {\n\t\t\tsubWindow.addEventListener( \"unload\", unloadHandler, false );\n\n\t\t// Support: IE 9 - 10 only\n\t\t} else if ( subWindow.attachEvent ) {\n\t\t\tsubWindow.attachEvent( \"onunload\", unloadHandler );\n\t\t}\n\t}\n\n\t// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,\n\t// Safari 4 - 5 only, Opera <=11.6 - 12.x only\n\t// IE/Edge & older browsers don't support the :scope pseudo-class.\n\t// Support: Safari 6.0 only\n\t// Safari 6.0 supports :scope but it's an alias of :root there.\n\tsupport.scope = assert( function( el ) {\n\t\tdocElem.appendChild( el ).appendChild( document.createElement( \"div\" ) );\n\t\treturn typeof el.querySelectorAll !== \"undefined\" &&\n\t\t\t!el.querySelectorAll( \":scope fieldset div\" ).length;\n\t} );\n\n\t// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+\n\t// Make sure the the `:has()` argument is parsed unforgivingly.\n\t// We include `*` in the test to detect buggy implementations that are\n\t// _selectively_ forgiving (specifically when the list includes at least\n\t// one valid selector).\n\t// Note that we treat complete lack of support for `:has()` as if it were\n\t// spec-compliant support, which is fine because use of `:has()` in such\n\t// environments will fail in the qSA path and fall back to jQuery traversal\n\t// anyway.\n\tsupport.cssHas = assert( function() {\n\t\ttry {\n\t\t\tdocument.querySelector( \":has(*,:jqfake)\" );\n\t\t\treturn false;\n\t\t} catch ( e ) {\n\t\t\treturn true;\n\t\t}\n\t} );\n\n\t/* Attributes\n\t---------------------------------------------------------------------- */\n\n\t// Support: IE<8\n\t// Verify that getAttribute really returns attributes and not properties\n\t// (excepting IE8 booleans)\n\tsupport.attributes = assert( function( el ) {\n\t\tel.className = \"i\";\n\t\treturn !el.getAttribute( \"className\" );\n\t} );\n\n\t/* getElement(s)By*\n\t---------------------------------------------------------------------- */\n\n\t// Check if getElementsByTagName(\"*\") returns only elements\n\tsupport.getElementsByTagName = assert( function( el ) {\n\t\tel.appendChild( document.createComment( \"\" ) );\n\t\treturn !el.getElementsByTagName( \"*\" ).length;\n\t} );\n\n\t// Support: IE<9\n\tsupport.getElementsByClassName = rnative.test( document.getElementsByClassName );\n\n\t// Support: IE<10\n\t// Check if getElementById returns elements by name\n\t// The broken getElementById methods don't pick up programmatically-set names,\n\t// so use a roundabout getElementsByName test\n\tsupport.getById = assert( function( el ) {\n\t\tdocElem.appendChild( el ).id = expando;\n\t\treturn !document.getElementsByName || !document.getElementsByName( expando ).length;\n\t} );\n\n\t// ID filter and find\n\tif ( support.getById ) {\n\t\tExpr.filter[ \"ID\" ] = function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn elem.getAttribute( \"id\" ) === attrId;\n\t\t\t};\n\t\t};\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar elem = context.getElementById( id );\n\t\t\t\treturn elem ? [ elem ] : [];\n\t\t\t}\n\t\t};\n\t} else {\n\t\tExpr.filter[ \"ID\" ] =  function( id ) {\n\t\t\tvar attrId = id.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\tvar node = typeof elem.getAttributeNode !== \"undefined\" &&\n\t\t\t\t\telem.getAttributeNode( \"id\" );\n\t\t\t\treturn node && node.value === attrId;\n\t\t\t};\n\t\t};\n\n\t\t// Support: IE 6 - 7 only\n\t\t// getElementById is not reliable as a find shortcut\n\t\tExpr.find[ \"ID\" ] = function( id, context ) {\n\t\t\tif ( typeof context.getElementById !== \"undefined\" && documentIsHTML ) {\n\t\t\t\tvar node, i, elems,\n\t\t\t\t\telem = context.getElementById( id );\n\n\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t// Verify the id attribute\n\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t}\n\n\t\t\t\t\t// Fall back on getElementsByName\n\t\t\t\t\telems = context.getElementsByName( id );\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile ( ( elem = elems[ i++ ] ) ) {\n\t\t\t\t\t\tnode = elem.getAttributeNode( \"id\" );\n\t\t\t\t\t\tif ( node && node.value === id ) {\n\t\t\t\t\t\t\treturn [ elem ];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn [];\n\t\t\t}\n\t\t};\n\t}\n\n\t// Tag\n\tExpr.find[ \"TAG\" ] = support.getElementsByTagName ?\n\t\tfunction( tag, context ) {\n\t\t\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\t\t\treturn context.getElementsByTagName( tag );\n\n\t\t\t// DocumentFragment nodes don't have gEBTN\n\t\t\t} else if ( support.qsa ) {\n\t\t\t\treturn context.querySelectorAll( tag );\n\t\t\t}\n\t\t} :\n\n\t\tfunction( tag, context ) {\n\t\t\tvar elem,\n\t\t\t\ttmp = [],\n\t\t\t\ti = 0,\n\n\t\t\t\t// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n\t\t\t\tresults = context.getElementsByTagName( tag );\n\n\t\t\t// Filter out possible comments\n\t\t\tif ( tag === \"*\" ) {\n\t\t\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\ttmp.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn tmp;\n\t\t\t}\n\t\t\treturn results;\n\t\t};\n\n\t// Class\n\tExpr.find[ \"CLASS\" ] = support.getElementsByClassName && function( className, context ) {\n\t\tif ( typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML ) {\n\t\t\treturn context.getElementsByClassName( className );\n\t\t}\n\t};\n\n\t/* QSA/matchesSelector\n\t---------------------------------------------------------------------- */\n\n\t// QSA and matchesSelector support\n\n\t// matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\trbuggyMatches = [];\n\n\t// qSa(:focus) reports false when true (Chrome 21)\n\t// We allow this because of a bug in IE8/9 that throws an error\n\t// whenever `document.activeElement` is accessed on an iframe\n\t// So, we allow :focus to pass through QSA all the time to avoid the IE error\n\t// See https://bugs.jquery.com/ticket/13378\n\trbuggyQSA = [];\n\n\tif ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {\n\n\t\t// Build QSA regex\n\t\t// Regex strategy adopted from Diego Perini\n\t\tassert( function( el ) {\n\n\t\t\tvar input;\n\n\t\t\t// Select is set to empty string on purpose\n\t\t\t// This is to test IE's treatment of not explicitly\n\t\t\t// setting a boolean content attribute,\n\t\t\t// since its presence should be enough\n\t\t\t// https://bugs.jquery.com/ticket/12359\n\t\t\tdocElem.appendChild( el ).innerHTML = \"<a id='\" + expando + \"'></a>\" +\n\t\t\t\t\"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" +\n\t\t\t\t\"<option selected=''></option></select>\";\n\n\t\t\t// Support: IE8, Opera 11-12.16\n\t\t\t// Nothing should be selected when empty strings follow ^= or $= or *=\n\t\t\t// The test attribute must be unknown in Opera but \"safe\" for WinRT\n\t\t\t// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\t\t\tif ( el.querySelectorAll( \"[msallowcapture^='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Support: IE8\n\t\t\t// Boolean attributes and \"value\" are not treated correctly\n\t\t\tif ( !el.querySelectorAll( \"[selected]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\" );\n\t\t\t}\n\n\t\t\t// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\t\t\tif ( !el.querySelectorAll( \"[id~=\" + expando + \"-]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"~=\" );\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 15 - 18+\n\t\t\t// IE 11/Edge don't find elements on a `[name='']` query in some cases.\n\t\t\t// Adding a temporary attribute to the document before the selection works\n\t\t\t// around the issue.\n\t\t\t// Interestingly, IE 10 & older don't seem to have the issue.\n\t\t\tinput = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"name\", \"\" );\n\t\t\tel.appendChild( input );\n\t\t\tif ( !el.querySelectorAll( \"[name='']\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"\\\\[\" + whitespace + \"*name\" + whitespace + \"*=\" +\n\t\t\t\t\twhitespace + \"*(?:''|\\\"\\\")\" );\n\t\t\t}\n\n\t\t\t// Webkit/Opera - :checked should return selected option elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( !el.querySelectorAll( \":checked\" ).length ) {\n\t\t\t\trbuggyQSA.push( \":checked\" );\n\t\t\t}\n\n\t\t\t// Support: Safari 8+, iOS 8+\n\t\t\t// https://bugs.webkit.org/show_bug.cgi?id=136851\n\t\t\t// In-page `selector#id sibling-combinator selector` fails\n\t\t\tif ( !el.querySelectorAll( \"a#\" + expando + \"+*\" ).length ) {\n\t\t\t\trbuggyQSA.push( \".#.+[+~]\" );\n\t\t\t}\n\n\t\t\t// Support: Firefox <=3.6 - 5 only\n\t\t\t// Old Firefox doesn't throw on a badly-escaped identifier.\n\t\t\tel.querySelectorAll( \"\\\\\\f\" );\n\t\t\trbuggyQSA.push( \"[\\\\r\\\\n\\\\f]\" );\n\t\t} );\n\n\t\tassert( function( el ) {\n\t\t\tel.innerHTML = \"<a href='' disabled='disabled'></a>\" +\n\t\t\t\t\"<select disabled='disabled'><option/></select>\";\n\n\t\t\t// Support: Windows 8 Native Apps\n\t\t\t// The type and name attributes are restricted during .innerHTML assignment\n\t\t\tvar input = document.createElement( \"input\" );\n\t\t\tinput.setAttribute( \"type\", \"hidden\" );\n\t\t\tel.appendChild( input ).setAttribute( \"name\", \"D\" );\n\n\t\t\t// Support: IE8\n\t\t\t// Enforce case-sensitivity of name attribute\n\t\t\tif ( el.querySelectorAll( \"[name=d]\" ).length ) {\n\t\t\t\trbuggyQSA.push( \"name\" + whitespace + \"*[*^$|!~]?=\" );\n\t\t\t}\n\n\t\t\t// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n\t\t\t// IE8 throws error here and will not see later tests\n\t\t\tif ( el.querySelectorAll( \":enabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: IE9-11+\n\t\t\t// IE's :disabled selector does not pick up the children of disabled fieldsets\n\t\t\tdocElem.appendChild( el ).disabled = true;\n\t\t\tif ( el.querySelectorAll( \":disabled\" ).length !== 2 ) {\n\t\t\t\trbuggyQSA.push( \":enabled\", \":disabled\" );\n\t\t\t}\n\n\t\t\t// Support: Opera 10 - 11 only\n\t\t\t// Opera 10-11 does not throw on post-comma invalid pseudos\n\t\t\tel.querySelectorAll( \"*,:x\" );\n\t\t\trbuggyQSA.push( \",.*:\" );\n\t\t} );\n\t}\n\n\tif ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||\n\t\tdocElem.webkitMatchesSelector ||\n\t\tdocElem.mozMatchesSelector ||\n\t\tdocElem.oMatchesSelector ||\n\t\tdocElem.msMatchesSelector ) ) ) ) {\n\n\t\tassert( function( el ) {\n\n\t\t\t// Check to see if it's possible to do matchesSelector\n\t\t\t// on a disconnected node (IE 9)\n\t\t\tsupport.disconnectedMatch = matches.call( el, \"*\" );\n\n\t\t\t// This should fail with an exception\n\t\t\t// Gecko does not error, returns false instead\n\t\t\tmatches.call( el, \"[s!='']:x\" );\n\t\t\trbuggyMatches.push( \"!=\", pseudos );\n\t\t} );\n\t}\n\n\tif ( !support.cssHas ) {\n\n\t\t// Support: Chrome 105 - 110+, Safari 15.4 - 16.3+\n\t\t// Our regular `try-catch` mechanism fails to detect natively-unsupported\n\t\t// pseudo-classes inside `:has()` (such as `:has(:contains(\"Foo\"))`)\n\t\t// in browsers that parse the `:has()` argument as a forgiving selector list.\n\t\t// https://drafts.csswg.org/selectors/#relational now requires the argument\n\t\t// to be parsed unforgivingly, but browsers have not yet fully adjusted.\n\t\trbuggyQSA.push( \":has\" );\n\t}\n\n\trbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( \"|\" ) );\n\trbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( \"|\" ) );\n\n\t/* Contains\n\t---------------------------------------------------------------------- */\n\thasCompare = rnative.test( docElem.compareDocumentPosition );\n\n\t// Element contains another\n\t// Purposefully self-exclusive\n\t// As in, an element does not contain itself\n\tcontains = hasCompare || rnative.test( docElem.contains ) ?\n\t\tfunction( a, b ) {\n\n\t\t\t// Support: IE <9 only\n\t\t\t// IE doesn't have `contains` on `document` so we need to check for\n\t\t\t// `documentElement` presence.\n\t\t\t// We need to fall back to `a` when `documentElement` is missing\n\t\t\t// as `ownerDocument` of elements within `<template/>` may have\n\t\t\t// a null one - a default behavior of all modern browsers.\n\t\t\tvar adown = a.nodeType === 9 && a.documentElement || a,\n\t\t\t\tbup = b && b.parentNode;\n\t\t\treturn a === bup || !!( bup && bup.nodeType === 1 && (\n\t\t\t\tadown.contains ?\n\t\t\t\t\tadown.contains( bup ) :\n\t\t\t\t\ta.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16\n\t\t\t) );\n\t\t} :\n\t\tfunction( a, b ) {\n\t\t\tif ( b ) {\n\t\t\t\twhile ( ( b = b.parentNode ) ) {\n\t\t\t\t\tif ( b === a ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t/* Sorting\n\t---------------------------------------------------------------------- */\n\n\t// Document order sorting\n\tsortOrder = hasCompare ?\n\tfunction( a, b ) {\n\n\t\t// Flag for duplicate removal\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\t// Sort on method existence if only one input has compareDocumentPosition\n\t\tvar compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\t\tif ( compare ) {\n\t\t\treturn compare;\n\t\t}\n\n\t\t// Calculate position if both inputs belong to the same document\n\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t// two documents; shallow comparisons work.\n\t\t// eslint-disable-next-line eqeqeq\n\t\tcompare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?\n\t\t\ta.compareDocumentPosition( b ) :\n\n\t\t\t// Otherwise we know they are disconnected\n\t\t\t1;\n\n\t\t// Disconnected nodes\n\t\tif ( compare & 1 ||\n\t\t\t( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {\n\n\t\t\t// Choose the first element that is related to our preferred document\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( a == document || a.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, a ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\tif ( b == document || b.ownerDocument == preferredDoc &&\n\t\t\t\tcontains( preferredDoc, b ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\t// Maintain original order\n\t\t\treturn sortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\t\t}\n\n\t\treturn compare & 4 ? -1 : 1;\n\t} :\n\tfunction( a, b ) {\n\n\t\t// Exit early if the nodes are identical\n\t\tif ( a === b ) {\n\t\t\thasDuplicate = true;\n\t\t\treturn 0;\n\t\t}\n\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\taup = a.parentNode,\n\t\t\tbup = b.parentNode,\n\t\t\tap = [ a ],\n\t\t\tbp = [ b ];\n\n\t\t// Parentless nodes are either documents or disconnected\n\t\tif ( !aup || !bup ) {\n\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\treturn a == document ? -1 :\n\t\t\t\tb == document ? 1 :\n\t\t\t\t/* eslint-enable eqeqeq */\n\t\t\t\taup ? -1 :\n\t\t\t\tbup ? 1 :\n\t\t\t\tsortInput ?\n\t\t\t\t( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :\n\t\t\t\t0;\n\n\t\t// If the nodes are siblings, we can do a quick check\n\t\t} else if ( aup === bup ) {\n\t\t\treturn siblingCheck( a, b );\n\t\t}\n\n\t\t// Otherwise we need full lists of their ancestors for comparison\n\t\tcur = a;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tap.unshift( cur );\n\t\t}\n\t\tcur = b;\n\t\twhile ( ( cur = cur.parentNode ) ) {\n\t\t\tbp.unshift( cur );\n\t\t}\n\n\t\t// Walk down the tree looking for a discrepancy\n\t\twhile ( ap[ i ] === bp[ i ] ) {\n\t\t\ti++;\n\t\t}\n\n\t\treturn i ?\n\n\t\t\t// Do a sibling check if the nodes have a common ancestor\n\t\t\tsiblingCheck( ap[ i ], bp[ i ] ) :\n\n\t\t\t// Otherwise nodes in our document sort first\n\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t// two documents; shallow comparisons work.\n\t\t\t/* eslint-disable eqeqeq */\n\t\t\tap[ i ] == preferredDoc ? -1 :\n\t\t\tbp[ i ] == preferredDoc ? 1 :\n\t\t\t/* eslint-enable eqeqeq */\n\t\t\t0;\n\t};\n\n\treturn document;\n};\n\nSizzle.matches = function( expr, elements ) {\n\treturn Sizzle( expr, null, null, elements );\n};\n\nSizzle.matchesSelector = function( elem, expr ) {\n\tsetDocument( elem );\n\n\tif ( support.matchesSelector && documentIsHTML &&\n\t\t!nonnativeSelectorCache[ expr + \" \" ] &&\n\t\t( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&\n\t\t( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {\n\n\t\ttry {\n\t\t\tvar ret = matches.call( elem, expr );\n\n\t\t\t// IE 9's matchesSelector returns false on disconnected nodes\n\t\t\tif ( ret || support.disconnectedMatch ||\n\n\t\t\t\t// As well, disconnected nodes are said to be in a document\n\t\t\t\t// fragment in IE 9\n\t\t\t\telem.document && elem.document.nodeType !== 11 ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\t\t} catch ( e ) {\n\t\t\tnonnativeSelectorCache( expr, true );\n\t\t}\n\t}\n\n\treturn Sizzle( expr, document, null, [ elem ] ).length > 0;\n};\n\nSizzle.contains = function( context, elem ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( context.ownerDocument || context ) != document ) {\n\t\tsetDocument( context );\n\t}\n\treturn contains( context, elem );\n};\n\nSizzle.attr = function( elem, name ) {\n\n\t// Set document vars if needed\n\t// Support: IE 11+, Edge 17 - 18+\n\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t// two documents; shallow comparisons work.\n\t// eslint-disable-next-line eqeqeq\n\tif ( ( elem.ownerDocument || elem ) != document ) {\n\t\tsetDocument( elem );\n\t}\n\n\tvar fn = Expr.attrHandle[ name.toLowerCase() ],\n\n\t\t// Don't get fooled by Object.prototype properties (jQuery #13807)\n\t\tval = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?\n\t\t\tfn( elem, name, !documentIsHTML ) :\n\t\t\tundefined;\n\n\treturn val !== undefined ?\n\t\tval :\n\t\tsupport.attributes || !documentIsHTML ?\n\t\t\telem.getAttribute( name ) :\n\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\tval.value :\n\t\t\t\tnull;\n};\n\nSizzle.escape = function( sel ) {\n\treturn ( sel + \"\" ).replace( rcssescape, fcssescape );\n};\n\nSizzle.error = function( msg ) {\n\tthrow new Error( \"Syntax error, unrecognized expression: \" + msg );\n};\n\n/**\n * Document sorting and removing duplicates\n * @param {ArrayLike} results\n */\nSizzle.uniqueSort = function( results ) {\n\tvar elem,\n\t\tduplicates = [],\n\t\tj = 0,\n\t\ti = 0;\n\n\t// Unless we *know* we can detect duplicates, assume their presence\n\thasDuplicate = !support.detectDuplicates;\n\tsortInput = !support.sortStable && results.slice( 0 );\n\tresults.sort( sortOrder );\n\n\tif ( hasDuplicate ) {\n\t\twhile ( ( elem = results[ i++ ] ) ) {\n\t\t\tif ( elem === results[ i ] ) {\n\t\t\t\tj = duplicates.push( i );\n\t\t\t}\n\t\t}\n\t\twhile ( j-- ) {\n\t\t\tresults.splice( duplicates[ j ], 1 );\n\t\t}\n\t}\n\n\t// Clear input after sorting to release objects\n\t// See https://github.com/jquery/sizzle/pull/225\n\tsortInput = null;\n\n\treturn results;\n};\n\n/**\n * Utility function for retrieving the text value of an array of DOM nodes\n * @param {Array|Element} elem\n */\ngetText = Sizzle.getText = function( elem ) {\n\tvar node,\n\t\tret = \"\",\n\t\ti = 0,\n\t\tnodeType = elem.nodeType;\n\n\tif ( !nodeType ) {\n\n\t\t// If no nodeType, this is expected to be an array\n\t\twhile ( ( node = elem[ i++ ] ) ) {\n\n\t\t\t// Do not traverse comment nodes\n\t\t\tret += getText( node );\n\t\t}\n\t} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {\n\n\t\t// Use textContent for elements\n\t\t// innerText usage removed for consistency of new lines (jQuery #11153)\n\t\tif ( typeof elem.textContent === \"string\" ) {\n\t\t\treturn elem.textContent;\n\t\t} else {\n\n\t\t\t// Traverse its children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tret += getText( elem );\n\t\t\t}\n\t\t}\n\t} else if ( nodeType === 3 || nodeType === 4 ) {\n\t\treturn elem.nodeValue;\n\t}\n\n\t// Do not include comment or processing instruction nodes\n\n\treturn ret;\n};\n\nExpr = Sizzle.selectors = {\n\n\t// Can be adjusted by the user\n\tcacheLength: 50,\n\n\tcreatePseudo: markFunction,\n\n\tmatch: matchExpr,\n\n\tattrHandle: {},\n\n\tfind: {},\n\n\trelative: {\n\t\t\">\": { dir: \"parentNode\", first: true },\n\t\t\" \": { dir: \"parentNode\" },\n\t\t\"+\": { dir: \"previousSibling\", first: true },\n\t\t\"~\": { dir: \"previousSibling\" }\n\t},\n\n\tpreFilter: {\n\t\t\"ATTR\": function( match ) {\n\t\t\tmatch[ 1 ] = match[ 1 ].replace( runescape, funescape );\n\n\t\t\t// Move the given value to match[3] whether quoted or unquoted\n\t\t\tmatch[ 3 ] = ( match[ 3 ] || match[ 4 ] ||\n\t\t\t\tmatch[ 5 ] || \"\" ).replace( runescape, funescape );\n\n\t\t\tif ( match[ 2 ] === \"~=\" ) {\n\t\t\t\tmatch[ 3 ] = \" \" + match[ 3 ] + \" \";\n\t\t\t}\n\n\t\t\treturn match.slice( 0, 4 );\n\t\t},\n\n\t\t\"CHILD\": function( match ) {\n\n\t\t\t/* matches from matchExpr[\"CHILD\"]\n\t\t\t\t1 type (only|nth|...)\n\t\t\t\t2 what (child|of-type)\n\t\t\t\t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n\t\t\t\t4 xn-component of xn+y argument ([+-]?\\d*n|)\n\t\t\t\t5 sign of xn-component\n\t\t\t\t6 x of xn-component\n\t\t\t\t7 sign of y-component\n\t\t\t\t8 y of y-component\n\t\t\t*/\n\t\t\tmatch[ 1 ] = match[ 1 ].toLowerCase();\n\n\t\t\tif ( match[ 1 ].slice( 0, 3 ) === \"nth\" ) {\n\n\t\t\t\t// nth-* requires argument\n\t\t\t\tif ( !match[ 3 ] ) {\n\t\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t\t}\n\n\t\t\t\t// numeric x and y parameters for Expr.filter.CHILD\n\t\t\t\t// remember that false/true cast respectively to 0/1\n\t\t\t\tmatch[ 4 ] = +( match[ 4 ] ?\n\t\t\t\t\tmatch[ 5 ] + ( match[ 6 ] || 1 ) :\n\t\t\t\t\t2 * ( match[ 3 ] === \"even\" || match[ 3 ] === \"odd\" ) );\n\t\t\t\tmatch[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === \"odd\" );\n\n\t\t\t\t// other types prohibit arguments\n\t\t\t} else if ( match[ 3 ] ) {\n\t\t\t\tSizzle.error( match[ 0 ] );\n\t\t\t}\n\n\t\t\treturn match;\n\t\t},\n\n\t\t\"PSEUDO\": function( match ) {\n\t\t\tvar excess,\n\t\t\t\tunquoted = !match[ 6 ] && match[ 2 ];\n\n\t\t\tif ( matchExpr[ \"CHILD\" ].test( match[ 0 ] ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// Accept quoted arguments as-is\n\t\t\tif ( match[ 3 ] ) {\n\t\t\t\tmatch[ 2 ] = match[ 4 ] || match[ 5 ] || \"\";\n\n\t\t\t// Strip excess characters from unquoted arguments\n\t\t\t} else if ( unquoted && rpseudo.test( unquoted ) &&\n\n\t\t\t\t// Get excess from tokenize (recursively)\n\t\t\t\t( excess = tokenize( unquoted, true ) ) &&\n\n\t\t\t\t// advance to the next closing parenthesis\n\t\t\t\t( excess = unquoted.indexOf( \")\", unquoted.length - excess ) - unquoted.length ) ) {\n\n\t\t\t\t// excess is a negative index\n\t\t\t\tmatch[ 0 ] = match[ 0 ].slice( 0, excess );\n\t\t\t\tmatch[ 2 ] = unquoted.slice( 0, excess );\n\t\t\t}\n\n\t\t\t// Return only captures needed by the pseudo filter method (type and argument)\n\t\t\treturn match.slice( 0, 3 );\n\t\t}\n\t},\n\n\tfilter: {\n\n\t\t\"TAG\": function( nodeNameSelector ) {\n\t\t\tvar nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn nodeNameSelector === \"*\" ?\n\t\t\t\tfunction() {\n\t\t\t\t\treturn true;\n\t\t\t\t} :\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n\t\t\t\t};\n\t\t},\n\n\t\t\"CLASS\": function( className ) {\n\t\t\tvar pattern = classCache[ className + \" \" ];\n\n\t\t\treturn pattern ||\n\t\t\t\t( pattern = new RegExp( \"(^|\" + whitespace +\n\t\t\t\t\t\")\" + className + \"(\" + whitespace + \"|$)\" ) ) && classCache(\n\t\t\t\t\t\tclassName, function( elem ) {\n\t\t\t\t\t\t\treturn pattern.test(\n\t\t\t\t\t\t\t\ttypeof elem.className === \"string\" && elem.className ||\n\t\t\t\t\t\t\t\ttypeof elem.getAttribute !== \"undefined\" &&\n\t\t\t\t\t\t\t\t\telem.getAttribute( \"class\" ) ||\n\t\t\t\t\t\t\t\t\"\"\n\t\t\t\t\t\t\t);\n\t\t\t\t} );\n\t\t},\n\n\t\t\"ATTR\": function( name, operator, check ) {\n\t\t\treturn function( elem ) {\n\t\t\t\tvar result = Sizzle.attr( elem, name );\n\n\t\t\t\tif ( result == null ) {\n\t\t\t\t\treturn operator === \"!=\";\n\t\t\t\t}\n\t\t\t\tif ( !operator ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tresult += \"\";\n\n\t\t\t\t/* eslint-disable max-len */\n\n\t\t\t\treturn operator === \"=\" ? result === check :\n\t\t\t\t\toperator === \"!=\" ? result !== check :\n\t\t\t\t\toperator === \"^=\" ? check && result.indexOf( check ) === 0 :\n\t\t\t\t\toperator === \"*=\" ? check && result.indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"$=\" ? check && result.slice( -check.length ) === check :\n\t\t\t\t\toperator === \"~=\" ? ( \" \" + result.replace( rwhitespace, \" \" ) + \" \" ).indexOf( check ) > -1 :\n\t\t\t\t\toperator === \"|=\" ? result === check || result.slice( 0, check.length + 1 ) === check + \"-\" :\n\t\t\t\t\tfalse;\n\t\t\t\t/* eslint-enable max-len */\n\n\t\t\t};\n\t\t},\n\n\t\t\"CHILD\": function( type, what, _argument, first, last ) {\n\t\t\tvar simple = type.slice( 0, 3 ) !== \"nth\",\n\t\t\t\tforward = type.slice( -4 ) !== \"last\",\n\t\t\t\tofType = what === \"of-type\";\n\n\t\t\treturn first === 1 && last === 0 ?\n\n\t\t\t\t// Shortcut for :nth-*(n)\n\t\t\t\tfunction( elem ) {\n\t\t\t\t\treturn !!elem.parentNode;\n\t\t\t\t} :\n\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tvar cache, uniqueCache, outerCache, node, nodeIndex, start,\n\t\t\t\t\t\tdir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n\t\t\t\t\t\tparent = elem.parentNode,\n\t\t\t\t\t\tname = ofType && elem.nodeName.toLowerCase(),\n\t\t\t\t\t\tuseCache = !xml && !ofType,\n\t\t\t\t\t\tdiff = false;\n\n\t\t\t\t\tif ( parent ) {\n\n\t\t\t\t\t\t// :(first|last|only)-(child|of-type)\n\t\t\t\t\t\tif ( simple ) {\n\t\t\t\t\t\t\twhile ( dir ) {\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\twhile ( ( node = node[ dir ] ) ) {\n\t\t\t\t\t\t\t\t\tif ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) {\n\n\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse direction for :only-* (if we haven't yet done so)\n\t\t\t\t\t\t\t\tstart = dir = type === \"only\" && !start && \"nextSibling\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tstart = [ forward ? parent.firstChild : parent.lastChild ];\n\n\t\t\t\t\t\t// non-xml :nth-child(...) stores cache data on `parent`\n\t\t\t\t\t\tif ( forward && useCache ) {\n\n\t\t\t\t\t\t\t// Seek `elem` from a previously-cached index\n\n\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\tnode = parent;\n\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\tdiff = nodeIndex && cache[ 2 ];\n\t\t\t\t\t\t\tnode = nodeIndex && parent.childNodes[ nodeIndex ];\n\n\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\n\t\t\t\t\t\t\t\t// Fallback to seeking `elem` from the start\n\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t// When found, cache indexes on `parent` and break\n\t\t\t\t\t\t\t\tif ( node.nodeType === 1 && ++diff && node === elem ) {\n\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, nodeIndex, diff ];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Use previously-cached element index if available\n\t\t\t\t\t\t\tif ( useCache ) {\n\n\t\t\t\t\t\t\t\t// ...in a gzip-friendly way\n\t\t\t\t\t\t\t\tnode = elem;\n\t\t\t\t\t\t\t\touterCache = node[ expando ] || ( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\tcache = uniqueCache[ type ] || [];\n\t\t\t\t\t\t\t\tnodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];\n\t\t\t\t\t\t\t\tdiff = nodeIndex;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// xml :nth-child(...)\n\t\t\t\t\t\t\t// or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\t\t\t\t\t\t\tif ( diff === false ) {\n\n\t\t\t\t\t\t\t\t// Use the same loop as above to seek `elem` from the start\n\t\t\t\t\t\t\t\twhile ( ( node = ++nodeIndex && node && node[ dir ] ||\n\t\t\t\t\t\t\t\t\t( diff = nodeIndex = 0 ) || start.pop() ) ) {\n\n\t\t\t\t\t\t\t\t\tif ( ( ofType ?\n\t\t\t\t\t\t\t\t\t\tnode.nodeName.toLowerCase() === name :\n\t\t\t\t\t\t\t\t\t\tnode.nodeType === 1 ) &&\n\t\t\t\t\t\t\t\t\t\t++diff ) {\n\n\t\t\t\t\t\t\t\t\t\t// Cache the index of each encountered element\n\t\t\t\t\t\t\t\t\t\tif ( useCache ) {\n\t\t\t\t\t\t\t\t\t\t\touterCache = node[ expando ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( node[ expando ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache = outerCache[ node.uniqueID ] ||\n\t\t\t\t\t\t\t\t\t\t\t\t( outerCache[ node.uniqueID ] = {} );\n\n\t\t\t\t\t\t\t\t\t\t\tuniqueCache[ type ] = [ dirruns, diff ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( node === elem ) {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Incorporate the offset, then check against cycle size\n\t\t\t\t\t\tdiff -= last;\n\t\t\t\t\t\treturn diff === first || ( diff % first === 0 && diff / first >= 0 );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t},\n\n\t\t\"PSEUDO\": function( pseudo, argument ) {\n\n\t\t\t// pseudo-class names are case-insensitive\n\t\t\t// http://www.w3.org/TR/selectors/#pseudo-classes\n\t\t\t// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n\t\t\t// Remember that setFilters inherits from pseudos\n\t\t\tvar args,\n\t\t\t\tfn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||\n\t\t\t\t\tSizzle.error( \"unsupported pseudo: \" + pseudo );\n\n\t\t\t// The user may use createPseudo to indicate that\n\t\t\t// arguments are needed to create the filter function\n\t\t\t// just as Sizzle does\n\t\t\tif ( fn[ expando ] ) {\n\t\t\t\treturn fn( argument );\n\t\t\t}\n\n\t\t\t// But maintain support for old signatures\n\t\t\tif ( fn.length > 1 ) {\n\t\t\t\targs = [ pseudo, pseudo, \"\", argument ];\n\t\t\t\treturn Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?\n\t\t\t\t\tmarkFunction( function( seed, matches ) {\n\t\t\t\t\t\tvar idx,\n\t\t\t\t\t\t\tmatched = fn( seed, argument ),\n\t\t\t\t\t\t\ti = matched.length;\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tidx = indexOf( seed, matched[ i ] );\n\t\t\t\t\t\t\tseed[ idx ] = !( matches[ idx ] = matched[ i ] );\n\t\t\t\t\t\t}\n\t\t\t\t\t} ) :\n\t\t\t\t\tfunction( elem ) {\n\t\t\t\t\t\treturn fn( elem, 0, args );\n\t\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn fn;\n\t\t}\n\t},\n\n\tpseudos: {\n\n\t\t// Potentially complex pseudos\n\t\t\"not\": markFunction( function( selector ) {\n\n\t\t\t// Trim the selector passed to compile\n\t\t\t// to avoid treating leading and trailing\n\t\t\t// spaces as combinators\n\t\t\tvar input = [],\n\t\t\t\tresults = [],\n\t\t\t\tmatcher = compile( selector.replace( rtrim, \"$1\" ) );\n\n\t\t\treturn matcher[ expando ] ?\n\t\t\t\tmarkFunction( function( seed, matches, _context, xml ) {\n\t\t\t\t\tvar elem,\n\t\t\t\t\t\tunmatched = matcher( seed, null, xml, [] ),\n\t\t\t\t\t\ti = seed.length;\n\n\t\t\t\t\t// Match elements unmatched by `matcher`\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\t\t\t\t\tseed[ i ] = !( matches[ i ] = elem );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} ) :\n\t\t\t\tfunction( elem, _context, xml ) {\n\t\t\t\t\tinput[ 0 ] = elem;\n\t\t\t\t\tmatcher( input, null, xml, results );\n\n\t\t\t\t\t// Don't keep the element (issue #299)\n\t\t\t\t\tinput[ 0 ] = null;\n\t\t\t\t\treturn !results.pop();\n\t\t\t\t};\n\t\t} ),\n\n\t\t\"has\": markFunction( function( selector ) {\n\t\t\treturn function( elem ) {\n\t\t\t\treturn Sizzle( selector, elem ).length > 0;\n\t\t\t};\n\t\t} ),\n\n\t\t\"contains\": markFunction( function( text ) {\n\t\t\ttext = text.replace( runescape, funescape );\n\t\t\treturn function( elem ) {\n\t\t\t\treturn ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;\n\t\t\t};\n\t\t} ),\n\n\t\t// \"Whether an element is represented by a :lang() selector\n\t\t// is based solely on the element's language value\n\t\t// being equal to the identifier C,\n\t\t// or beginning with the identifier C immediately followed by \"-\".\n\t\t// The matching of C against the element's language value is performed case-insensitively.\n\t\t// The identifier C does not have to be a valid language name.\"\n\t\t// http://www.w3.org/TR/selectors/#lang-pseudo\n\t\t\"lang\": markFunction( function( lang ) {\n\n\t\t\t// lang value must be a valid identifier\n\t\t\tif ( !ridentifier.test( lang || \"\" ) ) {\n\t\t\t\tSizzle.error( \"unsupported lang: \" + lang );\n\t\t\t}\n\t\t\tlang = lang.replace( runescape, funescape ).toLowerCase();\n\t\t\treturn function( elem ) {\n\t\t\t\tvar elemLang;\n\t\t\t\tdo {\n\t\t\t\t\tif ( ( elemLang = documentIsHTML ?\n\t\t\t\t\t\telem.lang :\n\t\t\t\t\t\telem.getAttribute( \"xml:lang\" ) || elem.getAttribute( \"lang\" ) ) ) {\n\n\t\t\t\t\t\telemLang = elemLang.toLowerCase();\n\t\t\t\t\t\treturn elemLang === lang || elemLang.indexOf( lang + \"-\" ) === 0;\n\t\t\t\t\t}\n\t\t\t\t} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );\n\t\t\t\treturn false;\n\t\t\t};\n\t\t} ),\n\n\t\t// Miscellaneous\n\t\t\"target\": function( elem ) {\n\t\t\tvar hash = window.location && window.location.hash;\n\t\t\treturn hash && hash.slice( 1 ) === elem.id;\n\t\t},\n\n\t\t\"root\": function( elem ) {\n\t\t\treturn elem === docElem;\n\t\t},\n\n\t\t\"focus\": function( elem ) {\n\t\t\treturn elem === document.activeElement &&\n\t\t\t\t( !document.hasFocus || document.hasFocus() ) &&\n\t\t\t\t!!( elem.type || elem.href || ~elem.tabIndex );\n\t\t},\n\n\t\t// Boolean properties\n\t\t\"enabled\": createDisabledPseudo( false ),\n\t\t\"disabled\": createDisabledPseudo( true ),\n\n\t\t\"checked\": function( elem ) {\n\n\t\t\t// In CSS3, :checked should return both checked and selected elements\n\t\t\t// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n\t\t\tvar nodeName = elem.nodeName.toLowerCase();\n\t\t\treturn ( nodeName === \"input\" && !!elem.checked ) ||\n\t\t\t\t( nodeName === \"option\" && !!elem.selected );\n\t\t},\n\n\t\t\"selected\": function( elem ) {\n\n\t\t\t// Accessing this property makes selected-by-default\n\t\t\t// options in Safari work properly\n\t\t\tif ( elem.parentNode ) {\n\t\t\t\t// eslint-disable-next-line no-unused-expressions\n\t\t\t\telem.parentNode.selectedIndex;\n\t\t\t}\n\n\t\t\treturn elem.selected === true;\n\t\t},\n\n\t\t// Contents\n\t\t\"empty\": function( elem ) {\n\n\t\t\t// http://www.w3.org/TR/selectors/#empty-pseudo\n\t\t\t// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n\t\t\t//   but not by others (comment: 8; processing instruction: 7; etc.)\n\t\t\t// nodeType < 6 works because attributes (2) do not appear as children\n\t\t\tfor ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {\n\t\t\t\tif ( elem.nodeType < 6 ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t},\n\n\t\t\"parent\": function( elem ) {\n\t\t\treturn !Expr.pseudos[ \"empty\" ]( elem );\n\t\t},\n\n\t\t// Element/input types\n\t\t\"header\": function( elem ) {\n\t\t\treturn rheader.test( elem.nodeName );\n\t\t},\n\n\t\t\"input\": function( elem ) {\n\t\t\treturn rinputs.test( elem.nodeName );\n\t\t},\n\n\t\t\"button\": function( elem ) {\n\t\t\tvar name = elem.nodeName.toLowerCase();\n\t\t\treturn name === \"input\" && elem.type === \"button\" || name === \"button\";\n\t\t},\n\n\t\t\"text\": function( elem ) {\n\t\t\tvar attr;\n\t\t\treturn elem.nodeName.toLowerCase() === \"input\" &&\n\t\t\t\telem.type === \"text\" &&\n\n\t\t\t\t// Support: IE <10 only\n\t\t\t\t// New HTML5 attribute values (e.g., \"search\") appear with elem.type === \"text\"\n\t\t\t\t( ( attr = elem.getAttribute( \"type\" ) ) == null ||\n\t\t\t\t\tattr.toLowerCase() === \"text\" );\n\t\t},\n\n\t\t// Position-in-collection\n\t\t\"first\": createPositionalPseudo( function() {\n\t\t\treturn [ 0 ];\n\t\t} ),\n\n\t\t\"last\": createPositionalPseudo( function( _matchIndexes, length ) {\n\t\t\treturn [ length - 1 ];\n\t\t} ),\n\n\t\t\"eq\": createPositionalPseudo( function( _matchIndexes, length, argument ) {\n\t\t\treturn [ argument < 0 ? argument + length : argument ];\n\t\t} ),\n\n\t\t\"even\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"odd\": createPositionalPseudo( function( matchIndexes, length ) {\n\t\t\tvar i = 1;\n\t\t\tfor ( ; i < length; i += 2 ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"lt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ?\n\t\t\t\targument + length :\n\t\t\t\targument > length ?\n\t\t\t\t\tlength :\n\t\t\t\t\targument;\n\t\t\tfor ( ; --i >= 0; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} ),\n\n\t\t\"gt\": createPositionalPseudo( function( matchIndexes, length, argument ) {\n\t\t\tvar i = argument < 0 ? argument + length : argument;\n\t\t\tfor ( ; ++i < length; ) {\n\t\t\t\tmatchIndexes.push( i );\n\t\t\t}\n\t\t\treturn matchIndexes;\n\t\t} )\n\t}\n};\n\nExpr.pseudos[ \"nth\" ] = Expr.pseudos[ \"eq\" ];\n\n// Add button/input type pseudos\nfor ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {\n\tExpr.pseudos[ i ] = createInputPseudo( i );\n}\nfor ( i in { submit: true, reset: true } ) {\n\tExpr.pseudos[ i ] = createButtonPseudo( i );\n}\n\n// Easy API for creating new setFilters\nfunction setFilters() {}\nsetFilters.prototype = Expr.filters = Expr.pseudos;\nExpr.setFilters = new setFilters();\n\ntokenize = Sizzle.tokenize = function( selector, parseOnly ) {\n\tvar matched, match, tokens, type,\n\t\tsoFar, groups, preFilters,\n\t\tcached = tokenCache[ selector + \" \" ];\n\n\tif ( cached ) {\n\t\treturn parseOnly ? 0 : cached.slice( 0 );\n\t}\n\n\tsoFar = selector;\n\tgroups = [];\n\tpreFilters = Expr.preFilter;\n\n\twhile ( soFar ) {\n\n\t\t// Comma and first run\n\t\tif ( !matched || ( match = rcomma.exec( soFar ) ) ) {\n\t\t\tif ( match ) {\n\n\t\t\t\t// Don't consume trailing commas as valid\n\t\t\t\tsoFar = soFar.slice( match[ 0 ].length ) || soFar;\n\t\t\t}\n\t\t\tgroups.push( ( tokens = [] ) );\n\t\t}\n\n\t\tmatched = false;\n\n\t\t// Combinators\n\t\tif ( ( match = rleadingCombinator.exec( soFar ) ) ) {\n\t\t\tmatched = match.shift();\n\t\t\ttokens.push( {\n\t\t\t\tvalue: matched,\n\n\t\t\t\t// Cast descendant combinators to space\n\t\t\t\ttype: match[ 0 ].replace( rtrim, \" \" )\n\t\t\t} );\n\t\t\tsoFar = soFar.slice( matched.length );\n\t\t}\n\n\t\t// Filters\n\t\tfor ( type in Expr.filter ) {\n\t\t\tif ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||\n\t\t\t\t( match = preFilters[ type ]( match ) ) ) ) {\n\t\t\t\tmatched = match.shift();\n\t\t\t\ttokens.push( {\n\t\t\t\t\tvalue: matched,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tmatches: match\n\t\t\t\t} );\n\t\t\t\tsoFar = soFar.slice( matched.length );\n\t\t\t}\n\t\t}\n\n\t\tif ( !matched ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t// Return the length of the invalid excess\n\t// if we're just parsing\n\t// Otherwise, throw an error or return tokens\n\treturn parseOnly ?\n\t\tsoFar.length :\n\t\tsoFar ?\n\t\t\tSizzle.error( selector ) :\n\n\t\t\t// Cache the tokens\n\t\t\ttokenCache( selector, groups ).slice( 0 );\n};\n\nfunction toSelector( tokens ) {\n\tvar i = 0,\n\t\tlen = tokens.length,\n\t\tselector = \"\";\n\tfor ( ; i < len; i++ ) {\n\t\tselector += tokens[ i ].value;\n\t}\n\treturn selector;\n}\n\nfunction addCombinator( matcher, combinator, base ) {\n\tvar dir = combinator.dir,\n\t\tskip = combinator.next,\n\t\tkey = skip || dir,\n\t\tcheckNonElements = base && key === \"parentNode\",\n\t\tdoneName = done++;\n\n\treturn combinator.first ?\n\n\t\t// Check against closest ancestor/preceding element\n\t\tfunction( elem, context, xml ) {\n\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\treturn matcher( elem, context, xml );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t} :\n\n\t\t// Check against all ancestor/preceding elements\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar oldCache, uniqueCache, outerCache,\n\t\t\t\tnewCache = [ dirruns, doneName ];\n\n\t\t\t// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\t\t\tif ( xml ) {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\tif ( matcher( elem, context, xml ) ) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\twhile ( ( elem = elem[ dir ] ) ) {\n\t\t\t\t\tif ( elem.nodeType === 1 || checkNonElements ) {\n\t\t\t\t\t\touterCache = elem[ expando ] || ( elem[ expando ] = {} );\n\n\t\t\t\t\t\t// Support: IE <9 only\n\t\t\t\t\t\t// Defend against cloned attroperties (jQuery gh-1709)\n\t\t\t\t\t\tuniqueCache = outerCache[ elem.uniqueID ] ||\n\t\t\t\t\t\t\t( outerCache[ elem.uniqueID ] = {} );\n\n\t\t\t\t\t\tif ( skip && skip === elem.nodeName.toLowerCase() ) {\n\t\t\t\t\t\t\telem = elem[ dir ] || elem;\n\t\t\t\t\t\t} else if ( ( oldCache = uniqueCache[ key ] ) &&\n\t\t\t\t\t\t\toldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {\n\n\t\t\t\t\t\t\t// Assign to newCache so results back-propagate to previous elements\n\t\t\t\t\t\t\treturn ( newCache[ 2 ] = oldCache[ 2 ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Reuse newcache so results back-propagate to previous elements\n\t\t\t\t\t\t\tuniqueCache[ key ] = newCache;\n\n\t\t\t\t\t\t\t// A match means we're done; a fail means we have to keep checking\n\t\t\t\t\t\t\tif ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n}\n\nfunction elementMatcher( matchers ) {\n\treturn matchers.length > 1 ?\n\t\tfunction( elem, context, xml ) {\n\t\t\tvar i = matchers.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( !matchers[ i ]( elem, context, xml ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} :\n\t\tmatchers[ 0 ];\n}\n\nfunction multipleContexts( selector, contexts, results ) {\n\tvar i = 0,\n\t\tlen = contexts.length;\n\tfor ( ; i < len; i++ ) {\n\t\tSizzle( selector, contexts[ i ], results );\n\t}\n\treturn results;\n}\n\nfunction condense( unmatched, map, filter, context, xml ) {\n\tvar elem,\n\t\tnewUnmatched = [],\n\t\ti = 0,\n\t\tlen = unmatched.length,\n\t\tmapped = map != null;\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( elem = unmatched[ i ] ) ) {\n\t\t\tif ( !filter || filter( elem, context, xml ) ) {\n\t\t\t\tnewUnmatched.push( elem );\n\t\t\t\tif ( mapped ) {\n\t\t\t\t\tmap.push( i );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newUnmatched;\n}\n\nfunction setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {\n\tif ( postFilter && !postFilter[ expando ] ) {\n\t\tpostFilter = setMatcher( postFilter );\n\t}\n\tif ( postFinder && !postFinder[ expando ] ) {\n\t\tpostFinder = setMatcher( postFinder, postSelector );\n\t}\n\treturn markFunction( function( seed, results, context, xml ) {\n\t\tvar temp, i, elem,\n\t\t\tpreMap = [],\n\t\t\tpostMap = [],\n\t\t\tpreexisting = results.length,\n\n\t\t\t// Get initial elements from seed or context\n\t\t\telems = seed || multipleContexts(\n\t\t\t\tselector || \"*\",\n\t\t\t\tcontext.nodeType ? [ context ] : context,\n\t\t\t\t[]\n\t\t\t),\n\n\t\t\t// Prefilter to get matcher input, preserving a map for seed-results synchronization\n\t\t\tmatcherIn = preFilter && ( seed || !selector ) ?\n\t\t\t\tcondense( elems, preMap, preFilter, context, xml ) :\n\t\t\t\telems,\n\n\t\t\tmatcherOut = matcher ?\n\n\t\t\t\t// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n\t\t\t\tpostFinder || ( seed ? preFilter : preexisting || postFilter ) ?\n\n\t\t\t\t\t// ...intermediate processing is necessary\n\t\t\t\t\t[] :\n\n\t\t\t\t\t// ...otherwise use results directly\n\t\t\t\t\tresults :\n\t\t\t\tmatcherIn;\n\n\t\t// Find primary matches\n\t\tif ( matcher ) {\n\t\t\tmatcher( matcherIn, matcherOut, context, xml );\n\t\t}\n\n\t\t// Apply postFilter\n\t\tif ( postFilter ) {\n\t\t\ttemp = condense( matcherOut, postMap );\n\t\t\tpostFilter( temp, [], context, xml );\n\n\t\t\t// Un-match failing elements by moving them back to matcherIn\n\t\t\ti = temp.length;\n\t\t\twhile ( i-- ) {\n\t\t\t\tif ( ( elem = temp[ i ] ) ) {\n\t\t\t\t\tmatcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ( seed ) {\n\t\t\tif ( postFinder || preFilter ) {\n\t\t\t\tif ( postFinder ) {\n\n\t\t\t\t\t// Get the final matcherOut by condensing this intermediate into postFinder contexts\n\t\t\t\t\ttemp = [];\n\t\t\t\t\ti = matcherOut.length;\n\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) ) {\n\n\t\t\t\t\t\t\t// Restore matcherIn since elem is not yet a final match\n\t\t\t\t\t\t\ttemp.push( ( matcherIn[ i ] = elem ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpostFinder( null, ( matcherOut = [] ), temp, xml );\n\t\t\t\t}\n\n\t\t\t\t// Move matched elements from seed to results to keep them synchronized\n\t\t\t\ti = matcherOut.length;\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\tif ( ( elem = matcherOut[ i ] ) &&\n\t\t\t\t\t\t( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {\n\n\t\t\t\t\t\tseed[ temp ] = !( results[ temp ] = elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Add elements to results, through postFinder if defined\n\t\t} else {\n\t\t\tmatcherOut = condense(\n\t\t\t\tmatcherOut === results ?\n\t\t\t\t\tmatcherOut.splice( preexisting, matcherOut.length ) :\n\t\t\t\t\tmatcherOut\n\t\t\t);\n\t\t\tif ( postFinder ) {\n\t\t\t\tpostFinder( null, results, matcherOut, xml );\n\t\t\t} else {\n\t\t\t\tpush.apply( results, matcherOut );\n\t\t\t}\n\t\t}\n\t} );\n}\n\nfunction matcherFromTokens( tokens ) {\n\tvar checkContext, matcher, j,\n\t\tlen = tokens.length,\n\t\tleadingRelative = Expr.relative[ tokens[ 0 ].type ],\n\t\timplicitRelative = leadingRelative || Expr.relative[ \" \" ],\n\t\ti = leadingRelative ? 1 : 0,\n\n\t\t// The foundational matcher ensures that elements are reachable from top-level context(s)\n\t\tmatchContext = addCombinator( function( elem ) {\n\t\t\treturn elem === checkContext;\n\t\t}, implicitRelative, true ),\n\t\tmatchAnyContext = addCombinator( function( elem ) {\n\t\t\treturn indexOf( checkContext, elem ) > -1;\n\t\t}, implicitRelative, true ),\n\t\tmatchers = [ function( elem, context, xml ) {\n\t\t\tvar ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (\n\t\t\t\t( checkContext = context ).nodeType ?\n\t\t\t\t\tmatchContext( elem, context, xml ) :\n\t\t\t\t\tmatchAnyContext( elem, context, xml ) );\n\n\t\t\t// Avoid hanging onto element (issue #299)\n\t\t\tcheckContext = null;\n\t\t\treturn ret;\n\t\t} ];\n\n\tfor ( ; i < len; i++ ) {\n\t\tif ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {\n\t\t\tmatchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];\n\t\t} else {\n\t\t\tmatcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );\n\n\t\t\t// Return special upon seeing a positional matcher\n\t\t\tif ( matcher[ expando ] ) {\n\n\t\t\t\t// Find the next relative operator (if any) for proper handling\n\t\t\t\tj = ++i;\n\t\t\t\tfor ( ; j < len; j++ ) {\n\t\t\t\t\tif ( Expr.relative[ tokens[ j ].type ] ) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn setMatcher(\n\t\t\t\t\ti > 1 && elementMatcher( matchers ),\n\t\t\t\t\ti > 1 && toSelector(\n\n\t\t\t\t\t// If the preceding token was a descendant combinator, insert an implicit any-element `*`\n\t\t\t\t\ttokens\n\t\t\t\t\t\t.slice( 0, i - 1 )\n\t\t\t\t\t\t.concat( { value: tokens[ i - 2 ].type === \" \" ? \"*\" : \"\" } )\n\t\t\t\t\t).replace( rtrim, \"$1\" ),\n\t\t\t\t\tmatcher,\n\t\t\t\t\ti < j && matcherFromTokens( tokens.slice( i, j ) ),\n\t\t\t\t\tj < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),\n\t\t\t\t\tj < len && toSelector( tokens )\n\t\t\t\t);\n\t\t\t}\n\t\t\tmatchers.push( matcher );\n\t\t}\n\t}\n\n\treturn elementMatcher( matchers );\n}\n\nfunction matcherFromGroupMatchers( elementMatchers, setMatchers ) {\n\tvar bySet = setMatchers.length > 0,\n\t\tbyElement = elementMatchers.length > 0,\n\t\tsuperMatcher = function( seed, context, xml, results, outermost ) {\n\t\t\tvar elem, j, matcher,\n\t\t\t\tmatchedCount = 0,\n\t\t\t\ti = \"0\",\n\t\t\t\tunmatched = seed && [],\n\t\t\t\tsetMatched = [],\n\t\t\t\tcontextBackup = outermostContext,\n\n\t\t\t\t// We must always have either seed elements or outermost context\n\t\t\t\telems = seed || byElement && Expr.find[ \"TAG\" ]( \"*\", outermost ),\n\n\t\t\t\t// Use integer dirruns iff this is the outermost matcher\n\t\t\t\tdirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),\n\t\t\t\tlen = elems.length;\n\n\t\t\tif ( outermost ) {\n\n\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\toutermostContext = context == document || context || outermost;\n\t\t\t}\n\n\t\t\t// Add elements passing elementMatchers directly to results\n\t\t\t// Support: IE<9, Safari\n\t\t\t// Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\t\t\tfor ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {\n\t\t\t\tif ( byElement && elem ) {\n\t\t\t\t\tj = 0;\n\n\t\t\t\t\t// Support: IE 11+, Edge 17 - 18+\n\t\t\t\t\t// IE/Edge sometimes throw a \"Permission denied\" error when strict-comparing\n\t\t\t\t\t// two documents; shallow comparisons work.\n\t\t\t\t\t// eslint-disable-next-line eqeqeq\n\t\t\t\t\tif ( !context && elem.ownerDocument != document ) {\n\t\t\t\t\t\tsetDocument( elem );\n\t\t\t\t\t\txml = !documentIsHTML;\n\t\t\t\t\t}\n\t\t\t\t\twhile ( ( matcher = elementMatchers[ j++ ] ) ) {\n\t\t\t\t\t\tif ( matcher( elem, context || document, xml ) ) {\n\t\t\t\t\t\t\tresults.push( elem );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( outermost ) {\n\t\t\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Track unmatched elements for set filters\n\t\t\t\tif ( bySet ) {\n\n\t\t\t\t\t// They will have gone through all possible matchers\n\t\t\t\t\tif ( ( elem = !matcher && elem ) ) {\n\t\t\t\t\t\tmatchedCount--;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Lengthen the array for every element, matched or not\n\t\t\t\t\tif ( seed ) {\n\t\t\t\t\t\tunmatched.push( elem );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// `i` is now the count of elements visited above, and adding it to `matchedCount`\n\t\t\t// makes the latter nonnegative.\n\t\t\tmatchedCount += i;\n\n\t\t\t// Apply set filters to unmatched elements\n\t\t\t// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n\t\t\t// equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n\t\t\t// no element matchers and no seed.\n\t\t\t// Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n\t\t\t// case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n\t\t\t// numerically zero.\n\t\t\tif ( bySet && i !== matchedCount ) {\n\t\t\t\tj = 0;\n\t\t\t\twhile ( ( matcher = setMatchers[ j++ ] ) ) {\n\t\t\t\t\tmatcher( unmatched, setMatched, context, xml );\n\t\t\t\t}\n\n\t\t\t\tif ( seed ) {\n\n\t\t\t\t\t// Reintegrate element matches to eliminate the need for sorting\n\t\t\t\t\tif ( matchedCount > 0 ) {\n\t\t\t\t\t\twhile ( i-- ) {\n\t\t\t\t\t\t\tif ( !( unmatched[ i ] || setMatched[ i ] ) ) {\n\t\t\t\t\t\t\t\tsetMatched[ i ] = pop.call( results );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Discard index placeholder values to get only actual matches\n\t\t\t\t\tsetMatched = condense( setMatched );\n\t\t\t\t}\n\n\t\t\t\t// Add matches to results\n\t\t\t\tpush.apply( results, setMatched );\n\n\t\t\t\t// Seedless set matches succeeding multiple successful matchers stipulate sorting\n\t\t\t\tif ( outermost && !seed && setMatched.length > 0 &&\n\t\t\t\t\t( matchedCount + setMatchers.length ) > 1 ) {\n\n\t\t\t\t\tSizzle.uniqueSort( results );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Override manipulation of globals by nested matchers\n\t\t\tif ( outermost ) {\n\t\t\t\tdirruns = dirrunsUnique;\n\t\t\t\toutermostContext = contextBackup;\n\t\t\t}\n\n\t\t\treturn unmatched;\n\t\t};\n\n\treturn bySet ?\n\t\tmarkFunction( superMatcher ) :\n\t\tsuperMatcher;\n}\n\ncompile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {\n\tvar i,\n\t\tsetMatchers = [],\n\t\telementMatchers = [],\n\t\tcached = compilerCache[ selector + \" \" ];\n\n\tif ( !cached ) {\n\n\t\t// Generate a function of recursive functions that can be used to check each element\n\t\tif ( !match ) {\n\t\t\tmatch = tokenize( selector );\n\t\t}\n\t\ti = match.length;\n\t\twhile ( i-- ) {\n\t\t\tcached = matcherFromTokens( match[ i ] );\n\t\t\tif ( cached[ expando ] ) {\n\t\t\t\tsetMatchers.push( cached );\n\t\t\t} else {\n\t\t\t\telementMatchers.push( cached );\n\t\t\t}\n\t\t}\n\n\t\t// Cache the compiled function\n\t\tcached = compilerCache(\n\t\t\tselector,\n\t\t\tmatcherFromGroupMatchers( elementMatchers, setMatchers )\n\t\t);\n\n\t\t// Save selector and tokenization\n\t\tcached.selector = selector;\n\t}\n\treturn cached;\n};\n\n/**\n * A low-level selection function that works with Sizzle's compiled\n *  selector functions\n * @param {String|Function} selector A selector or a pre-compiled\n *  selector function built with Sizzle.compile\n * @param {Element} context\n * @param {Array} [results]\n * @param {Array} [seed] A set of elements to match against\n */\nselect = Sizzle.select = function( selector, context, results, seed ) {\n\tvar i, tokens, token, type, find,\n\t\tcompiled = typeof selector === \"function\" && selector,\n\t\tmatch = !seed && tokenize( ( selector = compiled.selector || selector ) );\n\n\tresults = results || [];\n\n\t// Try to minimize operations if there is only one selector in the list and no seed\n\t// (the latter of which guarantees us context)\n\tif ( match.length === 1 ) {\n\n\t\t// Reduce context if the leading compound selector is an ID\n\t\ttokens = match[ 0 ] = match[ 0 ].slice( 0 );\n\t\tif ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === \"ID\" &&\n\t\t\tcontext.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {\n\n\t\t\tcontext = ( Expr.find[ \"ID\" ]( token.matches[ 0 ]\n\t\t\t\t.replace( runescape, funescape ), context ) || [] )[ 0 ];\n\t\t\tif ( !context ) {\n\t\t\t\treturn results;\n\n\t\t\t// Precompiled matchers will still verify ancestry, so step up a level\n\t\t\t} else if ( compiled ) {\n\t\t\t\tcontext = context.parentNode;\n\t\t\t}\n\n\t\t\tselector = selector.slice( tokens.shift().value.length );\n\t\t}\n\n\t\t// Fetch a seed set for right-to-left matching\n\t\ti = matchExpr[ \"needsContext\" ].test( selector ) ? 0 : tokens.length;\n\t\twhile ( i-- ) {\n\t\t\ttoken = tokens[ i ];\n\n\t\t\t// Abort if we hit a combinator\n\t\t\tif ( Expr.relative[ ( type = token.type ) ] ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( ( find = Expr.find[ type ] ) ) {\n\n\t\t\t\t// Search, expanding context for leading sibling combinators\n\t\t\t\tif ( ( seed = find(\n\t\t\t\t\ttoken.matches[ 0 ].replace( runescape, funescape ),\n\t\t\t\t\trsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||\n\t\t\t\t\t\tcontext\n\t\t\t\t) ) ) {\n\n\t\t\t\t\t// If seed is empty or no tokens remain, we can return early\n\t\t\t\t\ttokens.splice( i, 1 );\n\t\t\t\t\tselector = seed.length && toSelector( tokens );\n\t\t\t\t\tif ( !selector ) {\n\t\t\t\t\t\tpush.apply( results, seed );\n\t\t\t\t\t\treturn results;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Compile and execute a filtering function if one is not provided\n\t// Provide `match` to avoid retokenization if we modified the selector above\n\t( compiled || compile( selector, match ) )(\n\t\tseed,\n\t\tcontext,\n\t\t!documentIsHTML,\n\t\tresults,\n\t\t!context || rsibling.test( selector ) && testContext( context.parentNode ) || context\n\t);\n\treturn results;\n};\n\n// One-time assignments\n\n// Sort stability\nsupport.sortStable = expando.split( \"\" ).sort( sortOrder ).join( \"\" ) === expando;\n\n// Support: Chrome 14-35+\n// Always assume duplicates if they aren't passed to the comparison function\nsupport.detectDuplicates = !!hasDuplicate;\n\n// Initialize against the default document\nsetDocument();\n\n// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n// Detached nodes confoundingly follow *each other*\nsupport.sortDetached = assert( function( el ) {\n\n\t// Should return 1, but returns 4 (following)\n\treturn el.compareDocumentPosition( document.createElement( \"fieldset\" ) ) & 1;\n} );\n\n// Support: IE<8\n// Prevent attribute/property \"interpolation\"\n// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\nif ( !assert( function( el ) {\n\tel.innerHTML = \"<a href='#'></a>\";\n\treturn el.firstChild.getAttribute( \"href\" ) === \"#\";\n} ) ) {\n\taddHandle( \"type|href|height|width\", function( elem, name, isXML ) {\n\t\tif ( !isXML ) {\n\t\t\treturn elem.getAttribute( name, name.toLowerCase() === \"type\" ? 1 : 2 );\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use defaultValue in place of getAttribute(\"value\")\nif ( !support.attributes || !assert( function( el ) {\n\tel.innerHTML = \"<input/>\";\n\tel.firstChild.setAttribute( \"value\", \"\" );\n\treturn el.firstChild.getAttribute( \"value\" ) === \"\";\n} ) ) {\n\taddHandle( \"value\", function( elem, _name, isXML ) {\n\t\tif ( !isXML && elem.nodeName.toLowerCase() === \"input\" ) {\n\t\t\treturn elem.defaultValue;\n\t\t}\n\t} );\n}\n\n// Support: IE<9\n// Use getAttributeNode to fetch booleans when getAttribute lies\nif ( !assert( function( el ) {\n\treturn el.getAttribute( \"disabled\" ) == null;\n} ) ) {\n\taddHandle( booleans, function( elem, name, isXML ) {\n\t\tvar val;\n\t\tif ( !isXML ) {\n\t\t\treturn elem[ name ] === true ? name.toLowerCase() :\n\t\t\t\t( val = elem.getAttributeNode( name ) ) && val.specified ?\n\t\t\t\t\tval.value :\n\t\t\t\t\tnull;\n\t\t}\n\t} );\n}\n\nreturn Sizzle;\n\n} )( window );\n\n\n\njQuery.find = Sizzle;\njQuery.expr = Sizzle.selectors;\n\n// Deprecated\njQuery.expr[ \":\" ] = jQuery.expr.pseudos;\njQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;\njQuery.text = Sizzle.getText;\njQuery.isXMLDoc = Sizzle.isXML;\njQuery.contains = Sizzle.contains;\njQuery.escapeSelector = Sizzle.escape;\n\n\n\n\nvar dir = function( elem, dir, until ) {\n\tvar matched = [],\n\t\ttruncate = until !== undefined;\n\n\twhile ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {\n\t\tif ( elem.nodeType === 1 ) {\n\t\t\tif ( truncate && jQuery( elem ).is( until ) ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tmatched.push( elem );\n\t\t}\n\t}\n\treturn matched;\n};\n\n\nvar siblings = function( n, elem ) {\n\tvar matched = [];\n\n\tfor ( ; n; n = n.nextSibling ) {\n\t\tif ( n.nodeType === 1 && n !== elem ) {\n\t\t\tmatched.push( n );\n\t\t}\n\t}\n\n\treturn matched;\n};\n\n\nvar rneedsContext = jQuery.expr.match.needsContext;\n\n\n\nfunction nodeName( elem, name ) {\n\n\treturn elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();\n\n}\nvar rsingleTag = ( /^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i );\n\n\n\n// Implement the identical functionality for filter and not\nfunction winnow( elements, qualifier, not ) {\n\tif ( isFunction( qualifier ) ) {\n\t\treturn jQuery.grep( elements, function( elem, i ) {\n\t\t\treturn !!qualifier.call( elem, i, elem ) !== not;\n\t\t} );\n\t}\n\n\t// Single element\n\tif ( qualifier.nodeType ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( elem === qualifier ) !== not;\n\t\t} );\n\t}\n\n\t// Arraylike of elements (jQuery, arguments, Array)\n\tif ( typeof qualifier !== \"string\" ) {\n\t\treturn jQuery.grep( elements, function( elem ) {\n\t\t\treturn ( indexOf.call( qualifier, elem ) > -1 ) !== not;\n\t\t} );\n\t}\n\n\t// Filtered directly for both simple and complex selectors\n\treturn jQuery.filter( qualifier, elements, not );\n}\n\njQuery.filter = function( expr, elems, not ) {\n\tvar elem = elems[ 0 ];\n\n\tif ( not ) {\n\t\texpr = \":not(\" + expr + \")\";\n\t}\n\n\tif ( elems.length === 1 && elem.nodeType === 1 ) {\n\t\treturn jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];\n\t}\n\n\treturn jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {\n\t\treturn elem.nodeType === 1;\n\t} ) );\n};\n\njQuery.fn.extend( {\n\tfind: function( selector ) {\n\t\tvar i, ret,\n\t\t\tlen = this.length,\n\t\t\tself = this;\n\n\t\tif ( typeof selector !== \"string\" ) {\n\t\t\treturn this.pushStack( jQuery( selector ).filter( function() {\n\t\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\t\tif ( jQuery.contains( self[ i ], this ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ) );\n\t\t}\n\n\t\tret = this.pushStack( [] );\n\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tjQuery.find( selector, self[ i ], ret );\n\t\t}\n\n\t\treturn len > 1 ? jQuery.uniqueSort( ret ) : ret;\n\t},\n\tfilter: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], false ) );\n\t},\n\tnot: function( selector ) {\n\t\treturn this.pushStack( winnow( this, selector || [], true ) );\n\t},\n\tis: function( selector ) {\n\t\treturn !!winnow(\n\t\t\tthis,\n\n\t\t\t// If this is a positional/relative selector, check membership in the returned set\n\t\t\t// so $(\"p:first\").is(\"p:last\") won't return true for a doc with two \"p\".\n\t\t\ttypeof selector === \"string\" && rneedsContext.test( selector ) ?\n\t\t\t\tjQuery( selector ) :\n\t\t\t\tselector || [],\n\t\t\tfalse\n\t\t).length;\n\t}\n} );\n\n\n// Initialize a jQuery object\n\n\n// A central reference to the root jQuery(document)\nvar rootjQuery,\n\n\t// A simple way to check for HTML strings\n\t// Prioritize #id over <tag> to avoid XSS via location.hash (trac-9521)\n\t// Strict HTML recognition (trac-11290: must start with <)\n\t// Shortcut simple #id case for speed\n\trquickExpr = /^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/,\n\n\tinit = jQuery.fn.init = function( selector, context, root ) {\n\t\tvar match, elem;\n\n\t\t// HANDLE: $(\"\"), $(null), $(undefined), $(false)\n\t\tif ( !selector ) {\n\t\t\treturn this;\n\t\t}\n\n\t\t// Method init() accepts an alternate rootjQuery\n\t\t// so migrate can support jQuery.sub (gh-2101)\n\t\troot = root || rootjQuery;\n\n\t\t// Handle HTML strings\n\t\tif ( typeof selector === \"string\" ) {\n\t\t\tif ( selector[ 0 ] === \"<\" &&\n\t\t\t\tselector[ selector.length - 1 ] === \">\" &&\n\t\t\t\tselector.length >= 3 ) {\n\n\t\t\t\t// Assume that strings that start and end with <> are HTML and skip the regex check\n\t\t\t\tmatch = [ null, selector, null ];\n\n\t\t\t} else {\n\t\t\t\tmatch = rquickExpr.exec( selector );\n\t\t\t}\n\n\t\t\t// Match html or make sure no context is specified for #id\n\t\t\tif ( match && ( match[ 1 ] || !context ) ) {\n\n\t\t\t\t// HANDLE: $(html) -> $(array)\n\t\t\t\tif ( match[ 1 ] ) {\n\t\t\t\t\tcontext = context instanceof jQuery ? context[ 0 ] : context;\n\n\t\t\t\t\t// Option to run scripts is true for back-compat\n\t\t\t\t\t// Intentionally let the error be thrown if parseHTML is not present\n\t\t\t\t\tjQuery.merge( this, jQuery.parseHTML(\n\t\t\t\t\t\tmatch[ 1 ],\n\t\t\t\t\t\tcontext && context.nodeType ? context.ownerDocument || context : document,\n\t\t\t\t\t\ttrue\n\t\t\t\t\t) );\n\n\t\t\t\t\t// HANDLE: $(html, props)\n\t\t\t\t\tif ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {\n\t\t\t\t\t\tfor ( match in context ) {\n\n\t\t\t\t\t\t\t// Properties of context are called as methods if possible\n\t\t\t\t\t\t\tif ( isFunction( this[ match ] ) ) {\n\t\t\t\t\t\t\t\tthis[ match ]( context[ match ] );\n\n\t\t\t\t\t\t\t// ...and otherwise set as attributes\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.attr( match, context[ match ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this;\n\n\t\t\t\t// HANDLE: $(#id)\n\t\t\t\t} else {\n\t\t\t\t\telem = document.getElementById( match[ 2 ] );\n\n\t\t\t\t\tif ( elem ) {\n\n\t\t\t\t\t\t// Inject the element directly into the jQuery object\n\t\t\t\t\t\tthis[ 0 ] = elem;\n\t\t\t\t\t\tthis.length = 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\n\t\t\t// HANDLE: $(expr, $(...))\n\t\t\t} else if ( !context || context.jquery ) {\n\t\t\t\treturn ( context || root ).find( selector );\n\n\t\t\t// HANDLE: $(expr, context)\n\t\t\t// (which is just equivalent to: $(context).find(expr)\n\t\t\t} else {\n\t\t\t\treturn this.constructor( context ).find( selector );\n\t\t\t}\n\n\t\t// HANDLE: $(DOMElement)\n\t\t} else if ( selector.nodeType ) {\n\t\t\tthis[ 0 ] = selector;\n\t\t\tthis.length = 1;\n\t\t\treturn this;\n\n\t\t// HANDLE: $(function)\n\t\t// Shortcut for document ready\n\t\t} else if ( isFunction( selector ) ) {\n\t\t\treturn root.ready !== undefined ?\n\t\t\t\troot.ready( selector ) :\n\n\t\t\t\t// Execute immediately if ready is not present\n\t\t\t\tselector( jQuery );\n\t\t}\n\n\t\treturn jQuery.makeArray( selector, this );\n\t};\n\n// Give the init function the jQuery prototype for later instantiation\ninit.prototype = jQuery.fn;\n\n// Initialize central reference\nrootjQuery = jQuery( document );\n\n\nvar rparentsprev = /^(?:parents|prev(?:Until|All))/,\n\n\t// Methods guaranteed to produce a unique set when starting from a unique set\n\tguaranteedUnique = {\n\t\tchildren: true,\n\t\tcontents: true,\n\t\tnext: true,\n\t\tprev: true\n\t};\n\njQuery.fn.extend( {\n\thas: function( target ) {\n\t\tvar targets = jQuery( target, this ),\n\t\t\tl = targets.length;\n\n\t\treturn this.filter( function() {\n\t\t\tvar i = 0;\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tif ( jQuery.contains( this, targets[ i ] ) ) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\tclosest: function( selectors, context ) {\n\t\tvar cur,\n\t\t\ti = 0,\n\t\t\tl = this.length,\n\t\t\tmatched = [],\n\t\t\ttargets = typeof selectors !== \"string\" && jQuery( selectors );\n\n\t\t// Positional selectors never match, since there's no _selection_ context\n\t\tif ( !rneedsContext.test( selectors ) ) {\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tfor ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {\n\n\t\t\t\t\t// Always skip document fragments\n\t\t\t\t\tif ( cur.nodeType < 11 && ( targets ?\n\t\t\t\t\t\ttargets.index( cur ) > -1 :\n\n\t\t\t\t\t\t// Don't pass non-elements to Sizzle\n\t\t\t\t\t\tcur.nodeType === 1 &&\n\t\t\t\t\t\t\tjQuery.find.matchesSelector( cur, selectors ) ) ) {\n\n\t\t\t\t\t\tmatched.push( cur );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );\n\t},\n\n\t// Determine the position of an element within the set\n\tindex: function( elem ) {\n\n\t\t// No argument, return index in parent\n\t\tif ( !elem ) {\n\t\t\treturn ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;\n\t\t}\n\n\t\t// Index in selector\n\t\tif ( typeof elem === \"string\" ) {\n\t\t\treturn indexOf.call( jQuery( elem ), this[ 0 ] );\n\t\t}\n\n\t\t// Locate the position of the desired element\n\t\treturn indexOf.call( this,\n\n\t\t\t// If it receives a jQuery object, the first element is used\n\t\t\telem.jquery ? elem[ 0 ] : elem\n\t\t);\n\t},\n\n\tadd: function( selector, context ) {\n\t\treturn this.pushStack(\n\t\t\tjQuery.uniqueSort(\n\t\t\t\tjQuery.merge( this.get(), jQuery( selector, context ) )\n\t\t\t)\n\t\t);\n\t},\n\n\taddBack: function( selector ) {\n\t\treturn this.add( selector == null ?\n\t\t\tthis.prevObject : this.prevObject.filter( selector )\n\t\t);\n\t}\n} );\n\nfunction sibling( cur, dir ) {\n\twhile ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}\n\treturn cur;\n}\n\njQuery.each( {\n\tparent: function( elem ) {\n\t\tvar parent = elem.parentNode;\n\t\treturn parent && parent.nodeType !== 11 ? parent : null;\n\t},\n\tparents: function( elem ) {\n\t\treturn dir( elem, \"parentNode\" );\n\t},\n\tparentsUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"parentNode\", until );\n\t},\n\tnext: function( elem ) {\n\t\treturn sibling( elem, \"nextSibling\" );\n\t},\n\tprev: function( elem ) {\n\t\treturn sibling( elem, \"previousSibling\" );\n\t},\n\tnextAll: function( elem ) {\n\t\treturn dir( elem, \"nextSibling\" );\n\t},\n\tprevAll: function( elem ) {\n\t\treturn dir( elem, \"previousSibling\" );\n\t},\n\tnextUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"nextSibling\", until );\n\t},\n\tprevUntil: function( elem, _i, until ) {\n\t\treturn dir( elem, \"previousSibling\", until );\n\t},\n\tsiblings: function( elem ) {\n\t\treturn siblings( ( elem.parentNode || {} ).firstChild, elem );\n\t},\n\tchildren: function( elem ) {\n\t\treturn siblings( elem.firstChild );\n\t},\n\tcontents: function( elem ) {\n\t\tif ( elem.contentDocument != null &&\n\n\t\t\t// Support: IE 11+\n\t\t\t// <object> elements with no `data` attribute has an object\n\t\t\t// `contentDocument` with a `null` prototype.\n\t\t\tgetProto( elem.contentDocument ) ) {\n\n\t\t\treturn elem.contentDocument;\n\t\t}\n\n\t\t// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only\n\t\t// Treat the template element as a regular one in browsers that\n\t\t// don't support it.\n\t\tif ( nodeName( elem, \"template\" ) ) {\n\t\t\telem = elem.content || elem;\n\t\t}\n\n\t\treturn jQuery.merge( [], elem.childNodes );\n\t}\n}, function( name, fn ) {\n\tjQuery.fn[ name ] = function( until, selector ) {\n\t\tvar matched = jQuery.map( this, fn, until );\n\n\t\tif ( name.slice( -5 ) !== \"Until\" ) {\n\t\t\tselector = until;\n\t\t}\n\n\t\tif ( selector && typeof selector === \"string\" ) {\n\t\t\tmatched = jQuery.filter( selector, matched );\n\t\t}\n\n\t\tif ( this.length > 1 ) {\n\n\t\t\t// Remove duplicates\n\t\t\tif ( !guaranteedUnique[ name ] ) {\n\t\t\t\tjQuery.uniqueSort( matched );\n\t\t\t}\n\n\t\t\t// Reverse order for parents* and prev-derivatives\n\t\t\tif ( rparentsprev.test( name ) ) {\n\t\t\t\tmatched.reverse();\n\t\t\t}\n\t\t}\n\n\t\treturn this.pushStack( matched );\n\t};\n} );\nvar rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n\n\n\n// Convert String-formatted options into Object-formatted ones\nfunction createOptions( options ) {\n\tvar object = {};\n\tjQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {\n\t\tobject[ flag ] = true;\n\t} );\n\treturn object;\n}\n\n/*\n * Create a callback list using the following parameters:\n *\n *\toptions: an optional list of space-separated options that will change how\n *\t\t\tthe callback list behaves or a more traditional option object\n *\n * By default a callback list will act like an event callback list and can be\n * \"fired\" multiple times.\n *\n * Possible options:\n *\n *\tonce:\t\t\twill ensure the callback list can only be fired once (like a Deferred)\n *\n *\tmemory:\t\t\twill keep track of previous values and will call any callback added\n *\t\t\t\t\tafter the list has been fired right away with the latest \"memorized\"\n *\t\t\t\t\tvalues (like a Deferred)\n *\n *\tunique:\t\t\twill ensure a callback can only be added once (no duplicate in the list)\n *\n *\tstopOnFalse:\tinterrupt callings when a callback returns false\n *\n */\njQuery.Callbacks = function( options ) {\n\n\t// Convert options from String-formatted to Object-formatted if needed\n\t// (we check in cache first)\n\toptions = typeof options === \"string\" ?\n\t\tcreateOptions( options ) :\n\t\tjQuery.extend( {}, options );\n\n\tvar // Flag to know if list is currently firing\n\t\tfiring,\n\n\t\t// Last fire value for non-forgettable lists\n\t\tmemory,\n\n\t\t// Flag to know if list was already fired\n\t\tfired,\n\n\t\t// Flag to prevent firing\n\t\tlocked,\n\n\t\t// Actual callback list\n\t\tlist = [],\n\n\t\t// Queue of execution data for repeatable lists\n\t\tqueue = [],\n\n\t\t// Index of currently firing callback (modified by add/remove as needed)\n\t\tfiringIndex = -1,\n\n\t\t// Fire callbacks\n\t\tfire = function() {\n\n\t\t\t// Enforce single-firing\n\t\t\tlocked = locked || options.once;\n\n\t\t\t// Execute callbacks for all pending executions,\n\t\t\t// respecting firingIndex overrides and runtime changes\n\t\t\tfired = firing = true;\n\t\t\tfor ( ; queue.length; firingIndex = -1 ) {\n\t\t\t\tmemory = queue.shift();\n\t\t\t\twhile ( ++firingIndex < list.length ) {\n\n\t\t\t\t\t// Run callback and check for early termination\n\t\t\t\t\tif ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&\n\t\t\t\t\t\toptions.stopOnFalse ) {\n\n\t\t\t\t\t\t// Jump to end and forget the data so .add doesn't re-fire\n\t\t\t\t\t\tfiringIndex = list.length;\n\t\t\t\t\t\tmemory = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Forget the data if we're done with it\n\t\t\tif ( !options.memory ) {\n\t\t\t\tmemory = false;\n\t\t\t}\n\n\t\t\tfiring = false;\n\n\t\t\t// Clean up if we're done firing for good\n\t\t\tif ( locked ) {\n\n\t\t\t\t// Keep an empty list if we have data for future add calls\n\t\t\t\tif ( memory ) {\n\t\t\t\t\tlist = [];\n\n\t\t\t\t// Otherwise, this object is spent\n\t\t\t\t} else {\n\t\t\t\t\tlist = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// Actual Callbacks object\n\t\tself = {\n\n\t\t\t// Add a callback or a collection of callbacks to the list\n\t\t\tadd: function() {\n\t\t\t\tif ( list ) {\n\n\t\t\t\t\t// If we have memory from a past run, we should fire after adding\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfiringIndex = list.length - 1;\n\t\t\t\t\t\tqueue.push( memory );\n\t\t\t\t\t}\n\n\t\t\t\t\t( function add( args ) {\n\t\t\t\t\t\tjQuery.each( args, function( _, arg ) {\n\t\t\t\t\t\t\tif ( isFunction( arg ) ) {\n\t\t\t\t\t\t\t\tif ( !options.unique || !self.has( arg ) ) {\n\t\t\t\t\t\t\t\t\tlist.push( arg );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if ( arg && arg.length && toType( arg ) !== \"string\" ) {\n\n\t\t\t\t\t\t\t\t// Inspect recursively\n\t\t\t\t\t\t\t\tadd( arg );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} )( arguments );\n\n\t\t\t\t\tif ( memory && !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Remove a callback from the list\n\t\t\tremove: function() {\n\t\t\t\tjQuery.each( arguments, function( _, arg ) {\n\t\t\t\t\tvar index;\n\t\t\t\t\twhile ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {\n\t\t\t\t\t\tlist.splice( index, 1 );\n\n\t\t\t\t\t\t// Handle firing indexes\n\t\t\t\t\t\tif ( index <= firingIndex ) {\n\t\t\t\t\t\t\tfiringIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Check if a given callback is in the list.\n\t\t\t// If no argument is given, return whether or not list has callbacks attached.\n\t\t\thas: function( fn ) {\n\t\t\t\treturn fn ?\n\t\t\t\t\tjQuery.inArray( fn, list ) > -1 :\n\t\t\t\t\tlist.length > 0;\n\t\t\t},\n\n\t\t\t// Remove all callbacks from the list\n\t\t\tempty: function() {\n\t\t\t\tif ( list ) {\n\t\t\t\t\tlist = [];\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Disable .fire and .add\n\t\t\t// Abort any current/pending executions\n\t\t\t// Clear all callbacks and values\n\t\t\tdisable: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tlist = memory = \"\";\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tdisabled: function() {\n\t\t\t\treturn !list;\n\t\t\t},\n\n\t\t\t// Disable .fire\n\t\t\t// Also disable .add unless we have memory (since it would have no effect)\n\t\t\t// Abort any pending executions\n\t\t\tlock: function() {\n\t\t\t\tlocked = queue = [];\n\t\t\t\tif ( !memory && !firing ) {\n\t\t\t\t\tlist = memory = \"\";\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tlocked: function() {\n\t\t\t\treturn !!locked;\n\t\t\t},\n\n\t\t\t// Call all callbacks with the given context and arguments\n\t\t\tfireWith: function( context, args ) {\n\t\t\t\tif ( !locked ) {\n\t\t\t\t\targs = args || [];\n\t\t\t\t\targs = [ context, args.slice ? args.slice() : args ];\n\t\t\t\t\tqueue.push( args );\n\t\t\t\t\tif ( !firing ) {\n\t\t\t\t\t\tfire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// Call all the callbacks with the given arguments\n\t\t\tfire: function() {\n\t\t\t\tself.fireWith( this, arguments );\n\t\t\t\treturn this;\n\t\t\t},\n\n\t\t\t// To know if the callbacks have already been called at least once\n\t\t\tfired: function() {\n\t\t\t\treturn !!fired;\n\t\t\t}\n\t\t};\n\n\treturn self;\n};\n\n\nfunction Identity( v ) {\n\treturn v;\n}\nfunction Thrower( ex ) {\n\tthrow ex;\n}\n\nfunction adoptValue( value, resolve, reject, noValue ) {\n\tvar method;\n\n\ttry {\n\n\t\t// Check for promise aspect first to privilege synchronous behavior\n\t\tif ( value && isFunction( ( method = value.promise ) ) ) {\n\t\t\tmethod.call( value ).done( resolve ).fail( reject );\n\n\t\t// Other thenables\n\t\t} else if ( value && isFunction( ( method = value.then ) ) ) {\n\t\t\tmethod.call( value, resolve, reject );\n\n\t\t// Other non-thenables\n\t\t} else {\n\n\t\t\t// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:\n\t\t\t// * false: [ value ].slice( 0 ) => resolve( value )\n\t\t\t// * true: [ value ].slice( 1 ) => resolve()\n\t\t\tresolve.apply( undefined, [ value ].slice( noValue ) );\n\t\t}\n\n\t// For Promises/A+, convert exceptions into rejections\n\t// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in\n\t// Deferred#then to conditionally suppress rejection.\n\t} catch ( value ) {\n\n\t\t// Support: Android 4.0 only\n\t\t// Strict mode functions invoked without .call/.apply get global-object context\n\t\treject.apply( undefined, [ value ] );\n\t}\n}\n\njQuery.extend( {\n\n\tDeferred: function( func ) {\n\t\tvar tuples = [\n\n\t\t\t\t// action, add listener, callbacks,\n\t\t\t\t// ... .then handlers, argument index, [final state]\n\t\t\t\t[ \"notify\", \"progress\", jQuery.Callbacks( \"memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"memory\" ), 2 ],\n\t\t\t\t[ \"resolve\", \"done\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 0, \"resolved\" ],\n\t\t\t\t[ \"reject\", \"fail\", jQuery.Callbacks( \"once memory\" ),\n\t\t\t\t\tjQuery.Callbacks( \"once memory\" ), 1, \"rejected\" ]\n\t\t\t],\n\t\t\tstate = \"pending\",\n\t\t\tpromise = {\n\t\t\t\tstate: function() {\n\t\t\t\t\treturn state;\n\t\t\t\t},\n\t\t\t\talways: function() {\n\t\t\t\t\tdeferred.done( arguments ).fail( arguments );\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\t\t\t\t\"catch\": function( fn ) {\n\t\t\t\t\treturn promise.then( null, fn );\n\t\t\t\t},\n\n\t\t\t\t// Keep pipe for back-compat\n\t\t\t\tpipe: function( /* fnDone, fnFail, fnProgress */ ) {\n\t\t\t\t\tvar fns = arguments;\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\t\t\t\t\t\tjQuery.each( tuples, function( _i, tuple ) {\n\n\t\t\t\t\t\t\t// Map tuples (progress, done, fail) to arguments (done, fail, progress)\n\t\t\t\t\t\t\tvar fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];\n\n\t\t\t\t\t\t\t// deferred.progress(function() { bind to newDefer or newDefer.notify })\n\t\t\t\t\t\t\t// deferred.done(function() { bind to newDefer or newDefer.resolve })\n\t\t\t\t\t\t\t// deferred.fail(function() { bind to newDefer or newDefer.reject })\n\t\t\t\t\t\t\tdeferred[ tuple[ 1 ] ]( function() {\n\t\t\t\t\t\t\t\tvar returned = fn && fn.apply( this, arguments );\n\t\t\t\t\t\t\t\tif ( returned && isFunction( returned.promise ) ) {\n\t\t\t\t\t\t\t\t\treturned.promise()\n\t\t\t\t\t\t\t\t\t\t.progress( newDefer.notify )\n\t\t\t\t\t\t\t\t\t\t.done( newDefer.resolve )\n\t\t\t\t\t\t\t\t\t\t.fail( newDefer.reject );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tnewDefer[ tuple[ 0 ] + \"With\" ](\n\t\t\t\t\t\t\t\t\t\tthis,\n\t\t\t\t\t\t\t\t\t\tfn ? [ returned ] : arguments\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tfns = null;\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\t\t\t\tthen: function( onFulfilled, onRejected, onProgress ) {\n\t\t\t\t\tvar maxDepth = 0;\n\t\t\t\t\tfunction resolve( depth, deferred, handler, special ) {\n\t\t\t\t\t\treturn function() {\n\t\t\t\t\t\t\tvar that = this,\n\t\t\t\t\t\t\t\targs = arguments,\n\t\t\t\t\t\t\t\tmightThrow = function() {\n\t\t\t\t\t\t\t\t\tvar returned, then;\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.3\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-59\n\t\t\t\t\t\t\t\t\t// Ignore double-resolution attempts\n\t\t\t\t\t\t\t\t\tif ( depth < maxDepth ) {\n\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturned = handler.apply( that, args );\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.1\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-48\n\t\t\t\t\t\t\t\t\tif ( returned === deferred.promise() ) {\n\t\t\t\t\t\t\t\t\t\tthrow new TypeError( \"Thenable self-resolution\" );\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Support: Promises/A+ sections 2.3.3.1, 3.5\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-54\n\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-75\n\t\t\t\t\t\t\t\t\t// Retrieve `then` only once\n\t\t\t\t\t\t\t\t\tthen = returned &&\n\n\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.4\n\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-64\n\t\t\t\t\t\t\t\t\t\t// Only check objects and functions for thenability\n\t\t\t\t\t\t\t\t\t\t( typeof returned === \"object\" ||\n\t\t\t\t\t\t\t\t\t\t\ttypeof returned === \"function\" ) &&\n\t\t\t\t\t\t\t\t\t\treturned.then;\n\n\t\t\t\t\t\t\t\t\t// Handle a returned thenable\n\t\t\t\t\t\t\t\t\tif ( isFunction( then ) ) {\n\n\t\t\t\t\t\t\t\t\t\t// Special processors (notify) just wait for resolution\n\t\t\t\t\t\t\t\t\t\tif ( special ) {\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special )\n\t\t\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\t\t// Normal processors (resolve) also hook into progress\n\t\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t\t// ...and disregard older resolution values\n\t\t\t\t\t\t\t\t\t\t\tmaxDepth++;\n\n\t\t\t\t\t\t\t\t\t\t\tthen.call(\n\t\t\t\t\t\t\t\t\t\t\t\treturned,\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Thrower, special ),\n\t\t\t\t\t\t\t\t\t\t\t\tresolve( maxDepth, deferred, Identity,\n\t\t\t\t\t\t\t\t\t\t\t\t\tdeferred.notifyWith )\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Handle all other returned values\n\t\t\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\tif ( handler !== Identity ) {\n\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\targs = [ returned ];\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t// Process the value(s)\n\t\t\t\t\t\t\t\t\t\t// Default process is resolve\n\t\t\t\t\t\t\t\t\t\t( special || deferred.resolveWith )( that, args );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\n\t\t\t\t\t\t\t\t// Only normal processors (resolve) catch and reject exceptions\n\t\t\t\t\t\t\t\tprocess = special ?\n\t\t\t\t\t\t\t\t\tmightThrow :\n\t\t\t\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\t\tmightThrow();\n\t\t\t\t\t\t\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t\t\t\t\t\t\tif ( jQuery.Deferred.exceptionHook ) {\n\t\t\t\t\t\t\t\t\t\t\t\tjQuery.Deferred.exceptionHook( e,\n\t\t\t\t\t\t\t\t\t\t\t\t\tprocess.stackTrace );\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.4.1\n\t\t\t\t\t\t\t\t\t\t\t// https://promisesaplus.com/#point-61\n\t\t\t\t\t\t\t\t\t\t\t// Ignore post-resolution exceptions\n\t\t\t\t\t\t\t\t\t\t\tif ( depth + 1 >= maxDepth ) {\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Only substitute handlers pass on context\n\t\t\t\t\t\t\t\t\t\t\t\t// and multiple values (non-spec behavior)\n\t\t\t\t\t\t\t\t\t\t\t\tif ( handler !== Thrower ) {\n\t\t\t\t\t\t\t\t\t\t\t\t\tthat = undefined;\n\t\t\t\t\t\t\t\t\t\t\t\t\targs = [ e ];\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t\tdeferred.rejectWith( that, args );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Support: Promises/A+ section 2.3.3.3.1\n\t\t\t\t\t\t\t// https://promisesaplus.com/#point-57\n\t\t\t\t\t\t\t// Re-resolve promises immediately to dodge false rejection from\n\t\t\t\t\t\t\t// subsequent errors\n\t\t\t\t\t\t\tif ( depth ) {\n\t\t\t\t\t\t\t\tprocess();\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\t// Call an optional hook to record the stack, in case of exception\n\t\t\t\t\t\t\t\t// since it's otherwise lost when execution goes async\n\t\t\t\t\t\t\t\tif ( jQuery.Deferred.getStackHook ) {\n\t\t\t\t\t\t\t\t\tprocess.stackTrace = jQuery.Deferred.getStackHook();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\twindow.setTimeout( process );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn jQuery.Deferred( function( newDefer ) {\n\n\t\t\t\t\t\t// progress_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 0 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onProgress ) ?\n\t\t\t\t\t\t\t\t\tonProgress :\n\t\t\t\t\t\t\t\t\tIdentity,\n\t\t\t\t\t\t\t\tnewDefer.notifyWith\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// fulfilled_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 1 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onFulfilled ) ?\n\t\t\t\t\t\t\t\t\tonFulfilled :\n\t\t\t\t\t\t\t\t\tIdentity\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\t// rejected_handlers.add( ... )\n\t\t\t\t\t\ttuples[ 2 ][ 3 ].add(\n\t\t\t\t\t\t\tresolve(\n\t\t\t\t\t\t\t\t0,\n\t\t\t\t\t\t\t\tnewDefer,\n\t\t\t\t\t\t\t\tisFunction( onRejected ) ?\n\t\t\t\t\t\t\t\t\tonRejected :\n\t\t\t\t\t\t\t\t\tThrower\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t);\n\t\t\t\t\t} ).promise();\n\t\t\t\t},\n\n\t\t\t\t// Get a promise for this deferred\n\t\t\t\t// If obj is provided, the promise aspect is added to the object\n\t\t\t\tpromise: function( obj ) {\n\t\t\t\t\treturn obj != null ? jQuery.extend( obj, promise ) : promise;\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeferred = {};\n\n\t\t// Add list-specific methods\n\t\tjQuery.each( tuples, function( i, tuple ) {\n\t\t\tvar list = tuple[ 2 ],\n\t\t\t\tstateString = tuple[ 5 ];\n\n\t\t\t// promise.progress = list.add\n\t\t\t// promise.done = list.add\n\t\t\t// promise.fail = list.add\n\t\t\tpromise[ tuple[ 1 ] ] = list.add;\n\n\t\t\t// Handle state\n\t\t\tif ( stateString ) {\n\t\t\t\tlist.add(\n\t\t\t\t\tfunction() {\n\n\t\t\t\t\t\t// state = \"resolved\" (i.e., fulfilled)\n\t\t\t\t\t\t// state = \"rejected\"\n\t\t\t\t\t\tstate = stateString;\n\t\t\t\t\t},\n\n\t\t\t\t\t// rejected_callbacks.disable\n\t\t\t\t\t// fulfilled_callbacks.disable\n\t\t\t\t\ttuples[ 3 - i ][ 2 ].disable,\n\n\t\t\t\t\t// rejected_handlers.disable\n\t\t\t\t\t// fulfilled_handlers.disable\n\t\t\t\t\ttuples[ 3 - i ][ 3 ].disable,\n\n\t\t\t\t\t// progress_callbacks.lock\n\t\t\t\t\ttuples[ 0 ][ 2 ].lock,\n\n\t\t\t\t\t// progress_handlers.lock\n\t\t\t\t\ttuples[ 0 ][ 3 ].lock\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// progress_handlers.fire\n\t\t\t// fulfilled_handlers.fire\n\t\t\t// rejected_handlers.fire\n\t\t\tlist.add( tuple[ 3 ].fire );\n\n\t\t\t// deferred.notify = function() { deferred.notifyWith(...) }\n\t\t\t// deferred.resolve = function() { deferred.resolveWith(...) }\n\t\t\t// deferred.reject = function() { deferred.rejectWith(...) }\n\t\t\tdeferred[ tuple[ 0 ] ] = function() {\n\t\t\t\tdeferred[ tuple[ 0 ] + \"With\" ]( this === deferred ? undefined : this, arguments );\n\t\t\t\treturn this;\n\t\t\t};\n\n\t\t\t// deferred.notifyWith = list.fireWith\n\t\t\t// deferred.resolveWith = list.fireWith\n\t\t\t// deferred.rejectWith = list.fireWith\n\t\t\tdeferred[ tuple[ 0 ] + \"With\" ] = list.fireWith;\n\t\t} );\n\n\t\t// Make the deferred a promise\n\t\tpromise.promise( deferred );\n\n\t\t// Call given func if any\n\t\tif ( func ) {\n\t\t\tfunc.call( deferred, deferred );\n\t\t}\n\n\t\t// All done!\n\t\treturn deferred;\n\t},\n\n\t// Deferred helper\n\twhen: function( singleValue ) {\n\t\tvar\n\n\t\t\t// count of uncompleted subordinates\n\t\t\tremaining = arguments.length,\n\n\t\t\t// count of unprocessed arguments\n\t\t\ti = remaining,\n\n\t\t\t// subordinate fulfillment data\n\t\t\tresolveContexts = Array( i ),\n\t\t\tresolveValues = slice.call( arguments ),\n\n\t\t\t// the primary Deferred\n\t\t\tprimary = jQuery.Deferred(),\n\n\t\t\t// subordinate callback factory\n\t\t\tupdateFunc = function( i ) {\n\t\t\t\treturn function( value ) {\n\t\t\t\t\tresolveContexts[ i ] = this;\n\t\t\t\t\tresolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;\n\t\t\t\t\tif ( !( --remaining ) ) {\n\t\t\t\t\t\tprimary.resolveWith( resolveContexts, resolveValues );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\n\t\t// Single- and empty arguments are adopted like Promise.resolve\n\t\tif ( remaining <= 1 ) {\n\t\t\tadoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,\n\t\t\t\t!remaining );\n\n\t\t\t// Use .then() to unwrap secondary thenables (cf. gh-3000)\n\t\t\tif ( primary.state() === \"pending\" ||\n\t\t\t\tisFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {\n\n\t\t\t\treturn primary.then();\n\t\t\t}\n\t\t}\n\n\t\t// Multiple arguments are aggregated like Promise.all array elements\n\t\twhile ( i-- ) {\n\t\t\tadoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );\n\t\t}\n\n\t\treturn primary.promise();\n\t}\n} );\n\n\n// These usually indicate a programmer mistake during development,\n// warn about them ASAP rather than swallowing them by default.\nvar rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;\n\njQuery.Deferred.exceptionHook = function( error, stack ) {\n\n\t// Support: IE 8 - 9 only\n\t// Console exists when dev tools are open, which can happen at any time\n\tif ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {\n\t\twindow.console.warn( \"jQuery.Deferred exception: \" + error.message, error.stack, stack );\n\t}\n};\n\n\n\n\njQuery.readyException = function( error ) {\n\twindow.setTimeout( function() {\n\t\tthrow error;\n\t} );\n};\n\n\n\n\n// The deferred used on DOM ready\nvar readyList = jQuery.Deferred();\n\njQuery.fn.ready = function( fn ) {\n\n\treadyList\n\t\t.then( fn )\n\n\t\t// Wrap jQuery.readyException in a function so that the lookup\n\t\t// happens at the time of error handling instead of callback\n\t\t// registration.\n\t\t.catch( function( error ) {\n\t\t\tjQuery.readyException( error );\n\t\t} );\n\n\treturn this;\n};\n\njQuery.extend( {\n\n\t// Is the DOM ready to be used? Set to true once it occurs.\n\tisReady: false,\n\n\t// A counter to track how many items to wait for before\n\t// the ready event fires. See trac-6781\n\treadyWait: 1,\n\n\t// Handle when the DOM is ready\n\tready: function( wait ) {\n\n\t\t// Abort if there are pending holds or we're already ready\n\t\tif ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remember that the DOM is ready\n\t\tjQuery.isReady = true;\n\n\t\t// If a normal DOM Ready event fired, decrement, and wait if need be\n\t\tif ( wait !== true && --jQuery.readyWait > 0 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there are functions bound, to execute\n\t\treadyList.resolveWith( document, [ jQuery ] );\n\t}\n} );\n\njQuery.ready.then = readyList.then;\n\n// The ready event handler and self cleanup method\nfunction completed() {\n\tdocument.removeEventListener( \"DOMContentLoaded\", completed );\n\twindow.removeEventListener( \"load\", completed );\n\tjQuery.ready();\n}\n\n// Catch cases where $(document).ready() is called\n// after the browser event has already occurred.\n// Support: IE <=9 - 10 only\n// Older IE sometimes signals \"interactive\" too soon\nif ( document.readyState === \"complete\" ||\n\t( document.readyState !== \"loading\" && !document.documentElement.doScroll ) ) {\n\n\t// Handle it asynchronously to allow scripts the opportunity to delay ready\n\twindow.setTimeout( jQuery.ready );\n\n} else {\n\n\t// Use the handy event callback\n\tdocument.addEventListener( \"DOMContentLoaded\", completed );\n\n\t// A fallback to window.onload, that will always work\n\twindow.addEventListener( \"load\", completed );\n}\n\n\n\n\n// Multifunctional method to get and set values of a collection\n// The value/s can optionally be executed if it's a function\nvar access = function( elems, fn, key, value, chainable, emptyGet, raw ) {\n\tvar i = 0,\n\t\tlen = elems.length,\n\t\tbulk = key == null;\n\n\t// Sets many values\n\tif ( toType( key ) === \"object\" ) {\n\t\tchainable = true;\n\t\tfor ( i in key ) {\n\t\t\taccess( elems, fn, i, key[ i ], true, emptyGet, raw );\n\t\t}\n\n\t// Sets one value\n\t} else if ( value !== undefined ) {\n\t\tchainable = true;\n\n\t\tif ( !isFunction( value ) ) {\n\t\t\traw = true;\n\t\t}\n\n\t\tif ( bulk ) {\n\n\t\t\t// Bulk operations run against the entire set\n\t\t\tif ( raw ) {\n\t\t\t\tfn.call( elems, value );\n\t\t\t\tfn = null;\n\n\t\t\t// ...except when executing function values\n\t\t\t} else {\n\t\t\t\tbulk = fn;\n\t\t\t\tfn = function( elem, _key, value ) {\n\t\t\t\t\treturn bulk.call( jQuery( elem ), value );\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif ( fn ) {\n\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\tfn(\n\t\t\t\t\telems[ i ], key, raw ?\n\t\t\t\t\t\tvalue :\n\t\t\t\t\t\tvalue.call( elems[ i ], i, fn( elems[ i ], key ) )\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( chainable ) {\n\t\treturn elems;\n\t}\n\n\t// Gets\n\tif ( bulk ) {\n\t\treturn fn.call( elems );\n\t}\n\n\treturn len ? fn( elems[ 0 ], key ) : emptyGet;\n};\n\n\n// Matches dashed string for camelizing\nvar rmsPrefix = /^-ms-/,\n\trdashAlpha = /-([a-z])/g;\n\n// Used by camelCase as callback to replace()\nfunction fcamelCase( _all, letter ) {\n\treturn letter.toUpperCase();\n}\n\n// Convert dashed to camelCase; used by the css and data modules\n// Support: IE <=9 - 11, Edge 12 - 15\n// Microsoft forgot to hump their vendor prefix (trac-9572)\nfunction camelCase( string ) {\n\treturn string.replace( rmsPrefix, \"ms-\" ).replace( rdashAlpha, fcamelCase );\n}\nvar acceptData = function( owner ) {\n\n\t// Accepts only:\n\t//  - Node\n\t//    - Node.ELEMENT_NODE\n\t//    - Node.DOCUMENT_NODE\n\t//  - Object\n\t//    - Any\n\treturn owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );\n};\n\n\n\n\nfunction Data() {\n\tthis.expando = jQuery.expando + Data.uid++;\n}\n\nData.uid = 1;\n\nData.prototype = {\n\n\tcache: function( owner ) {\n\n\t\t// Check if the owner object already has a cache\n\t\tvar value = owner[ this.expando ];\n\n\t\t// If not, create one\n\t\tif ( !value ) {\n\t\t\tvalue = {};\n\n\t\t\t// We can accept data for non-element nodes in modern browsers,\n\t\t\t// but we should not, see trac-8335.\n\t\t\t// Always return an empty object.\n\t\t\tif ( acceptData( owner ) ) {\n\n\t\t\t\t// If it is a node unlikely to be stringify-ed or looped over\n\t\t\t\t// use plain assignment\n\t\t\t\tif ( owner.nodeType ) {\n\t\t\t\t\towner[ this.expando ] = value;\n\n\t\t\t\t// Otherwise secure it in a non-enumerable property\n\t\t\t\t// configurable must be true to allow the property to be\n\t\t\t\t// deleted when data is removed\n\t\t\t\t} else {\n\t\t\t\t\tObject.defineProperty( owner, this.expando, {\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tconfigurable: true\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn value;\n\t},\n\tset: function( owner, data, value ) {\n\t\tvar prop,\n\t\t\tcache = this.cache( owner );\n\n\t\t// Handle: [ owner, key, value ] args\n\t\t// Always use camelCase key (gh-2257)\n\t\tif ( typeof data === \"string\" ) {\n\t\t\tcache[ camelCase( data ) ] = value;\n\n\t\t// Handle: [ owner, { properties } ] args\n\t\t} else {\n\n\t\t\t// Copy the properties one-by-one to the cache object\n\t\t\tfor ( prop in data ) {\n\t\t\t\tcache[ camelCase( prop ) ] = data[ prop ];\n\t\t\t}\n\t\t}\n\t\treturn cache;\n\t},\n\tget: function( owner, key ) {\n\t\treturn key === undefined ?\n\t\t\tthis.cache( owner ) :\n\n\t\t\t// Always use camelCase key (gh-2257)\n\t\t\towner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];\n\t},\n\taccess: function( owner, key, value ) {\n\n\t\t// In cases where either:\n\t\t//\n\t\t//   1. No key was specified\n\t\t//   2. A string key was specified, but no value provided\n\t\t//\n\t\t// Take the \"read\" path and allow the get method to determine\n\t\t// which value to return, respectively either:\n\t\t//\n\t\t//   1. The entire cache object\n\t\t//   2. The data stored at the key\n\t\t//\n\t\tif ( key === undefined ||\n\t\t\t\t( ( key && typeof key === \"string\" ) && value === undefined ) ) {\n\n\t\t\treturn this.get( owner, key );\n\t\t}\n\n\t\t// When the key is not a string, or both a key and value\n\t\t// are specified, set or extend (existing objects) with either:\n\t\t//\n\t\t//   1. An object of properties\n\t\t//   2. A key and value\n\t\t//\n\t\tthis.set( owner, key, value );\n\n\t\t// Since the \"set\" path can have two possible entry points\n\t\t// return the expected data based on which path was taken[*]\n\t\treturn value !== undefined ? value : key;\n\t},\n\tremove: function( owner, key ) {\n\t\tvar i,\n\t\t\tcache = owner[ this.expando ];\n\n\t\tif ( cache === undefined ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( key !== undefined ) {\n\n\t\t\t// Support array or space separated string of keys\n\t\t\tif ( Array.isArray( key ) ) {\n\n\t\t\t\t// If key is an array of keys...\n\t\t\t\t// We always set camelCase keys, so remove that.\n\t\t\t\tkey = key.map( camelCase );\n\t\t\t} else {\n\t\t\t\tkey = camelCase( key );\n\n\t\t\t\t// If a key with the spaces exists, use it.\n\t\t\t\t// Otherwise, create an array by matching non-whitespace\n\t\t\t\tkey = key in cache ?\n\t\t\t\t\t[ key ] :\n\t\t\t\t\t( key.match( rnothtmlwhite ) || [] );\n\t\t\t}\n\n\t\t\ti = key.length;\n\n\t\t\twhile ( i-- ) {\n\t\t\t\tdelete cache[ key[ i ] ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove the expando if there's no more data\n\t\tif ( key === undefined || jQuery.isEmptyObject( cache ) ) {\n\n\t\t\t// Support: Chrome <=35 - 45\n\t\t\t// Webkit & Blink performance suffers when deleting properties\n\t\t\t// from DOM nodes, so set to undefined instead\n\t\t\t// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)\n\t\t\tif ( owner.nodeType ) {\n\t\t\t\towner[ this.expando ] = undefined;\n\t\t\t} else {\n\t\t\t\tdelete owner[ this.expando ];\n\t\t\t}\n\t\t}\n\t},\n\thasData: function( owner ) {\n\t\tvar cache = owner[ this.expando ];\n\t\treturn cache !== undefined && !jQuery.isEmptyObject( cache );\n\t}\n};\nvar dataPriv = new Data();\n\nvar dataUser = new Data();\n\n\n\n//\tImplementation Summary\n//\n//\t1. Enforce API surface and semantic compatibility with 1.9.x branch\n//\t2. Improve the module's maintainability by reducing the storage\n//\t\tpaths to a single mechanism.\n//\t3. Use the same single mechanism to support \"private\" and \"user\" data.\n//\t4. _Never_ expose \"private\" data to user code (TODO: Drop _data, _removeData)\n//\t5. Avoid exposing implementation details on user objects (eg. expando properties)\n//\t6. Provide a clear path for implementation upgrade to WeakMap in 2014\n\nvar rbrace = /^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,\n\trmultiDash = /[A-Z]/g;\n\nfunction getData( data ) {\n\tif ( data === \"true\" ) {\n\t\treturn true;\n\t}\n\n\tif ( data === \"false\" ) {\n\t\treturn false;\n\t}\n\n\tif ( data === \"null\" ) {\n\t\treturn null;\n\t}\n\n\t// Only convert to a number if it doesn't change the string\n\tif ( data === +data + \"\" ) {\n\t\treturn +data;\n\t}\n\n\tif ( rbrace.test( data ) ) {\n\t\treturn JSON.parse( data );\n\t}\n\n\treturn data;\n}\n\nfunction dataAttr( elem, key, data ) {\n\tvar name;\n\n\t// If nothing was found internally, try to fetch any\n\t// data from the HTML5 data-* attribute\n\tif ( data === undefined && elem.nodeType === 1 ) {\n\t\tname = \"data-\" + key.replace( rmultiDash, \"-$&\" ).toLowerCase();\n\t\tdata = elem.getAttribute( name );\n\n\t\tif ( typeof data === \"string\" ) {\n\t\t\ttry {\n\t\t\t\tdata = getData( data );\n\t\t\t} catch ( e ) {}\n\n\t\t\t// Make sure we set the data so it isn't changed later\n\t\t\tdataUser.set( elem, key, data );\n\t\t} else {\n\t\t\tdata = undefined;\n\t\t}\n\t}\n\treturn data;\n}\n\njQuery.extend( {\n\thasData: function( elem ) {\n\t\treturn dataUser.hasData( elem ) || dataPriv.hasData( elem );\n\t},\n\n\tdata: function( elem, name, data ) {\n\t\treturn dataUser.access( elem, name, data );\n\t},\n\n\tremoveData: function( elem, name ) {\n\t\tdataUser.remove( elem, name );\n\t},\n\n\t// TODO: Now that all calls to _data and _removeData have been replaced\n\t// with direct calls to dataPriv methods, these can be deprecated.\n\t_data: function( elem, name, data ) {\n\t\treturn dataPriv.access( elem, name, data );\n\t},\n\n\t_removeData: function( elem, name ) {\n\t\tdataPriv.remove( elem, name );\n\t}\n} );\n\njQuery.fn.extend( {\n\tdata: function( key, value ) {\n\t\tvar i, name, data,\n\t\t\telem = this[ 0 ],\n\t\t\tattrs = elem && elem.attributes;\n\n\t\t// Gets all values\n\t\tif ( key === undefined ) {\n\t\t\tif ( this.length ) {\n\t\t\t\tdata = dataUser.get( elem );\n\n\t\t\t\tif ( elem.nodeType === 1 && !dataPriv.get( elem, \"hasDataAttrs\" ) ) {\n\t\t\t\t\ti = attrs.length;\n\t\t\t\t\twhile ( i-- ) {\n\n\t\t\t\t\t\t// Support: IE 11 only\n\t\t\t\t\t\t// The attrs elements can be null (trac-14894)\n\t\t\t\t\t\tif ( attrs[ i ] ) {\n\t\t\t\t\t\t\tname = attrs[ i ].name;\n\t\t\t\t\t\t\tif ( name.indexOf( \"data-\" ) === 0 ) {\n\t\t\t\t\t\t\t\tname = camelCase( name.slice( 5 ) );\n\t\t\t\t\t\t\t\tdataAttr( elem, name, data[ name ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tdataPriv.set( elem, \"hasDataAttrs\", true );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn data;\n\t\t}\n\n\t\t// Sets multiple values\n\t\tif ( typeof key === \"object\" ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tdataUser.set( this, key );\n\t\t\t} );\n\t\t}\n\n\t\treturn access( this, function( value ) {\n\t\t\tvar data;\n\n\t\t\t// The calling jQuery object (element matches) is not empty\n\t\t\t// (and therefore has an element appears at this[ 0 ]) and the\n\t\t\t// `value` parameter was not undefined. An empty jQuery object\n\t\t\t// will result in `undefined` for elem = this[ 0 ] which will\n\t\t\t// throw an exception if an attempt to read a data cache is made.\n\t\t\tif ( elem && value === undefined ) {\n\n\t\t\t\t// Attempt to get data from the cache\n\t\t\t\t// The key will always be camelCased in Data\n\t\t\t\tdata = dataUser.get( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// Attempt to \"discover\" the data in\n\t\t\t\t// HTML5 custom data-* attrs\n\t\t\t\tdata = dataAttr( elem, key );\n\t\t\t\tif ( data !== undefined ) {\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\n\t\t\t\t// We tried really hard, but the data doesn't exist.\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Set the data...\n\t\t\tthis.each( function() {\n\n\t\t\t\t// We always store the camelCased key\n\t\t\t\tdataUser.set( this, key, value );\n\t\t\t} );\n\t\t}, null, value, arguments.length > 1, null, true );\n\t},\n\n\tremoveData: function( key ) {\n\t\treturn this.each( function() {\n\t\t\tdataUser.remove( this, key );\n\t\t} );\n\t}\n} );\n\n\njQuery.extend( {\n\tqueue: function( elem, type, data ) {\n\t\tvar queue;\n\n\t\tif ( elem ) {\n\t\t\ttype = ( type || \"fx\" ) + \"queue\";\n\t\t\tqueue = dataPriv.get( elem, type );\n\n\t\t\t// Speed up dequeue by getting out quickly if this is just a lookup\n\t\t\tif ( data ) {\n\t\t\t\tif ( !queue || Array.isArray( data ) ) {\n\t\t\t\t\tqueue = dataPriv.access( elem, type, jQuery.makeArray( data ) );\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push( data );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn queue || [];\n\t\t}\n\t},\n\n\tdequeue: function( elem, type ) {\n\t\ttype = type || \"fx\";\n\n\t\tvar queue = jQuery.queue( elem, type ),\n\t\t\tstartLength = queue.length,\n\t\t\tfn = queue.shift(),\n\t\t\thooks = jQuery._queueHooks( elem, type ),\n\t\t\tnext = function() {\n\t\t\t\tjQuery.dequeue( elem, type );\n\t\t\t};\n\n\t\t// If the fx queue is dequeued, always remove the progress sentinel\n\t\tif ( fn === \"inprogress\" ) {\n\t\t\tfn = queue.shift();\n\t\t\tstartLength--;\n\t\t}\n\n\t\tif ( fn ) {\n\n\t\t\t// Add a progress sentinel to prevent the fx queue from being\n\t\t\t// automatically dequeued\n\t\t\tif ( type === \"fx\" ) {\n\t\t\t\tqueue.unshift( \"inprogress\" );\n\t\t\t}\n\n\t\t\t// Clear up the last queue stop function\n\t\t\tdelete hooks.stop;\n\t\t\tfn.call( elem, next, hooks );\n\t\t}\n\n\t\tif ( !startLength && hooks ) {\n\t\t\thooks.empty.fire();\n\t\t}\n\t},\n\n\t// Not public - generate a queueHooks object, or return the current one\n\t_queueHooks: function( elem, type ) {\n\t\tvar key = type + \"queueHooks\";\n\t\treturn dataPriv.get( elem, key ) || dataPriv.access( elem, key, {\n\t\t\tempty: jQuery.Callbacks( \"once memory\" ).add( function() {\n\t\t\t\tdataPriv.remove( elem, [ type + \"queue\", key ] );\n\t\t\t} )\n\t\t} );\n\t}\n} );\n\njQuery.fn.extend( {\n\tqueue: function( type, data ) {\n\t\tvar setter = 2;\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tdata = type;\n\t\t\ttype = \"fx\";\n\t\t\tsetter--;\n\t\t}\n\n\t\tif ( arguments.length < setter ) {\n\t\t\treturn jQuery.queue( this[ 0 ], type );\n\t\t}\n\n\t\treturn data === undefined ?\n\t\t\tthis :\n\t\t\tthis.each( function() {\n\t\t\t\tvar queue = jQuery.queue( this, type, data );\n\n\t\t\t\t// Ensure a hooks for this queue\n\t\t\t\tjQuery._queueHooks( this, type );\n\n\t\t\t\tif ( type === \"fx\" && queue[ 0 ] !== \"inprogress\" ) {\n\t\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t\t}\n\t\t\t} );\n\t},\n\tdequeue: function( type ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.dequeue( this, type );\n\t\t} );\n\t},\n\tclearQueue: function( type ) {\n\t\treturn this.queue( type || \"fx\", [] );\n\t},\n\n\t// Get a promise resolved when queues of a certain type\n\t// are emptied (fx is the type by default)\n\tpromise: function( type, obj ) {\n\t\tvar tmp,\n\t\t\tcount = 1,\n\t\t\tdefer = jQuery.Deferred(),\n\t\t\telements = this,\n\t\t\ti = this.length,\n\t\t\tresolve = function() {\n\t\t\t\tif ( !( --count ) ) {\n\t\t\t\t\tdefer.resolveWith( elements, [ elements ] );\n\t\t\t\t}\n\t\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tobj = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\ttype = type || \"fx\";\n\n\t\twhile ( i-- ) {\n\t\t\ttmp = dataPriv.get( elements[ i ], type + \"queueHooks\" );\n\t\t\tif ( tmp && tmp.empty ) {\n\t\t\t\tcount++;\n\t\t\t\ttmp.empty.add( resolve );\n\t\t\t}\n\t\t}\n\t\tresolve();\n\t\treturn defer.promise( obj );\n\t}\n} );\nvar pnum = ( /[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/ ).source;\n\nvar rcssNum = new RegExp( \"^(?:([+-])=|)(\" + pnum + \")([a-z%]*)$\", \"i\" );\n\n\nvar cssExpand = [ \"Top\", \"Right\", \"Bottom\", \"Left\" ];\n\nvar documentElement = document.documentElement;\n\n\n\n\tvar isAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem );\n\t\t},\n\t\tcomposed = { composed: true };\n\n\t// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only\n\t// Check attachment across shadow DOM boundaries when possible (gh-3504)\n\t// Support: iOS 10.0-10.2 only\n\t// Early iOS 10 versions support `attachShadow` but not `getRootNode`,\n\t// leading to errors. We need to check for `getRootNode`.\n\tif ( documentElement.getRootNode ) {\n\t\tisAttached = function( elem ) {\n\t\t\treturn jQuery.contains( elem.ownerDocument, elem ) ||\n\t\t\t\telem.getRootNode( composed ) === elem.ownerDocument;\n\t\t};\n\t}\nvar isHiddenWithinTree = function( elem, el ) {\n\n\t\t// isHiddenWithinTree might be called from jQuery#filter function;\n\t\t// in that case, element will be second argument\n\t\telem = el || elem;\n\n\t\t// Inline style trumps all\n\t\treturn elem.style.display === \"none\" ||\n\t\t\telem.style.display === \"\" &&\n\n\t\t\t// Otherwise, check computed style\n\t\t\t// Support: Firefox <=43 - 45\n\t\t\t// Disconnected elements can have computed display: none, so first confirm that elem is\n\t\t\t// in the document.\n\t\t\tisAttached( elem ) &&\n\n\t\t\tjQuery.css( elem, \"display\" ) === \"none\";\n\t};\n\n\n\nfunction adjustCSS( elem, prop, valueParts, tween ) {\n\tvar adjusted, scale,\n\t\tmaxIterations = 20,\n\t\tcurrentValue = tween ?\n\t\t\tfunction() {\n\t\t\t\treturn tween.cur();\n\t\t\t} :\n\t\t\tfunction() {\n\t\t\t\treturn jQuery.css( elem, prop, \"\" );\n\t\t\t},\n\t\tinitial = currentValue(),\n\t\tunit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" ),\n\n\t\t// Starting value computation is required for potential unit mismatches\n\t\tinitialInUnit = elem.nodeType &&\n\t\t\t( jQuery.cssNumber[ prop ] || unit !== \"px\" && +initial ) &&\n\t\t\trcssNum.exec( jQuery.css( elem, prop ) );\n\n\tif ( initialInUnit && initialInUnit[ 3 ] !== unit ) {\n\n\t\t// Support: Firefox <=54\n\t\t// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)\n\t\tinitial = initial / 2;\n\n\t\t// Trust units reported by jQuery.css\n\t\tunit = unit || initialInUnit[ 3 ];\n\n\t\t// Iteratively approximate from a nonzero starting point\n\t\tinitialInUnit = +initial || 1;\n\n\t\twhile ( maxIterations-- ) {\n\n\t\t\t// Evaluate and update our best guess (doubling guesses that zero out).\n\t\t\t// Finish if the scale equals or crosses 1 (making the old*new product non-positive).\n\t\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\t\t\tif ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {\n\t\t\t\tmaxIterations = 0;\n\t\t\t}\n\t\t\tinitialInUnit = initialInUnit / scale;\n\n\t\t}\n\n\t\tinitialInUnit = initialInUnit * 2;\n\t\tjQuery.style( elem, prop, initialInUnit + unit );\n\n\t\t// Make sure we update the tween properties later on\n\t\tvalueParts = valueParts || [];\n\t}\n\n\tif ( valueParts ) {\n\t\tinitialInUnit = +initialInUnit || +initial || 0;\n\n\t\t// Apply relative offset (+=/-=) if specified\n\t\tadjusted = valueParts[ 1 ] ?\n\t\t\tinitialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :\n\t\t\t+valueParts[ 2 ];\n\t\tif ( tween ) {\n\t\t\ttween.unit = unit;\n\t\t\ttween.start = initialInUnit;\n\t\t\ttween.end = adjusted;\n\t\t}\n\t}\n\treturn adjusted;\n}\n\n\nvar defaultDisplayMap = {};\n\nfunction getDefaultDisplay( elem ) {\n\tvar temp,\n\t\tdoc = elem.ownerDocument,\n\t\tnodeName = elem.nodeName,\n\t\tdisplay = defaultDisplayMap[ nodeName ];\n\n\tif ( display ) {\n\t\treturn display;\n\t}\n\n\ttemp = doc.body.appendChild( doc.createElement( nodeName ) );\n\tdisplay = jQuery.css( temp, \"display\" );\n\n\ttemp.parentNode.removeChild( temp );\n\n\tif ( display === \"none\" ) {\n\t\tdisplay = \"block\";\n\t}\n\tdefaultDisplayMap[ nodeName ] = display;\n\n\treturn display;\n}\n\nfunction showHide( elements, show ) {\n\tvar display, elem,\n\t\tvalues = [],\n\t\tindex = 0,\n\t\tlength = elements.length;\n\n\t// Determine new display value for elements that need to change\n\tfor ( ; index < length; index++ ) {\n\t\telem = elements[ index ];\n\t\tif ( !elem.style ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tdisplay = elem.style.display;\n\t\tif ( show ) {\n\n\t\t\t// Since we force visibility upon cascade-hidden elements, an immediate (and slow)\n\t\t\t// check is required in this first loop unless we have a nonempty display value (either\n\t\t\t// inline or about-to-be-restored)\n\t\t\tif ( display === \"none\" ) {\n\t\t\t\tvalues[ index ] = dataPriv.get( elem, \"display\" ) || null;\n\t\t\t\tif ( !values[ index ] ) {\n\t\t\t\t\telem.style.display = \"\";\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( elem.style.display === \"\" && isHiddenWithinTree( elem ) ) {\n\t\t\t\tvalues[ index ] = getDefaultDisplay( elem );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( display !== \"none\" ) {\n\t\t\t\tvalues[ index ] = \"none\";\n\n\t\t\t\t// Remember what we're overwriting\n\t\t\t\tdataPriv.set( elem, \"display\", display );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Set the display of the elements in a second loop to avoid constant reflow\n\tfor ( index = 0; index < length; index++ ) {\n\t\tif ( values[ index ] != null ) {\n\t\t\telements[ index ].style.display = values[ index ];\n\t\t}\n\t}\n\n\treturn elements;\n}\n\njQuery.fn.extend( {\n\tshow: function() {\n\t\treturn showHide( this, true );\n\t},\n\thide: function() {\n\t\treturn showHide( this );\n\t},\n\ttoggle: function( state ) {\n\t\tif ( typeof state === \"boolean\" ) {\n\t\t\treturn state ? this.show() : this.hide();\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tif ( isHiddenWithinTree( this ) ) {\n\t\t\t\tjQuery( this ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( this ).hide();\n\t\t\t}\n\t\t} );\n\t}\n} );\nvar rcheckableType = ( /^(?:checkbox|radio)$/i );\n\nvar rtagName = ( /<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i );\n\nvar rscriptType = ( /^$|^module$|\\/(?:java|ecma)script/i );\n\n\n\n( function() {\n\tvar fragment = document.createDocumentFragment(),\n\t\tdiv = fragment.appendChild( document.createElement( \"div\" ) ),\n\t\tinput = document.createElement( \"input\" );\n\n\t// Support: Android 4.0 - 4.3 only\n\t// Check state lost if the name is set (trac-11217)\n\t// Support: Windows Web Apps (WWA)\n\t// `name` and `type` must use .setAttribute for WWA (trac-14901)\n\tinput.setAttribute( \"type\", \"radio\" );\n\tinput.setAttribute( \"checked\", \"checked\" );\n\tinput.setAttribute( \"name\", \"t\" );\n\n\tdiv.appendChild( input );\n\n\t// Support: Android <=4.1 only\n\t// Older WebKit doesn't clone checked state correctly in fragments\n\tsupport.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;\n\n\t// Support: IE <=11 only\n\t// Make sure textarea (and checkbox) defaultValue is properly cloned\n\tdiv.innerHTML = \"<textarea>x</textarea>\";\n\tsupport.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;\n\n\t// Support: IE <=9 only\n\t// IE <=9 replaces <option> tags with their contents when inserted outside of\n\t// the select element.\n\tdiv.innerHTML = \"<option></option>\";\n\tsupport.option = !!div.lastChild;\n} )();\n\n\n// We have to close these tags to support XHTML (trac-13200)\nvar wrapMap = {\n\n\t// XHTML parsers do not magically insert elements in the\n\t// same way that tag soup parsers do. So we cannot shorten\n\t// this by omitting <tbody> or other required elements.\n\tthead: [ 1, \"<table>\", \"</table>\" ],\n\tcol: [ 2, \"<table><colgroup>\", \"</colgroup></table>\" ],\n\ttr: [ 2, \"<table><tbody>\", \"</tbody></table>\" ],\n\ttd: [ 3, \"<table><tbody><tr>\", \"</tr></tbody></table>\" ],\n\n\t_default: [ 0, \"\", \"\" ]\n};\n\nwrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;\nwrapMap.th = wrapMap.td;\n\n// Support: IE <=9 only\nif ( !support.option ) {\n\twrapMap.optgroup = wrapMap.option = [ 1, \"<select multiple='multiple'>\", \"</select>\" ];\n}\n\n\nfunction getAll( context, tag ) {\n\n\t// Support: IE <=9 - 11 only\n\t// Use typeof to avoid zero-argument method invocation on host objects (trac-15151)\n\tvar ret;\n\n\tif ( typeof context.getElementsByTagName !== \"undefined\" ) {\n\t\tret = context.getElementsByTagName( tag || \"*\" );\n\n\t} else if ( typeof context.querySelectorAll !== \"undefined\" ) {\n\t\tret = context.querySelectorAll( tag || \"*\" );\n\n\t} else {\n\t\tret = [];\n\t}\n\n\tif ( tag === undefined || tag && nodeName( context, tag ) ) {\n\t\treturn jQuery.merge( [ context ], ret );\n\t}\n\n\treturn ret;\n}\n\n\n// Mark scripts as having already been evaluated\nfunction setGlobalEval( elems, refElements ) {\n\tvar i = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\tdataPriv.set(\n\t\t\telems[ i ],\n\t\t\t\"globalEval\",\n\t\t\t!refElements || dataPriv.get( refElements[ i ], \"globalEval\" )\n\t\t);\n\t}\n}\n\n\nvar rhtml = /<|&#?\\w+;/;\n\nfunction buildFragment( elems, context, scripts, selection, ignored ) {\n\tvar elem, tmp, tag, wrap, attached, j,\n\t\tfragment = context.createDocumentFragment(),\n\t\tnodes = [],\n\t\ti = 0,\n\t\tl = elems.length;\n\n\tfor ( ; i < l; i++ ) {\n\t\telem = elems[ i ];\n\n\t\tif ( elem || elem === 0 ) {\n\n\t\t\t// Add nodes directly\n\t\t\tif ( toType( elem ) === \"object\" ) {\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );\n\n\t\t\t// Convert non-html into a text node\n\t\t\t} else if ( !rhtml.test( elem ) ) {\n\t\t\t\tnodes.push( context.createTextNode( elem ) );\n\n\t\t\t// Convert html into DOM nodes\n\t\t\t} else {\n\t\t\t\ttmp = tmp || fragment.appendChild( context.createElement( \"div\" ) );\n\n\t\t\t\t// Deserialize a standard representation\n\t\t\t\ttag = ( rtagName.exec( elem ) || [ \"\", \"\" ] )[ 1 ].toLowerCase();\n\t\t\t\twrap = wrapMap[ tag ] || wrapMap._default;\n\t\t\t\ttmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];\n\n\t\t\t\t// Descend through wrappers to the right content\n\t\t\t\tj = wrap[ 0 ];\n\t\t\t\twhile ( j-- ) {\n\t\t\t\t\ttmp = tmp.lastChild;\n\t\t\t\t}\n\n\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\tjQuery.merge( nodes, tmp.childNodes );\n\n\t\t\t\t// Remember the top-level container\n\t\t\t\ttmp = fragment.firstChild;\n\n\t\t\t\t// Ensure the created nodes are orphaned (trac-12392)\n\t\t\t\ttmp.textContent = \"\";\n\t\t\t}\n\t\t}\n\t}\n\n\t// Remove wrapper from fragment\n\tfragment.textContent = \"\";\n\n\ti = 0;\n\twhile ( ( elem = nodes[ i++ ] ) ) {\n\n\t\t// Skip elements already in the context collection (trac-4087)\n\t\tif ( selection && jQuery.inArray( elem, selection ) > -1 ) {\n\t\t\tif ( ignored ) {\n\t\t\t\tignored.push( elem );\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\n\t\tattached = isAttached( elem );\n\n\t\t// Append to fragment\n\t\ttmp = getAll( fragment.appendChild( elem ), \"script\" );\n\n\t\t// Preserve script evaluation history\n\t\tif ( attached ) {\n\t\t\tsetGlobalEval( tmp );\n\t\t}\n\n\t\t// Capture executables\n\t\tif ( scripts ) {\n\t\t\tj = 0;\n\t\t\twhile ( ( elem = tmp[ j++ ] ) ) {\n\t\t\t\tif ( rscriptType.test( elem.type || \"\" ) ) {\n\t\t\t\t\tscripts.push( elem );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn fragment;\n}\n\n\nvar rtypenamespace = /^([^.]*)(?:\\.(.+)|)/;\n\nfunction returnTrue() {\n\treturn true;\n}\n\nfunction returnFalse() {\n\treturn false;\n}\n\n// Support: IE <=9 - 11+\n// focus() and blur() are asynchronous, except when they are no-op.\n// So expect focus to be synchronous when the element is already active,\n// and blur to be synchronous when the element is not already active.\n// (focus and blur are always synchronous in other supported browsers,\n// this just defines when we can count on it).\nfunction expectSync( elem, type ) {\n\treturn ( elem === safeActiveElement() ) === ( type === \"focus\" );\n}\n\n// Support: IE <=9 only\n// Accessing document.activeElement can throw unexpectedly\n// https://bugs.jquery.com/ticket/13393\nfunction safeActiveElement() {\n\ttry {\n\t\treturn document.activeElement;\n\t} catch ( err ) { }\n}\n\nfunction on( elem, types, selector, data, fn, one ) {\n\tvar origFn, type;\n\n\t// Types can be a map of types/handlers\n\tif ( typeof types === \"object\" ) {\n\n\t\t// ( types-Object, selector, data )\n\t\tif ( typeof selector !== \"string\" ) {\n\n\t\t\t// ( types-Object, data )\n\t\t\tdata = data || selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tfor ( type in types ) {\n\t\t\ton( elem, type, selector, data, types[ type ], one );\n\t\t}\n\t\treturn elem;\n\t}\n\n\tif ( data == null && fn == null ) {\n\n\t\t// ( types, fn )\n\t\tfn = selector;\n\t\tdata = selector = undefined;\n\t} else if ( fn == null ) {\n\t\tif ( typeof selector === \"string\" ) {\n\n\t\t\t// ( types, selector, fn )\n\t\t\tfn = data;\n\t\t\tdata = undefined;\n\t\t} else {\n\n\t\t\t// ( types, data, fn )\n\t\t\tfn = data;\n\t\t\tdata = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t}\n\tif ( fn === false ) {\n\t\tfn = returnFalse;\n\t} else if ( !fn ) {\n\t\treturn elem;\n\t}\n\n\tif ( one === 1 ) {\n\t\torigFn = fn;\n\t\tfn = function( event ) {\n\n\t\t\t// Can use an empty set, since event contains the info\n\t\t\tjQuery().off( event );\n\t\t\treturn origFn.apply( this, arguments );\n\t\t};\n\n\t\t// Use same guid so caller can remove using origFn\n\t\tfn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );\n\t}\n\treturn elem.each( function() {\n\t\tjQuery.event.add( this, types, fn, data, selector );\n\t} );\n}\n\n/*\n * Helper functions for managing events -- not part of the public interface.\n * Props to Dean Edwards' addEvent library for many of the ideas.\n */\njQuery.event = {\n\n\tglobal: {},\n\n\tadd: function( elem, types, handler, data, selector ) {\n\n\t\tvar handleObjIn, eventHandle, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.get( elem );\n\n\t\t// Only attach events to objects that accept data\n\t\tif ( !acceptData( elem ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Caller can pass in an object of custom data in lieu of the handler\n\t\tif ( handler.handler ) {\n\t\t\thandleObjIn = handler;\n\t\t\thandler = handleObjIn.handler;\n\t\t\tselector = handleObjIn.selector;\n\t\t}\n\n\t\t// Ensure that invalid selectors throw exceptions at attach time\n\t\t// Evaluate against documentElement in case elem is a non-element node (e.g., document)\n\t\tif ( selector ) {\n\t\t\tjQuery.find.matchesSelector( documentElement, selector );\n\t\t}\n\n\t\t// Make sure that the handler has a unique ID, used to find/remove it later\n\t\tif ( !handler.guid ) {\n\t\t\thandler.guid = jQuery.guid++;\n\t\t}\n\n\t\t// Init the element's event structure and main handler, if this is the first\n\t\tif ( !( events = elemData.events ) ) {\n\t\t\tevents = elemData.events = Object.create( null );\n\t\t}\n\t\tif ( !( eventHandle = elemData.handle ) ) {\n\t\t\teventHandle = elemData.handle = function( e ) {\n\n\t\t\t\t// Discard the second event of a jQuery.event.trigger() and\n\t\t\t\t// when an event is called after a page has unloaded\n\t\t\t\treturn typeof jQuery !== \"undefined\" && jQuery.event.triggered !== e.type ?\n\t\t\t\t\tjQuery.event.dispatch.apply( elem, arguments ) : undefined;\n\t\t\t};\n\t\t}\n\n\t\t// Handle multiple events separated by a space\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// There *must* be a type, no attaching namespace-only handlers\n\t\t\tif ( !type ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If event changes its type, use the special event handlers for the changed type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// If selector defined, determine special event api type, otherwise given type\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\n\t\t\t// Update special based on newly reset type\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\n\t\t\t// handleObj is passed to all event handlers\n\t\t\thandleObj = jQuery.extend( {\n\t\t\t\ttype: type,\n\t\t\t\torigType: origType,\n\t\t\t\tdata: data,\n\t\t\t\thandler: handler,\n\t\t\t\tguid: handler.guid,\n\t\t\t\tselector: selector,\n\t\t\t\tneedsContext: selector && jQuery.expr.match.needsContext.test( selector ),\n\t\t\t\tnamespace: namespaces.join( \".\" )\n\t\t\t}, handleObjIn );\n\n\t\t\t// Init the event handler queue if we're the first\n\t\t\tif ( !( handlers = events[ type ] ) ) {\n\t\t\t\thandlers = events[ type ] = [];\n\t\t\t\thandlers.delegateCount = 0;\n\n\t\t\t\t// Only use addEventListener if the special events handler returns false\n\t\t\t\tif ( !special.setup ||\n\t\t\t\t\tspecial.setup.call( elem, data, namespaces, eventHandle ) === false ) {\n\n\t\t\t\t\tif ( elem.addEventListener ) {\n\t\t\t\t\t\telem.addEventListener( type, eventHandle );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( special.add ) {\n\t\t\t\tspecial.add.call( elem, handleObj );\n\n\t\t\t\tif ( !handleObj.handler.guid ) {\n\t\t\t\t\thandleObj.handler.guid = handler.guid;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add to the element's handler list, delegates in front\n\t\t\tif ( selector ) {\n\t\t\t\thandlers.splice( handlers.delegateCount++, 0, handleObj );\n\t\t\t} else {\n\t\t\t\thandlers.push( handleObj );\n\t\t\t}\n\n\t\t\t// Keep track of which events have ever been used, for event optimization\n\t\t\tjQuery.event.global[ type ] = true;\n\t\t}\n\n\t},\n\n\t// Detach an event or set of events from an element\n\tremove: function( elem, types, handler, selector, mappedTypes ) {\n\n\t\tvar j, origCount, tmp,\n\t\t\tevents, t, handleObj,\n\t\t\tspecial, handlers, type, namespaces, origType,\n\t\t\telemData = dataPriv.hasData( elem ) && dataPriv.get( elem );\n\n\t\tif ( !elemData || !( events = elemData.events ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Once for each type.namespace in types; type may be omitted\n\t\ttypes = ( types || \"\" ).match( rnothtmlwhite ) || [ \"\" ];\n\t\tt = types.length;\n\t\twhile ( t-- ) {\n\t\t\ttmp = rtypenamespace.exec( types[ t ] ) || [];\n\t\t\ttype = origType = tmp[ 1 ];\n\t\t\tnamespaces = ( tmp[ 2 ] || \"\" ).split( \".\" ).sort();\n\n\t\t\t// Unbind all events (on this namespace, if provided) for the element\n\t\t\tif ( !type ) {\n\t\t\t\tfor ( type in events ) {\n\t\t\t\t\tjQuery.event.remove( elem, type + types[ t ], handler, selector, true );\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tspecial = jQuery.event.special[ type ] || {};\n\t\t\ttype = ( selector ? special.delegateType : special.bindType ) || type;\n\t\t\thandlers = events[ type ] || [];\n\t\t\ttmp = tmp[ 2 ] &&\n\t\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" );\n\n\t\t\t// Remove matching events\n\t\t\torigCount = j = handlers.length;\n\t\t\twhile ( j-- ) {\n\t\t\t\thandleObj = handlers[ j ];\n\n\t\t\t\tif ( ( mappedTypes || origType === handleObj.origType ) &&\n\t\t\t\t\t( !handler || handler.guid === handleObj.guid ) &&\n\t\t\t\t\t( !tmp || tmp.test( handleObj.namespace ) ) &&\n\t\t\t\t\t( !selector || selector === handleObj.selector ||\n\t\t\t\t\t\tselector === \"**\" && handleObj.selector ) ) {\n\t\t\t\t\thandlers.splice( j, 1 );\n\n\t\t\t\t\tif ( handleObj.selector ) {\n\t\t\t\t\t\thandlers.delegateCount--;\n\t\t\t\t\t}\n\t\t\t\t\tif ( special.remove ) {\n\t\t\t\t\t\tspecial.remove.call( elem, handleObj );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Remove generic event handler if we removed something and no more handlers exist\n\t\t\t// (avoids potential for endless recursion during removal of special event handlers)\n\t\t\tif ( origCount && !handlers.length ) {\n\t\t\t\tif ( !special.teardown ||\n\t\t\t\t\tspecial.teardown.call( elem, namespaces, elemData.handle ) === false ) {\n\n\t\t\t\t\tjQuery.removeEvent( elem, type, elemData.handle );\n\t\t\t\t}\n\n\t\t\t\tdelete events[ type ];\n\t\t\t}\n\t\t}\n\n\t\t// Remove data and the expando if it's no longer used\n\t\tif ( jQuery.isEmptyObject( events ) ) {\n\t\t\tdataPriv.remove( elem, \"handle events\" );\n\t\t}\n\t},\n\n\tdispatch: function( nativeEvent ) {\n\n\t\tvar i, j, ret, matched, handleObj, handlerQueue,\n\t\t\targs = new Array( arguments.length ),\n\n\t\t\t// Make a writable jQuery.Event from the native event object\n\t\t\tevent = jQuery.event.fix( nativeEvent ),\n\n\t\t\thandlers = (\n\t\t\t\tdataPriv.get( this, \"events\" ) || Object.create( null )\n\t\t\t)[ event.type ] || [],\n\t\t\tspecial = jQuery.event.special[ event.type ] || {};\n\n\t\t// Use the fix-ed jQuery.Event rather than the (read-only) native event\n\t\targs[ 0 ] = event;\n\n\t\tfor ( i = 1; i < arguments.length; i++ ) {\n\t\t\targs[ i ] = arguments[ i ];\n\t\t}\n\n\t\tevent.delegateTarget = this;\n\n\t\t// Call the preDispatch hook for the mapped type, and let it bail if desired\n\t\tif ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine handlers\n\t\thandlerQueue = jQuery.event.handlers.call( this, event, handlers );\n\n\t\t// Run delegates first; they may want to stop propagation beneath us\n\t\ti = 0;\n\t\twhile ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tevent.currentTarget = matched.elem;\n\n\t\t\tj = 0;\n\t\t\twhile ( ( handleObj = matched.handlers[ j++ ] ) &&\n\t\t\t\t!event.isImmediatePropagationStopped() ) {\n\n\t\t\t\t// If the event is namespaced, then each handler is only invoked if it is\n\t\t\t\t// specially universal or its namespaces are a superset of the event's.\n\t\t\t\tif ( !event.rnamespace || handleObj.namespace === false ||\n\t\t\t\t\tevent.rnamespace.test( handleObj.namespace ) ) {\n\n\t\t\t\t\tevent.handleObj = handleObj;\n\t\t\t\t\tevent.data = handleObj.data;\n\n\t\t\t\t\tret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||\n\t\t\t\t\t\thandleObj.handler ).apply( matched.elem, args );\n\n\t\t\t\t\tif ( ret !== undefined ) {\n\t\t\t\t\t\tif ( ( event.result = ret ) === false ) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Call the postDispatch hook for the mapped type\n\t\tif ( special.postDispatch ) {\n\t\t\tspecial.postDispatch.call( this, event );\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\thandlers: function( event, handlers ) {\n\t\tvar i, handleObj, sel, matchedHandlers, matchedSelectors,\n\t\t\thandlerQueue = [],\n\t\t\tdelegateCount = handlers.delegateCount,\n\t\t\tcur = event.target;\n\n\t\t// Find delegate handlers\n\t\tif ( delegateCount &&\n\n\t\t\t// Support: IE <=9\n\t\t\t// Black-hole SVG <use> instance trees (trac-13180)\n\t\t\tcur.nodeType &&\n\n\t\t\t// Support: Firefox <=42\n\t\t\t// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)\n\t\t\t// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click\n\t\t\t// Support: IE 11 only\n\t\t\t// ...but not arrow key \"clicks\" of radio inputs, which can have `button` -1 (gh-2343)\n\t\t\t!( event.type === \"click\" && event.button >= 1 ) ) {\n\n\t\t\tfor ( ; cur !== this; cur = cur.parentNode || this ) {\n\n\t\t\t\t// Don't check non-elements (trac-13208)\n\t\t\t\t// Don't process clicks on disabled elements (trac-6911, trac-8165, trac-11382, trac-11764)\n\t\t\t\tif ( cur.nodeType === 1 && !( event.type === \"click\" && cur.disabled === true ) ) {\n\t\t\t\t\tmatchedHandlers = [];\n\t\t\t\t\tmatchedSelectors = {};\n\t\t\t\t\tfor ( i = 0; i < delegateCount; i++ ) {\n\t\t\t\t\t\thandleObj = handlers[ i ];\n\n\t\t\t\t\t\t// Don't conflict with Object.prototype properties (trac-13203)\n\t\t\t\t\t\tsel = handleObj.selector + \" \";\n\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] === undefined ) {\n\t\t\t\t\t\t\tmatchedSelectors[ sel ] = handleObj.needsContext ?\n\t\t\t\t\t\t\t\tjQuery( sel, this ).index( cur ) > -1 :\n\t\t\t\t\t\t\t\tjQuery.find( sel, this, null, [ cur ] ).length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( matchedSelectors[ sel ] ) {\n\t\t\t\t\t\t\tmatchedHandlers.push( handleObj );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif ( matchedHandlers.length ) {\n\t\t\t\t\t\thandlerQueue.push( { elem: cur, handlers: matchedHandlers } );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add the remaining (directly-bound) handlers\n\t\tcur = this;\n\t\tif ( delegateCount < handlers.length ) {\n\t\t\thandlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );\n\t\t}\n\n\t\treturn handlerQueue;\n\t},\n\n\taddProp: function( name, hook ) {\n\t\tObject.defineProperty( jQuery.Event.prototype, name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\n\t\t\tget: isFunction( hook ) ?\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn hook( this.originalEvent );\n\t\t\t\t\t}\n\t\t\t\t} :\n\t\t\t\tfunction() {\n\t\t\t\t\tif ( this.originalEvent ) {\n\t\t\t\t\t\treturn this.originalEvent[ name ];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\tset: function( value ) {\n\t\t\t\tObject.defineProperty( this, name, {\n\t\t\t\t\tenumerable: true,\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true,\n\t\t\t\t\tvalue: value\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t},\n\n\tfix: function( originalEvent ) {\n\t\treturn originalEvent[ jQuery.expando ] ?\n\t\t\toriginalEvent :\n\t\t\tnew jQuery.Event( originalEvent );\n\t},\n\n\tspecial: {\n\t\tload: {\n\n\t\t\t// Prevent triggered image.load events from bubbling to window.load\n\t\t\tnoBubble: true\n\t\t},\n\t\tclick: {\n\n\t\t\t// Utilize native event to ensure correct state for checkable inputs\n\t\t\tsetup: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Claim the first handler\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\t// dataPriv.set( el, \"click\", ... )\n\t\t\t\t\tleverageNative( el, \"click\", returnTrue );\n\t\t\t\t}\n\n\t\t\t\t// Return false to allow normal processing in the caller\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\ttrigger: function( data ) {\n\n\t\t\t\t// For mutual compressibility with _default, replace `this` access with a local var.\n\t\t\t\t// `|| data` is dead code meant only to preserve the variable through minification.\n\t\t\t\tvar el = this || data;\n\n\t\t\t\t// Force setup before triggering a click\n\t\t\t\tif ( rcheckableType.test( el.type ) &&\n\t\t\t\t\tel.click && nodeName( el, \"input\" ) ) {\n\n\t\t\t\t\tleverageNative( el, \"click\" );\n\t\t\t\t}\n\n\t\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\t\treturn true;\n\t\t\t},\n\n\t\t\t// For cross-browser consistency, suppress native .click() on links\n\t\t\t// Also prevent it if we're currently inside a leveraged native-event stack\n\t\t\t_default: function( event ) {\n\t\t\t\tvar target = event.target;\n\t\t\t\treturn rcheckableType.test( target.type ) &&\n\t\t\t\t\ttarget.click && nodeName( target, \"input\" ) &&\n\t\t\t\t\tdataPriv.get( target, \"click\" ) ||\n\t\t\t\t\tnodeName( target, \"a\" );\n\t\t\t}\n\t\t},\n\n\t\tbeforeunload: {\n\t\t\tpostDispatch: function( event ) {\n\n\t\t\t\t// Support: Firefox 20+\n\t\t\t\t// Firefox doesn't alert if the returnValue field is not set.\n\t\t\t\tif ( event.result !== undefined && event.originalEvent ) {\n\t\t\t\t\tevent.originalEvent.returnValue = event.result;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Ensure the presence of an event listener that handles manually-triggered\n// synthetic events by interrupting progress until reinvoked in response to\n// *native* events that it fires directly, ensuring that state changes have\n// already occurred before other listeners are invoked.\nfunction leverageNative( el, type, expectSync ) {\n\n\t// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add\n\tif ( !expectSync ) {\n\t\tif ( dataPriv.get( el, type ) === undefined ) {\n\t\t\tjQuery.event.add( el, type, returnTrue );\n\t\t}\n\t\treturn;\n\t}\n\n\t// Register the controller as a special universal handler for all event namespaces\n\tdataPriv.set( el, type, false );\n\tjQuery.event.add( el, type, {\n\t\tnamespace: false,\n\t\thandler: function( event ) {\n\t\t\tvar notAsync, result,\n\t\t\t\tsaved = dataPriv.get( this, type );\n\n\t\t\tif ( ( event.isTrigger & 1 ) && this[ type ] ) {\n\n\t\t\t\t// Interrupt processing of the outer synthetic .trigger()ed event\n\t\t\t\t// Saved data should be false in such cases, but might be a leftover capture object\n\t\t\t\t// from an async native handler (gh-4350)\n\t\t\t\tif ( !saved.length ) {\n\n\t\t\t\t\t// Store arguments for use when handling the inner native event\n\t\t\t\t\t// There will always be at least one argument (an event object), so this array\n\t\t\t\t\t// will not be confused with a leftover capture object.\n\t\t\t\t\tsaved = slice.call( arguments );\n\t\t\t\t\tdataPriv.set( this, type, saved );\n\n\t\t\t\t\t// Trigger the native event and capture its result\n\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t// focus() and blur() are asynchronous\n\t\t\t\t\tnotAsync = expectSync( this, type );\n\t\t\t\t\tthis[ type ]();\n\t\t\t\t\tresult = dataPriv.get( this, type );\n\t\t\t\t\tif ( saved !== result || notAsync ) {\n\t\t\t\t\t\tdataPriv.set( this, type, false );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = {};\n\t\t\t\t\t}\n\t\t\t\t\tif ( saved !== result ) {\n\n\t\t\t\t\t\t// Cancel the outer synthetic event\n\t\t\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t\t\t\tevent.preventDefault();\n\n\t\t\t\t\t\t// Support: Chrome 86+\n\t\t\t\t\t\t// In Chrome, if an element having a focusout handler is blurred by\n\t\t\t\t\t\t// clicking outside of it, it invokes the handler synchronously. If\n\t\t\t\t\t\t// that handler calls `.remove()` on the element, the data is cleared,\n\t\t\t\t\t\t// leaving `result` undefined. We need to guard against this.\n\t\t\t\t\t\treturn result && result.value;\n\t\t\t\t\t}\n\n\t\t\t\t// If this is an inner synthetic event for an event with a bubbling surrogate\n\t\t\t\t// (focus or blur), assume that the surrogate already propagated from triggering the\n\t\t\t\t// native event and prevent that from happening again here.\n\t\t\t\t// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the\n\t\t\t\t// bubbling surrogate propagates *after* the non-bubbling base), but that seems\n\t\t\t\t// less bad than duplication.\n\t\t\t\t} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {\n\t\t\t\t\tevent.stopPropagation();\n\t\t\t\t}\n\n\t\t\t// If this is a native event triggered above, everything is now in order\n\t\t\t// Fire an inner synthetic event with the original arguments\n\t\t\t} else if ( saved.length ) {\n\n\t\t\t\t// ...and capture the result\n\t\t\t\tdataPriv.set( this, type, {\n\t\t\t\t\tvalue: jQuery.event.trigger(\n\n\t\t\t\t\t\t// Support: IE <=9 - 11+\n\t\t\t\t\t\t// Extend with the prototype to reset the above stopImmediatePropagation()\n\t\t\t\t\t\tjQuery.extend( saved[ 0 ], jQuery.Event.prototype ),\n\t\t\t\t\t\tsaved.slice( 1 ),\n\t\t\t\t\t\tthis\n\t\t\t\t\t)\n\t\t\t\t} );\n\n\t\t\t\t// Abort handling of the native event\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t}\n\t\t}\n\t} );\n}\n\njQuery.removeEvent = function( elem, type, handle ) {\n\n\t// This \"if\" is needed for plain objects\n\tif ( elem.removeEventListener ) {\n\t\telem.removeEventListener( type, handle );\n\t}\n};\n\njQuery.Event = function( src, props ) {\n\n\t// Allow instantiation without the 'new' keyword\n\tif ( !( this instanceof jQuery.Event ) ) {\n\t\treturn new jQuery.Event( src, props );\n\t}\n\n\t// Event object\n\tif ( src && src.type ) {\n\t\tthis.originalEvent = src;\n\t\tthis.type = src.type;\n\n\t\t// Events bubbling up the document may have been marked as prevented\n\t\t// by a handler lower down the tree; reflect the correct value.\n\t\tthis.isDefaultPrevented = src.defaultPrevented ||\n\t\t\t\tsrc.defaultPrevented === undefined &&\n\n\t\t\t\t// Support: Android <=2.3 only\n\t\t\t\tsrc.returnValue === false ?\n\t\t\treturnTrue :\n\t\t\treturnFalse;\n\n\t\t// Create target properties\n\t\t// Support: Safari <=6 - 7 only\n\t\t// Target should not be a text node (trac-504, trac-13143)\n\t\tthis.target = ( src.target && src.target.nodeType === 3 ) ?\n\t\t\tsrc.target.parentNode :\n\t\t\tsrc.target;\n\n\t\tthis.currentTarget = src.currentTarget;\n\t\tthis.relatedTarget = src.relatedTarget;\n\n\t// Event type\n\t} else {\n\t\tthis.type = src;\n\t}\n\n\t// Put explicitly provided properties onto the event object\n\tif ( props ) {\n\t\tjQuery.extend( this, props );\n\t}\n\n\t// Create a timestamp if incoming event doesn't have one\n\tthis.timeStamp = src && src.timeStamp || Date.now();\n\n\t// Mark it as fixed\n\tthis[ jQuery.expando ] = true;\n};\n\n// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding\n// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html\njQuery.Event.prototype = {\n\tconstructor: jQuery.Event,\n\tisDefaultPrevented: returnFalse,\n\tisPropagationStopped: returnFalse,\n\tisImmediatePropagationStopped: returnFalse,\n\tisSimulated: false,\n\n\tpreventDefault: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isDefaultPrevented = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.preventDefault();\n\t\t}\n\t},\n\tstopPropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isPropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopPropagation();\n\t\t}\n\t},\n\tstopImmediatePropagation: function() {\n\t\tvar e = this.originalEvent;\n\n\t\tthis.isImmediatePropagationStopped = returnTrue;\n\n\t\tif ( e && !this.isSimulated ) {\n\t\t\te.stopImmediatePropagation();\n\t\t}\n\n\t\tthis.stopPropagation();\n\t}\n};\n\n// Includes all common event props including KeyEvent and MouseEvent specific props\njQuery.each( {\n\taltKey: true,\n\tbubbles: true,\n\tcancelable: true,\n\tchangedTouches: true,\n\tctrlKey: true,\n\tdetail: true,\n\teventPhase: true,\n\tmetaKey: true,\n\tpageX: true,\n\tpageY: true,\n\tshiftKey: true,\n\tview: true,\n\t\"char\": true,\n\tcode: true,\n\tcharCode: true,\n\tkey: true,\n\tkeyCode: true,\n\tbutton: true,\n\tbuttons: true,\n\tclientX: true,\n\tclientY: true,\n\toffsetX: true,\n\toffsetY: true,\n\tpointerId: true,\n\tpointerType: true,\n\tscreenX: true,\n\tscreenY: true,\n\ttargetTouches: true,\n\ttoElement: true,\n\ttouches: true,\n\twhich: true\n}, jQuery.event.addProp );\n\njQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( type, delegateType ) {\n\tjQuery.event.special[ type ] = {\n\n\t\t// Utilize native event if possible so blur/focus sequence is correct\n\t\tsetup: function() {\n\n\t\t\t// Claim the first handler\n\t\t\t// dataPriv.set( this, \"focus\", ... )\n\t\t\t// dataPriv.set( this, \"blur\", ... )\n\t\t\tleverageNative( this, type, expectSync );\n\n\t\t\t// Return false to allow normal processing in the caller\n\t\t\treturn false;\n\t\t},\n\t\ttrigger: function() {\n\n\t\t\t// Force setup before trigger\n\t\t\tleverageNative( this, type );\n\n\t\t\t// Return non-false to allow normal event-path propagation\n\t\t\treturn true;\n\t\t},\n\n\t\t// Suppress native focus or blur if we're currently inside\n\t\t// a leveraged native-event stack\n\t\t_default: function( event ) {\n\t\t\treturn dataPriv.get( event.target, type );\n\t\t},\n\n\t\tdelegateType: delegateType\n\t};\n} );\n\n// Create mouseenter/leave events using mouseover/out and event-time checks\n// so that event delegation works in jQuery.\n// Do the same for pointerenter/pointerleave and pointerover/pointerout\n//\n// Support: Safari 7 only\n// Safari sends mouseenter too often; see:\n// https://bugs.chromium.org/p/chromium/issues/detail?id=470258\n// for the description of the bug (it existed in older Chrome versions as well).\njQuery.each( {\n\tmouseenter: \"mouseover\",\n\tmouseleave: \"mouseout\",\n\tpointerenter: \"pointerover\",\n\tpointerleave: \"pointerout\"\n}, function( orig, fix ) {\n\tjQuery.event.special[ orig ] = {\n\t\tdelegateType: fix,\n\t\tbindType: fix,\n\n\t\thandle: function( event ) {\n\t\t\tvar ret,\n\t\t\t\ttarget = this,\n\t\t\t\trelated = event.relatedTarget,\n\t\t\t\thandleObj = event.handleObj;\n\n\t\t\t// For mouseenter/leave call the handler if related is outside the target.\n\t\t\t// NB: No relatedTarget if the mouse left/entered the browser window\n\t\t\tif ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {\n\t\t\t\tevent.type = handleObj.origType;\n\t\t\t\tret = handleObj.handler.apply( this, arguments );\n\t\t\t\tevent.type = fix;\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t};\n} );\n\njQuery.fn.extend( {\n\n\ton: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn );\n\t},\n\tone: function( types, selector, data, fn ) {\n\t\treturn on( this, types, selector, data, fn, 1 );\n\t},\n\toff: function( types, selector, fn ) {\n\t\tvar handleObj, type;\n\t\tif ( types && types.preventDefault && types.handleObj ) {\n\n\t\t\t// ( event )  dispatched jQuery.Event\n\t\t\thandleObj = types.handleObj;\n\t\t\tjQuery( types.delegateTarget ).off(\n\t\t\t\thandleObj.namespace ?\n\t\t\t\t\thandleObj.origType + \".\" + handleObj.namespace :\n\t\t\t\t\thandleObj.origType,\n\t\t\t\thandleObj.selector,\n\t\t\t\thandleObj.handler\n\t\t\t);\n\t\t\treturn this;\n\t\t}\n\t\tif ( typeof types === \"object\" ) {\n\n\t\t\t// ( types-object [, selector] )\n\t\t\tfor ( type in types ) {\n\t\t\t\tthis.off( type, selector, types[ type ] );\n\t\t\t}\n\t\t\treturn this;\n\t\t}\n\t\tif ( selector === false || typeof selector === \"function\" ) {\n\n\t\t\t// ( types [, fn] )\n\t\t\tfn = selector;\n\t\t\tselector = undefined;\n\t\t}\n\t\tif ( fn === false ) {\n\t\t\tfn = returnFalse;\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.remove( this, types, fn, selector );\n\t\t} );\n\t}\n} );\n\n\nvar\n\n\t// Support: IE <=10 - 11, Edge 12 - 13 only\n\t// In IE/Edge using regex groups here causes severe slowdowns.\n\t// See https://connect.microsoft.com/IE/feedback/details/1736512/\n\trnoInnerhtml = /<script|<style|<link/i,\n\n\t// checked=\"checked\" or checked\n\trchecked = /checked\\s*(?:[^=]|=\\s*.checked.)/i,\n\n\trcleanScript = /^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;\n\n// Prefer a tbody over its parent table for containing new rows\nfunction manipulationTarget( elem, content ) {\n\tif ( nodeName( elem, \"table\" ) &&\n\t\tnodeName( content.nodeType !== 11 ? content : content.firstChild, \"tr\" ) ) {\n\n\t\treturn jQuery( elem ).children( \"tbody\" )[ 0 ] || elem;\n\t}\n\n\treturn elem;\n}\n\n// Replace/restore the type attribute of script elements for safe DOM manipulation\nfunction disableScript( elem ) {\n\telem.type = ( elem.getAttribute( \"type\" ) !== null ) + \"/\" + elem.type;\n\treturn elem;\n}\nfunction restoreScript( elem ) {\n\tif ( ( elem.type || \"\" ).slice( 0, 5 ) === \"true/\" ) {\n\t\telem.type = elem.type.slice( 5 );\n\t} else {\n\t\telem.removeAttribute( \"type\" );\n\t}\n\n\treturn elem;\n}\n\nfunction cloneCopyEvent( src, dest ) {\n\tvar i, l, type, pdataOld, udataOld, udataCur, events;\n\n\tif ( dest.nodeType !== 1 ) {\n\t\treturn;\n\t}\n\n\t// 1. Copy private data: events, handlers, etc.\n\tif ( dataPriv.hasData( src ) ) {\n\t\tpdataOld = dataPriv.get( src );\n\t\tevents = pdataOld.events;\n\n\t\tif ( events ) {\n\t\t\tdataPriv.remove( dest, \"handle events\" );\n\n\t\t\tfor ( type in events ) {\n\t\t\t\tfor ( i = 0, l = events[ type ].length; i < l; i++ ) {\n\t\t\t\t\tjQuery.event.add( dest, type, events[ type ][ i ] );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 2. Copy user data\n\tif ( dataUser.hasData( src ) ) {\n\t\tudataOld = dataUser.access( src );\n\t\tudataCur = jQuery.extend( {}, udataOld );\n\n\t\tdataUser.set( dest, udataCur );\n\t}\n}\n\n// Fix IE bugs, see support tests\nfunction fixInput( src, dest ) {\n\tvar nodeName = dest.nodeName.toLowerCase();\n\n\t// Fails to persist the checked state of a cloned checkbox or radio button.\n\tif ( nodeName === \"input\" && rcheckableType.test( src.type ) ) {\n\t\tdest.checked = src.checked;\n\n\t// Fails to return the selected option to the default selected state when cloning options\n\t} else if ( nodeName === \"input\" || nodeName === \"textarea\" ) {\n\t\tdest.defaultValue = src.defaultValue;\n\t}\n}\n\nfunction domManip( collection, args, callback, ignored ) {\n\n\t// Flatten any nested arrays\n\targs = flat( args );\n\n\tvar fragment, first, scripts, hasScripts, node, doc,\n\t\ti = 0,\n\t\tl = collection.length,\n\t\tiNoClone = l - 1,\n\t\tvalue = args[ 0 ],\n\t\tvalueIsFunction = isFunction( value );\n\n\t// We can't cloneNode fragments that contain checked, in WebKit\n\tif ( valueIsFunction ||\n\t\t\t( l > 1 && typeof value === \"string\" &&\n\t\t\t\t!support.checkClone && rchecked.test( value ) ) ) {\n\t\treturn collection.each( function( index ) {\n\t\t\tvar self = collection.eq( index );\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\targs[ 0 ] = value.call( this, index, self.html() );\n\t\t\t}\n\t\t\tdomManip( self, args, callback, ignored );\n\t\t} );\n\t}\n\n\tif ( l ) {\n\t\tfragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );\n\t\tfirst = fragment.firstChild;\n\n\t\tif ( fragment.childNodes.length === 1 ) {\n\t\t\tfragment = first;\n\t\t}\n\n\t\t// Require either new content or an interest in ignored elements to invoke the callback\n\t\tif ( first || ignored ) {\n\t\t\tscripts = jQuery.map( getAll( fragment, \"script\" ), disableScript );\n\t\t\thasScripts = scripts.length;\n\n\t\t\t// Use the original fragment for the last item\n\t\t\t// instead of the first because it can end up\n\t\t\t// being emptied incorrectly in certain situations (trac-8070).\n\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\tnode = fragment;\n\n\t\t\t\tif ( i !== iNoClone ) {\n\t\t\t\t\tnode = jQuery.clone( node, true, true );\n\n\t\t\t\t\t// Keep references to cloned scripts for later restoration\n\t\t\t\t\tif ( hasScripts ) {\n\n\t\t\t\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t\t\t\t// push.apply(_, arraylike) throws on ancient WebKit\n\t\t\t\t\t\tjQuery.merge( scripts, getAll( node, \"script\" ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcallback.call( collection[ i ], node, i );\n\t\t\t}\n\n\t\t\tif ( hasScripts ) {\n\t\t\t\tdoc = scripts[ scripts.length - 1 ].ownerDocument;\n\n\t\t\t\t// Reenable scripts\n\t\t\t\tjQuery.map( scripts, restoreScript );\n\n\t\t\t\t// Evaluate executable scripts on first document insertion\n\t\t\t\tfor ( i = 0; i < hasScripts; i++ ) {\n\t\t\t\t\tnode = scripts[ i ];\n\t\t\t\t\tif ( rscriptType.test( node.type || \"\" ) &&\n\t\t\t\t\t\t!dataPriv.access( node, \"globalEval\" ) &&\n\t\t\t\t\t\tjQuery.contains( doc, node ) ) {\n\n\t\t\t\t\t\tif ( node.src && ( node.type || \"\" ).toLowerCase()  !== \"module\" ) {\n\n\t\t\t\t\t\t\t// Optional AJAX dependency, but won't run scripts if not present\n\t\t\t\t\t\t\tif ( jQuery._evalUrl && !node.noModule ) {\n\t\t\t\t\t\t\t\tjQuery._evalUrl( node.src, {\n\t\t\t\t\t\t\t\t\tnonce: node.nonce || node.getAttribute( \"nonce\" )\n\t\t\t\t\t\t\t\t}, doc );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Unwrap a CDATA section containing script contents. This shouldn't be\n\t\t\t\t\t\t\t// needed as in XML documents they're already not visible when\n\t\t\t\t\t\t\t// inspecting element contents and in HTML documents they have no\n\t\t\t\t\t\t\t// meaning but we're preserving that logic for backwards compatibility.\n\t\t\t\t\t\t\t// This will be removed completely in 4.0. See gh-4904.\n\t\t\t\t\t\t\tDOMEval( node.textContent.replace( rcleanScript, \"\" ), node, doc );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn collection;\n}\n\nfunction remove( elem, selector, keepData ) {\n\tvar node,\n\t\tnodes = selector ? jQuery.filter( selector, elem ) : elem,\n\t\ti = 0;\n\n\tfor ( ; ( node = nodes[ i ] ) != null; i++ ) {\n\t\tif ( !keepData && node.nodeType === 1 ) {\n\t\t\tjQuery.cleanData( getAll( node ) );\n\t\t}\n\n\t\tif ( node.parentNode ) {\n\t\t\tif ( keepData && isAttached( node ) ) {\n\t\t\t\tsetGlobalEval( getAll( node, \"script\" ) );\n\t\t\t}\n\t\t\tnode.parentNode.removeChild( node );\n\t\t}\n\t}\n\n\treturn elem;\n}\n\njQuery.extend( {\n\thtmlPrefilter: function( html ) {\n\t\treturn html;\n\t},\n\n\tclone: function( elem, dataAndEvents, deepDataAndEvents ) {\n\t\tvar i, l, srcElements, destElements,\n\t\t\tclone = elem.cloneNode( true ),\n\t\t\tinPage = isAttached( elem );\n\n\t\t// Fix IE cloning issues\n\t\tif ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&\n\t\t\t\t!jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2\n\t\t\tdestElements = getAll( clone );\n\t\t\tsrcElements = getAll( elem );\n\n\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\tfixInput( srcElements[ i ], destElements[ i ] );\n\t\t\t}\n\t\t}\n\n\t\t// Copy the events from the original to the clone\n\t\tif ( dataAndEvents ) {\n\t\t\tif ( deepDataAndEvents ) {\n\t\t\t\tsrcElements = srcElements || getAll( elem );\n\t\t\t\tdestElements = destElements || getAll( clone );\n\n\t\t\t\tfor ( i = 0, l = srcElements.length; i < l; i++ ) {\n\t\t\t\t\tcloneCopyEvent( srcElements[ i ], destElements[ i ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcloneCopyEvent( elem, clone );\n\t\t\t}\n\t\t}\n\n\t\t// Preserve script evaluation history\n\t\tdestElements = getAll( clone, \"script\" );\n\t\tif ( destElements.length > 0 ) {\n\t\t\tsetGlobalEval( destElements, !inPage && getAll( elem, \"script\" ) );\n\t\t}\n\n\t\t// Return the cloned set\n\t\treturn clone;\n\t},\n\n\tcleanData: function( elems ) {\n\t\tvar data, elem, type,\n\t\t\tspecial = jQuery.event.special,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {\n\t\t\tif ( acceptData( elem ) ) {\n\t\t\t\tif ( ( data = elem[ dataPriv.expando ] ) ) {\n\t\t\t\t\tif ( data.events ) {\n\t\t\t\t\t\tfor ( type in data.events ) {\n\t\t\t\t\t\t\tif ( special[ type ] ) {\n\t\t\t\t\t\t\t\tjQuery.event.remove( elem, type );\n\n\t\t\t\t\t\t\t// This is a shortcut to avoid jQuery.event.remove's overhead\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tjQuery.removeEvent( elem, type, data.handle );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataPriv.expando ] = undefined;\n\t\t\t\t}\n\t\t\t\tif ( elem[ dataUser.expando ] ) {\n\n\t\t\t\t\t// Support: Chrome <=35 - 45+\n\t\t\t\t\t// Assign undefined instead of using delete, see Data#remove\n\t\t\t\t\telem[ dataUser.expando ] = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n} );\n\njQuery.fn.extend( {\n\tdetach: function( selector ) {\n\t\treturn remove( this, selector, true );\n\t},\n\n\tremove: function( selector ) {\n\t\treturn remove( this, selector );\n\t},\n\n\ttext: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\treturn value === undefined ?\n\t\t\t\tjQuery.text( this ) :\n\t\t\t\tthis.empty().each( function() {\n\t\t\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\t\t\tthis.textContent = value;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t}, null, value, arguments.length );\n\t},\n\n\tappend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.appendChild( elem );\n\t\t\t}\n\t\t} );\n\t},\n\n\tprepend: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {\n\t\t\t\tvar target = manipulationTarget( this, elem );\n\t\t\t\ttarget.insertBefore( elem, target.firstChild );\n\t\t\t}\n\t\t} );\n\t},\n\n\tbefore: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this );\n\t\t\t}\n\t\t} );\n\t},\n\n\tafter: function() {\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tif ( this.parentNode ) {\n\t\t\t\tthis.parentNode.insertBefore( elem, this.nextSibling );\n\t\t\t}\n\t\t} );\n\t},\n\n\tempty: function() {\n\t\tvar elem,\n\t\t\ti = 0;\n\n\t\tfor ( ; ( elem = this[ i ] ) != null; i++ ) {\n\t\t\tif ( elem.nodeType === 1 ) {\n\n\t\t\t\t// Prevent memory leaks\n\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\n\t\t\t\t// Remove any remaining nodes\n\t\t\t\telem.textContent = \"\";\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tclone: function( dataAndEvents, deepDataAndEvents ) {\n\t\tdataAndEvents = dataAndEvents == null ? false : dataAndEvents;\n\t\tdeepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;\n\n\t\treturn this.map( function() {\n\t\t\treturn jQuery.clone( this, dataAndEvents, deepDataAndEvents );\n\t\t} );\n\t},\n\n\thtml: function( value ) {\n\t\treturn access( this, function( value ) {\n\t\t\tvar elem = this[ 0 ] || {},\n\t\t\t\ti = 0,\n\t\t\t\tl = this.length;\n\n\t\t\tif ( value === undefined && elem.nodeType === 1 ) {\n\t\t\t\treturn elem.innerHTML;\n\t\t\t}\n\n\t\t\t// See if we can take a shortcut and just use innerHTML\n\t\t\tif ( typeof value === \"string\" && !rnoInnerhtml.test( value ) &&\n\t\t\t\t!wrapMap[ ( rtagName.exec( value ) || [ \"\", \"\" ] )[ 1 ].toLowerCase() ] ) {\n\n\t\t\t\tvalue = jQuery.htmlPrefilter( value );\n\n\t\t\t\ttry {\n\t\t\t\t\tfor ( ; i < l; i++ ) {\n\t\t\t\t\t\telem = this[ i ] || {};\n\n\t\t\t\t\t\t// Remove element nodes and prevent memory leaks\n\t\t\t\t\t\tif ( elem.nodeType === 1 ) {\n\t\t\t\t\t\t\tjQuery.cleanData( getAll( elem, false ) );\n\t\t\t\t\t\t\telem.innerHTML = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\telem = 0;\n\n\t\t\t\t// If using innerHTML throws an exception, use the fallback method\n\t\t\t\t} catch ( e ) {}\n\t\t\t}\n\n\t\t\tif ( elem ) {\n\t\t\t\tthis.empty().append( value );\n\t\t\t}\n\t\t}, null, value, arguments.length );\n\t},\n\n\treplaceWith: function() {\n\t\tvar ignored = [];\n\n\t\t// Make the changes, replacing each non-ignored context element with the new content\n\t\treturn domManip( this, arguments, function( elem ) {\n\t\t\tvar parent = this.parentNode;\n\n\t\t\tif ( jQuery.inArray( this, ignored ) < 0 ) {\n\t\t\t\tjQuery.cleanData( getAll( this ) );\n\t\t\t\tif ( parent ) {\n\t\t\t\t\tparent.replaceChild( elem, this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t// Force callback invocation\n\t\t}, ignored );\n\t}\n} );\n\njQuery.each( {\n\tappendTo: \"append\",\n\tprependTo: \"prepend\",\n\tinsertBefore: \"before\",\n\tinsertAfter: \"after\",\n\treplaceAll: \"replaceWith\"\n}, function( name, original ) {\n\tjQuery.fn[ name ] = function( selector ) {\n\t\tvar elems,\n\t\t\tret = [],\n\t\t\tinsert = jQuery( selector ),\n\t\t\tlast = insert.length - 1,\n\t\t\ti = 0;\n\n\t\tfor ( ; i <= last; i++ ) {\n\t\t\telems = i === last ? this : this.clone( true );\n\t\t\tjQuery( insert[ i ] )[ original ]( elems );\n\n\t\t\t// Support: Android <=4.0 only, PhantomJS 1 only\n\t\t\t// .get() because push.apply(_, arraylike) throws on ancient WebKit\n\t\t\tpush.apply( ret, elems.get() );\n\t\t}\n\n\t\treturn this.pushStack( ret );\n\t};\n} );\nvar rnumnonpx = new RegExp( \"^(\" + pnum + \")(?!px)[a-z%]+$\", \"i\" );\n\nvar rcustomProp = /^--/;\n\n\nvar getStyles = function( elem ) {\n\n\t\t// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)\n\t\t// IE throws on elements created in popups\n\t\t// FF meanwhile throws on frame elements through \"defaultView.getComputedStyle\"\n\t\tvar view = elem.ownerDocument.defaultView;\n\n\t\tif ( !view || !view.opener ) {\n\t\t\tview = window;\n\t\t}\n\n\t\treturn view.getComputedStyle( elem );\n\t};\n\nvar swap = function( elem, options, callback ) {\n\tvar ret, name,\n\t\told = {};\n\n\t// Remember the old values, and insert the new ones\n\tfor ( name in options ) {\n\t\told[ name ] = elem.style[ name ];\n\t\telem.style[ name ] = options[ name ];\n\t}\n\n\tret = callback.call( elem );\n\n\t// Revert the old values\n\tfor ( name in options ) {\n\t\telem.style[ name ] = old[ name ];\n\t}\n\n\treturn ret;\n};\n\n\nvar rboxStyle = new RegExp( cssExpand.join( \"|\" ), \"i\" );\n\nvar whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\";\n\n\nvar rtrimCSS = new RegExp(\n\t\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\",\n\t\"g\"\n);\n\n\n\n\n( function() {\n\n\t// Executing both pixelPosition & boxSizingReliable tests require only one layout\n\t// so they're executed at the same time to save the second computation.\n\tfunction computeStyleTests() {\n\n\t\t// This is a singleton, we need to execute it only once\n\t\tif ( !div ) {\n\t\t\treturn;\n\t\t}\n\n\t\tcontainer.style.cssText = \"position:absolute;left:-11111px;width:60px;\" +\n\t\t\t\"margin-top:1px;padding:0;border:0\";\n\t\tdiv.style.cssText =\n\t\t\t\"position:relative;display:block;box-sizing:border-box;overflow:scroll;\" +\n\t\t\t\"margin:auto;border:1px;padding:1px;\" +\n\t\t\t\"width:60%;top:1%\";\n\t\tdocumentElement.appendChild( container ).appendChild( div );\n\n\t\tvar divStyle = window.getComputedStyle( div );\n\t\tpixelPositionVal = divStyle.top !== \"1%\";\n\n\t\t// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44\n\t\treliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;\n\n\t\t// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3\n\t\t// Some styles come back with percentage values, even though they shouldn't\n\t\tdiv.style.right = \"60%\";\n\t\tpixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;\n\n\t\t// Support: IE 9 - 11 only\n\t\t// Detect misreporting of content dimensions for box-sizing:border-box elements\n\t\tboxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;\n\n\t\t// Support: IE 9 only\n\t\t// Detect overflow:scroll screwiness (gh-3699)\n\t\t// Support: Chrome <=64\n\t\t// Don't get tricked when zoom affects offsetWidth (gh-4029)\n\t\tdiv.style.position = \"absolute\";\n\t\tscrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;\n\n\t\tdocumentElement.removeChild( container );\n\n\t\t// Nullify the div so it wouldn't be stored in the memory and\n\t\t// it will also be a sign that checks already performed\n\t\tdiv = null;\n\t}\n\n\tfunction roundPixelMeasures( measure ) {\n\t\treturn Math.round( parseFloat( measure ) );\n\t}\n\n\tvar pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,\n\t\treliableTrDimensionsVal, reliableMarginLeftVal,\n\t\tcontainer = document.createElement( \"div\" ),\n\t\tdiv = document.createElement( \"div\" );\n\n\t// Finish early in limited (non-browser) environments\n\tif ( !div.style ) {\n\t\treturn;\n\t}\n\n\t// Support: IE <=9 - 11 only\n\t// Style of cloned element affects source element cloned (trac-8908)\n\tdiv.style.backgroundClip = \"content-box\";\n\tdiv.cloneNode( true ).style.backgroundClip = \"\";\n\tsupport.clearCloneStyle = div.style.backgroundClip === \"content-box\";\n\n\tjQuery.extend( support, {\n\t\tboxSizingReliable: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn boxSizingReliableVal;\n\t\t},\n\t\tpixelBoxStyles: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelBoxStylesVal;\n\t\t},\n\t\tpixelPosition: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn pixelPositionVal;\n\t\t},\n\t\treliableMarginLeft: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn reliableMarginLeftVal;\n\t\t},\n\t\tscrollboxSize: function() {\n\t\t\tcomputeStyleTests();\n\t\t\treturn scrollboxSizeVal;\n\t\t},\n\n\t\t// Support: IE 9 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Behavior in IE 9 is more subtle than in newer versions & it passes\n\t\t// some versions of this test; make sure not to make it pass there!\n\t\t//\n\t\t// Support: Firefox 70+\n\t\t// Only Firefox includes border widths\n\t\t// in computed dimensions. (gh-4529)\n\t\treliableTrDimensions: function() {\n\t\t\tvar table, tr, trChild, trStyle;\n\t\t\tif ( reliableTrDimensionsVal == null ) {\n\t\t\t\ttable = document.createElement( \"table\" );\n\t\t\t\ttr = document.createElement( \"tr\" );\n\t\t\t\ttrChild = document.createElement( \"div\" );\n\n\t\t\t\ttable.style.cssText = \"position:absolute;left:-11111px;border-collapse:separate\";\n\t\t\t\ttr.style.cssText = \"border:1px solid\";\n\n\t\t\t\t// Support: Chrome 86+\n\t\t\t\t// Height set through cssText does not get applied.\n\t\t\t\t// Computed height then comes back as 0.\n\t\t\t\ttr.style.height = \"1px\";\n\t\t\t\ttrChild.style.height = \"9px\";\n\n\t\t\t\t// Support: Android 8 Chrome 86+\n\t\t\t\t// In our bodyBackground.html iframe,\n\t\t\t\t// display for all div elements is set to \"inline\",\n\t\t\t\t// which causes a problem only in Android 8 Chrome 86.\n\t\t\t\t// Ensuring the div is display: block\n\t\t\t\t// gets around this issue.\n\t\t\t\ttrChild.style.display = \"block\";\n\n\t\t\t\tdocumentElement\n\t\t\t\t\t.appendChild( table )\n\t\t\t\t\t.appendChild( tr )\n\t\t\t\t\t.appendChild( trChild );\n\n\t\t\t\ttrStyle = window.getComputedStyle( tr );\n\t\t\t\treliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderTopWidth, 10 ) +\n\t\t\t\t\tparseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;\n\n\t\t\t\tdocumentElement.removeChild( table );\n\t\t\t}\n\t\t\treturn reliableTrDimensionsVal;\n\t\t}\n\t} );\n} )();\n\n\nfunction curCSS( elem, name, computed ) {\n\tvar width, minWidth, maxWidth, ret,\n\t\tisCustomProp = rcustomProp.test( name ),\n\n\t\t// Support: Firefox 51+\n\t\t// Retrieving style before computed somehow\n\t\t// fixes an issue with getting wrong values\n\t\t// on detached elements\n\t\tstyle = elem.style;\n\n\tcomputed = computed || getStyles( elem );\n\n\t// getPropertyValue is needed for:\n\t//   .css('filter') (IE 9 only, trac-12537)\n\t//   .css('--customProperty) (gh-3144)\n\tif ( computed ) {\n\n\t\t// Support: IE <=9 - 11+\n\t\t// IE only supports `\"float\"` in `getPropertyValue`; in computed styles\n\t\t// it's only available as `\"cssFloat\"`. We no longer modify properties\n\t\t// sent to `.css()` apart from camelCasing, so we need to check both.\n\t\t// Normally, this would create difference in behavior: if\n\t\t// `getPropertyValue` returns an empty string, the value returned\n\t\t// by `.css()` would be `undefined`. This is usually the case for\n\t\t// disconnected elements. However, in IE even disconnected elements\n\t\t// with no styles return `\"none\"` for `getPropertyValue( \"float\" )`\n\t\tret = computed.getPropertyValue( name ) || computed[ name ];\n\n\t\tif ( isCustomProp && ret ) {\n\n\t\t\t// Support: Firefox 105+, Chrome <=105+\n\t\t\t// Spec requires trimming whitespace for custom properties (gh-4926).\n\t\t\t// Firefox only trims leading whitespace. Chrome just collapses\n\t\t\t// both leading & trailing whitespace to a single space.\n\t\t\t//\n\t\t\t// Fall back to `undefined` if empty string returned.\n\t\t\t// This collapses a missing definition with property defined\n\t\t\t// and set to an empty string but there's no standard API\n\t\t\t// allowing us to differentiate them without a performance penalty\n\t\t\t// and returning `undefined` aligns with older jQuery.\n\t\t\t//\n\t\t\t// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED\n\t\t\t// as whitespace while CSS does not, but this is not a problem\n\t\t\t// because CSS preprocessing replaces them with U+000A LINE FEED\n\t\t\t// (which *is* CSS whitespace)\n\t\t\t// https://www.w3.org/TR/css-syntax-3/#input-preprocessing\n\t\t\tret = ret.replace( rtrimCSS, \"$1\" ) || undefined;\n\t\t}\n\n\t\tif ( ret === \"\" && !isAttached( elem ) ) {\n\t\t\tret = jQuery.style( elem, name );\n\t\t}\n\n\t\t// A tribute to the \"awesome hack by Dean Edwards\"\n\t\t// Android Browser returns percentage for some values,\n\t\t// but width seems to be reliably pixels.\n\t\t// This is against the CSSOM draft spec:\n\t\t// https://drafts.csswg.org/cssom/#resolved-values\n\t\tif ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {\n\n\t\t\t// Remember the original values\n\t\t\twidth = style.width;\n\t\t\tminWidth = style.minWidth;\n\t\t\tmaxWidth = style.maxWidth;\n\n\t\t\t// Put in the new values to get a computed value out\n\t\t\tstyle.minWidth = style.maxWidth = style.width = ret;\n\t\t\tret = computed.width;\n\n\t\t\t// Revert the changed values\n\t\t\tstyle.width = width;\n\t\t\tstyle.minWidth = minWidth;\n\t\t\tstyle.maxWidth = maxWidth;\n\t\t}\n\t}\n\n\treturn ret !== undefined ?\n\n\t\t// Support: IE <=9 - 11 only\n\t\t// IE returns zIndex value as an integer.\n\t\tret + \"\" :\n\t\tret;\n}\n\n\nfunction addGetHookIf( conditionFn, hookFn ) {\n\n\t// Define the hook, we'll check on the first run if it's really needed.\n\treturn {\n\t\tget: function() {\n\t\t\tif ( conditionFn() ) {\n\n\t\t\t\t// Hook not needed (or it's not possible to use it due\n\t\t\t\t// to missing dependency), remove it.\n\t\t\t\tdelete this.get;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Hook needed; redefine it so that the support test is not executed again.\n\t\t\treturn ( this.get = hookFn ).apply( this, arguments );\n\t\t}\n\t};\n}\n\n\nvar cssPrefixes = [ \"Webkit\", \"Moz\", \"ms\" ],\n\temptyStyle = document.createElement( \"div\" ).style,\n\tvendorProps = {};\n\n// Return a vendor-prefixed property or undefined\nfunction vendorPropName( name ) {\n\n\t// Check for vendor prefixed names\n\tvar capName = name[ 0 ].toUpperCase() + name.slice( 1 ),\n\t\ti = cssPrefixes.length;\n\n\twhile ( i-- ) {\n\t\tname = cssPrefixes[ i ] + capName;\n\t\tif ( name in emptyStyle ) {\n\t\t\treturn name;\n\t\t}\n\t}\n}\n\n// Return a potentially-mapped jQuery.cssProps or vendor prefixed property\nfunction finalPropName( name ) {\n\tvar final = jQuery.cssProps[ name ] || vendorProps[ name ];\n\n\tif ( final ) {\n\t\treturn final;\n\t}\n\tif ( name in emptyStyle ) {\n\t\treturn name;\n\t}\n\treturn vendorProps[ name ] = vendorPropName( name ) || name;\n}\n\n\nvar\n\n\t// Swappable if display is none or starts with table\n\t// except \"table\", \"table-cell\", or \"table-caption\"\n\t// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display\n\trdisplayswap = /^(none|table(?!-c[ea]).+)/,\n\tcssShow = { position: \"absolute\", visibility: \"hidden\", display: \"block\" },\n\tcssNormalTransform = {\n\t\tletterSpacing: \"0\",\n\t\tfontWeight: \"400\"\n\t};\n\nfunction setPositiveNumber( _elem, value, subtract ) {\n\n\t// Any relative (+/-) values have already been\n\t// normalized at this point\n\tvar matches = rcssNum.exec( value );\n\treturn matches ?\n\n\t\t// Guard against undefined \"subtract\", e.g., when used as in cssHooks\n\t\tMath.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || \"px\" ) :\n\t\tvalue;\n}\n\nfunction boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {\n\tvar i = dimension === \"width\" ? 1 : 0,\n\t\textra = 0,\n\t\tdelta = 0;\n\n\t// Adjustment may not be necessary\n\tif ( box === ( isBorderBox ? \"border\" : \"content\" ) ) {\n\t\treturn 0;\n\t}\n\n\tfor ( ; i < 4; i += 2 ) {\n\n\t\t// Both box models exclude margin\n\t\tif ( box === \"margin\" ) {\n\t\t\tdelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );\n\t\t}\n\n\t\t// If we get here with a content-box, we're seeking \"padding\" or \"border\" or \"margin\"\n\t\tif ( !isBorderBox ) {\n\n\t\t\t// Add padding\n\t\t\tdelta += jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\n\t\t\t// For \"border\" or \"margin\", add border\n\t\t\tif ( box !== \"padding\" ) {\n\t\t\t\tdelta += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\n\t\t\t// But still keep track of it otherwise\n\t\t\t} else {\n\t\t\t\textra += jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\n\t\t// If we get here with a border-box (content + padding + border), we're seeking \"content\" or\n\t\t// \"padding\" or \"margin\"\n\t\t} else {\n\n\t\t\t// For \"content\", subtract padding\n\t\t\tif ( box === \"content\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"padding\" + cssExpand[ i ], true, styles );\n\t\t\t}\n\n\t\t\t// For \"content\" or \"padding\", subtract border\n\t\t\tif ( box !== \"margin\" ) {\n\t\t\t\tdelta -= jQuery.css( elem, \"border\" + cssExpand[ i ] + \"Width\", true, styles );\n\t\t\t}\n\t\t}\n\t}\n\n\t// Account for positive content-box scroll gutter when requested by providing computedVal\n\tif ( !isBorderBox && computedVal >= 0 ) {\n\n\t\t// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border\n\t\t// Assuming integer scroll gutter, subtract the rest and round down\n\t\tdelta += Math.max( 0, Math.ceil(\n\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\tcomputedVal -\n\t\t\tdelta -\n\t\t\textra -\n\t\t\t0.5\n\n\t\t// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter\n\t\t// Use an explicit zero to avoid NaN (gh-3964)\n\t\t) ) || 0;\n\t}\n\n\treturn delta;\n}\n\nfunction getWidthOrHeight( elem, dimension, extra ) {\n\n\t// Start with computed style\n\tvar styles = getStyles( elem ),\n\n\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).\n\t\t// Fake content-box until we know it's needed to know the true value.\n\t\tboxSizingNeeded = !support.boxSizingReliable() || extra,\n\t\tisBorderBox = boxSizingNeeded &&\n\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\tvalueIsBorderBox = isBorderBox,\n\n\t\tval = curCSS( elem, dimension, styles ),\n\t\toffsetProp = \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );\n\n\t// Support: Firefox <=54\n\t// Return a confounding non-pixel value or feign ignorance, as appropriate.\n\tif ( rnumnonpx.test( val ) ) {\n\t\tif ( !extra ) {\n\t\t\treturn val;\n\t\t}\n\t\tval = \"auto\";\n\t}\n\n\n\t// Support: IE 9 - 11 only\n\t// Use offsetWidth/offsetHeight for when box sizing is unreliable.\n\t// In those cases, the computed value can be trusted to be border-box.\n\tif ( ( !support.boxSizingReliable() && isBorderBox ||\n\n\t\t// Support: IE 10 - 11+, Edge 15 - 18+\n\t\t// IE/Edge misreport `getComputedStyle` of table rows with width/height\n\t\t// set in CSS while `offset*` properties report correct values.\n\t\t// Interestingly, in some cases IE 9 doesn't suffer from this issue.\n\t\t!support.reliableTrDimensions() && nodeName( elem, \"tr\" ) ||\n\n\t\t// Fall back to offsetWidth/offsetHeight when value is \"auto\"\n\t\t// This happens for inline elements with no explicit setting (gh-3571)\n\t\tval === \"auto\" ||\n\n\t\t// Support: Android <=4.1 - 4.3 only\n\t\t// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)\n\t\t!parseFloat( val ) && jQuery.css( elem, \"display\", false, styles ) === \"inline\" ) &&\n\n\t\t// Make sure the element is visible & connected\n\t\telem.getClientRects().length ) {\n\n\t\tisBorderBox = jQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\";\n\n\t\t// Where available, offsetWidth/offsetHeight approximate border box dimensions.\n\t\t// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the\n\t\t// retrieved value as a content box dimension.\n\t\tvalueIsBorderBox = offsetProp in elem;\n\t\tif ( valueIsBorderBox ) {\n\t\t\tval = elem[ offsetProp ];\n\t\t}\n\t}\n\n\t// Normalize \"\" and auto\n\tval = parseFloat( val ) || 0;\n\n\t// Adjust for the element's box model\n\treturn ( val +\n\t\tboxModelAdjustment(\n\t\t\telem,\n\t\t\tdimension,\n\t\t\textra || ( isBorderBox ? \"border\" : \"content\" ),\n\t\t\tvalueIsBorderBox,\n\t\t\tstyles,\n\n\t\t\t// Provide the current computed size to request scroll gutter calculation (gh-3589)\n\t\t\tval\n\t\t)\n\t) + \"px\";\n}\n\njQuery.extend( {\n\n\t// Add in style property hooks for overriding the default\n\t// behavior of getting and setting a style property\n\tcssHooks: {\n\t\topacity: {\n\t\t\tget: function( elem, computed ) {\n\t\t\t\tif ( computed ) {\n\n\t\t\t\t\t// We should always get a number back from opacity\n\t\t\t\t\tvar ret = curCSS( elem, \"opacity\" );\n\t\t\t\t\treturn ret === \"\" ? \"1\" : ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\t// Don't automatically add \"px\" to these possibly-unitless properties\n\tcssNumber: {\n\t\t\"animationIterationCount\": true,\n\t\t\"columnCount\": true,\n\t\t\"fillOpacity\": true,\n\t\t\"flexGrow\": true,\n\t\t\"flexShrink\": true,\n\t\t\"fontWeight\": true,\n\t\t\"gridArea\": true,\n\t\t\"gridColumn\": true,\n\t\t\"gridColumnEnd\": true,\n\t\t\"gridColumnStart\": true,\n\t\t\"gridRow\": true,\n\t\t\"gridRowEnd\": true,\n\t\t\"gridRowStart\": true,\n\t\t\"lineHeight\": true,\n\t\t\"opacity\": true,\n\t\t\"order\": true,\n\t\t\"orphans\": true,\n\t\t\"widows\": true,\n\t\t\"zIndex\": true,\n\t\t\"zoom\": true\n\t},\n\n\t// Add in properties whose names you wish to fix before\n\t// setting or getting the value\n\tcssProps: {},\n\n\t// Get and set the style property on a DOM Node\n\tstyle: function( elem, name, value, extra ) {\n\n\t\t// Don't set styles on text and comment nodes\n\t\tif ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure that we're working with the right name\n\t\tvar ret, type, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name ),\n\t\t\tstyle = elem.style;\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to query the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Gets hook for the prefixed version, then unprefixed version\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// Check if we're setting a value\n\t\tif ( value !== undefined ) {\n\t\t\ttype = typeof value;\n\n\t\t\t// Convert \"+=\" or \"-=\" to relative numbers (trac-7345)\n\t\t\tif ( type === \"string\" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {\n\t\t\t\tvalue = adjustCSS( elem, name, ret );\n\n\t\t\t\t// Fixes bug trac-9237\n\t\t\t\ttype = \"number\";\n\t\t\t}\n\n\t\t\t// Make sure that null and NaN values aren't set (trac-7116)\n\t\t\tif ( value == null || value !== value ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If a number was passed in, add the unit (except for certain CSS properties)\n\t\t\t// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append\n\t\t\t// \"px\" to a few hardcoded values.\n\t\t\tif ( type === \"number\" && !isCustomProp ) {\n\t\t\t\tvalue += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? \"\" : \"px\" );\n\t\t\t}\n\n\t\t\t// background-* props affect original clone's values\n\t\t\tif ( !support.clearCloneStyle && value === \"\" && name.indexOf( \"background\" ) === 0 ) {\n\t\t\t\tstyle[ name ] = \"inherit\";\n\t\t\t}\n\n\t\t\t// If a hook was provided, use that value, otherwise just set the specified value\n\t\t\tif ( !hooks || !( \"set\" in hooks ) ||\n\t\t\t\t( value = hooks.set( elem, value, extra ) ) !== undefined ) {\n\n\t\t\t\tif ( isCustomProp ) {\n\t\t\t\t\tstyle.setProperty( name, value );\n\t\t\t\t} else {\n\t\t\t\t\tstyle[ name ] = value;\n\t\t\t\t}\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// If a hook was provided get the non-computed value from there\n\t\t\tif ( hooks && \"get\" in hooks &&\n\t\t\t\t( ret = hooks.get( elem, false, extra ) ) !== undefined ) {\n\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Otherwise just get the value from the style object\n\t\t\treturn style[ name ];\n\t\t}\n\t},\n\n\tcss: function( elem, name, extra, styles ) {\n\t\tvar val, num, hooks,\n\t\t\torigName = camelCase( name ),\n\t\t\tisCustomProp = rcustomProp.test( name );\n\n\t\t// Make sure that we're working with the right name. We don't\n\t\t// want to modify the value if it is a CSS custom property\n\t\t// since they are user-defined.\n\t\tif ( !isCustomProp ) {\n\t\t\tname = finalPropName( origName );\n\t\t}\n\n\t\t// Try prefixed name followed by the unprefixed name\n\t\thooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];\n\n\t\t// If a hook was provided get the computed value from there\n\t\tif ( hooks && \"get\" in hooks ) {\n\t\t\tval = hooks.get( elem, true, extra );\n\t\t}\n\n\t\t// Otherwise, if a way to get the computed value exists, use that\n\t\tif ( val === undefined ) {\n\t\t\tval = curCSS( elem, name, styles );\n\t\t}\n\n\t\t// Convert \"normal\" to computed value\n\t\tif ( val === \"normal\" && name in cssNormalTransform ) {\n\t\t\tval = cssNormalTransform[ name ];\n\t\t}\n\n\t\t// Make numeric if forced or a qualifier was provided and val looks numeric\n\t\tif ( extra === \"\" || extra ) {\n\t\t\tnum = parseFloat( val );\n\t\t\treturn extra === true || isFinite( num ) ? num || 0 : val;\n\t\t}\n\n\t\treturn val;\n\t}\n} );\n\njQuery.each( [ \"height\", \"width\" ], function( _i, dimension ) {\n\tjQuery.cssHooks[ dimension ] = {\n\t\tget: function( elem, computed, extra ) {\n\t\t\tif ( computed ) {\n\n\t\t\t\t// Certain elements can have dimension info if we invisibly show them\n\t\t\t\t// but it must have a current display style that would benefit\n\t\t\t\treturn rdisplayswap.test( jQuery.css( elem, \"display\" ) ) &&\n\n\t\t\t\t\t// Support: Safari 8+\n\t\t\t\t\t// Table columns in Safari have non-zero offsetWidth & zero\n\t\t\t\t\t// getBoundingClientRect().width unless display is changed.\n\t\t\t\t\t// Support: IE <=11 only\n\t\t\t\t\t// Running getBoundingClientRect on a disconnected node\n\t\t\t\t\t// in IE throws an error.\n\t\t\t\t\t( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?\n\t\t\t\t\tswap( elem, cssShow, function() {\n\t\t\t\t\t\treturn getWidthOrHeight( elem, dimension, extra );\n\t\t\t\t\t} ) :\n\t\t\t\t\tgetWidthOrHeight( elem, dimension, extra );\n\t\t\t}\n\t\t},\n\n\t\tset: function( elem, value, extra ) {\n\t\t\tvar matches,\n\t\t\t\tstyles = getStyles( elem ),\n\n\t\t\t\t// Only read styles.position if the test has a chance to fail\n\t\t\t\t// to avoid forcing a reflow.\n\t\t\t\tscrollboxSizeBuggy = !support.scrollboxSize() &&\n\t\t\t\t\tstyles.position === \"absolute\",\n\n\t\t\t\t// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)\n\t\t\t\tboxSizingNeeded = scrollboxSizeBuggy || extra,\n\t\t\t\tisBorderBox = boxSizingNeeded &&\n\t\t\t\t\tjQuery.css( elem, \"boxSizing\", false, styles ) === \"border-box\",\n\t\t\t\tsubtract = extra ?\n\t\t\t\t\tboxModelAdjustment(\n\t\t\t\t\t\telem,\n\t\t\t\t\t\tdimension,\n\t\t\t\t\t\textra,\n\t\t\t\t\t\tisBorderBox,\n\t\t\t\t\t\tstyles\n\t\t\t\t\t) :\n\t\t\t\t\t0;\n\n\t\t\t// Account for unreliable border-box dimensions by comparing offset* to computed and\n\t\t\t// faking a content-box to get border and padding (gh-3699)\n\t\t\tif ( isBorderBox && scrollboxSizeBuggy ) {\n\t\t\t\tsubtract -= Math.ceil(\n\t\t\t\t\telem[ \"offset\" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -\n\t\t\t\t\tparseFloat( styles[ dimension ] ) -\n\t\t\t\t\tboxModelAdjustment( elem, dimension, \"border\", false, styles ) -\n\t\t\t\t\t0.5\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Convert to pixels if value adjustment is needed\n\t\t\tif ( subtract && ( matches = rcssNum.exec( value ) ) &&\n\t\t\t\t( matches[ 3 ] || \"px\" ) !== \"px\" ) {\n\n\t\t\t\telem.style[ dimension ] = value;\n\t\t\t\tvalue = jQuery.css( elem, dimension );\n\t\t\t}\n\n\t\t\treturn setPositiveNumber( elem, value, subtract );\n\t\t}\n\t};\n} );\n\njQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,\n\tfunction( elem, computed ) {\n\t\tif ( computed ) {\n\t\t\treturn ( parseFloat( curCSS( elem, \"marginLeft\" ) ) ||\n\t\t\t\telem.getBoundingClientRect().left -\n\t\t\t\t\tswap( elem, { marginLeft: 0 }, function() {\n\t\t\t\t\t\treturn elem.getBoundingClientRect().left;\n\t\t\t\t\t} )\n\t\t\t) + \"px\";\n\t\t}\n\t}\n);\n\n// These hooks are used by animate to expand properties\njQuery.each( {\n\tmargin: \"\",\n\tpadding: \"\",\n\tborder: \"Width\"\n}, function( prefix, suffix ) {\n\tjQuery.cssHooks[ prefix + suffix ] = {\n\t\texpand: function( value ) {\n\t\t\tvar i = 0,\n\t\t\t\texpanded = {},\n\n\t\t\t\t// Assumes a single number if not a string\n\t\t\t\tparts = typeof value === \"string\" ? value.split( \" \" ) : [ value ];\n\n\t\t\tfor ( ; i < 4; i++ ) {\n\t\t\t\texpanded[ prefix + cssExpand[ i ] + suffix ] =\n\t\t\t\t\tparts[ i ] || parts[ i - 2 ] || parts[ 0 ];\n\t\t\t}\n\n\t\t\treturn expanded;\n\t\t}\n\t};\n\n\tif ( prefix !== \"margin\" ) {\n\t\tjQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;\n\t}\n} );\n\njQuery.fn.extend( {\n\tcss: function( name, value ) {\n\t\treturn access( this, function( elem, name, value ) {\n\t\t\tvar styles, len,\n\t\t\t\tmap = {},\n\t\t\t\ti = 0;\n\n\t\t\tif ( Array.isArray( name ) ) {\n\t\t\t\tstyles = getStyles( elem );\n\t\t\t\tlen = name.length;\n\n\t\t\t\tfor ( ; i < len; i++ ) {\n\t\t\t\t\tmap[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );\n\t\t\t\t}\n\n\t\t\t\treturn map;\n\t\t\t}\n\n\t\t\treturn value !== undefined ?\n\t\t\t\tjQuery.style( elem, name, value ) :\n\t\t\t\tjQuery.css( elem, name );\n\t\t}, name, value, arguments.length > 1 );\n\t}\n} );\n\n\nfunction Tween( elem, options, prop, end, easing ) {\n\treturn new Tween.prototype.init( elem, options, prop, end, easing );\n}\njQuery.Tween = Tween;\n\nTween.prototype = {\n\tconstructor: Tween,\n\tinit: function( elem, options, prop, end, easing, unit ) {\n\t\tthis.elem = elem;\n\t\tthis.prop = prop;\n\t\tthis.easing = easing || jQuery.easing._default;\n\t\tthis.options = options;\n\t\tthis.start = this.now = this.cur();\n\t\tthis.end = end;\n\t\tthis.unit = unit || ( jQuery.cssNumber[ prop ] ? \"\" : \"px\" );\n\t},\n\tcur: function() {\n\t\tvar hooks = Tween.propHooks[ this.prop ];\n\n\t\treturn hooks && hooks.get ?\n\t\t\thooks.get( this ) :\n\t\t\tTween.propHooks._default.get( this );\n\t},\n\trun: function( percent ) {\n\t\tvar eased,\n\t\t\thooks = Tween.propHooks[ this.prop ];\n\n\t\tif ( this.options.duration ) {\n\t\t\tthis.pos = eased = jQuery.easing[ this.easing ](\n\t\t\t\tpercent, this.options.duration * percent, 0, 1, this.options.duration\n\t\t\t);\n\t\t} else {\n\t\t\tthis.pos = eased = percent;\n\t\t}\n\t\tthis.now = ( this.end - this.start ) * eased + this.start;\n\n\t\tif ( this.options.step ) {\n\t\t\tthis.options.step.call( this.elem, this.now, this );\n\t\t}\n\n\t\tif ( hooks && hooks.set ) {\n\t\t\thooks.set( this );\n\t\t} else {\n\t\t\tTween.propHooks._default.set( this );\n\t\t}\n\t\treturn this;\n\t}\n};\n\nTween.prototype.init.prototype = Tween.prototype;\n\nTween.propHooks = {\n\t_default: {\n\t\tget: function( tween ) {\n\t\t\tvar result;\n\n\t\t\t// Use a property on the element directly when it is not a DOM element,\n\t\t\t// or when there is no matching style property that exists.\n\t\t\tif ( tween.elem.nodeType !== 1 ||\n\t\t\t\ttween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {\n\t\t\t\treturn tween.elem[ tween.prop ];\n\t\t\t}\n\n\t\t\t// Passing an empty string as a 3rd parameter to .css will automatically\n\t\t\t// attempt a parseFloat and fallback to a string if the parse fails.\n\t\t\t// Simple values such as \"10px\" are parsed to Float;\n\t\t\t// complex values such as \"rotate(1rad)\" are returned as-is.\n\t\t\tresult = jQuery.css( tween.elem, tween.prop, \"\" );\n\n\t\t\t// Empty strings, null, undefined and \"auto\" are converted to 0.\n\t\t\treturn !result || result === \"auto\" ? 0 : result;\n\t\t},\n\t\tset: function( tween ) {\n\n\t\t\t// Use step hook for back compat.\n\t\t\t// Use cssHook if its there.\n\t\t\t// Use .style if available and use plain properties where available.\n\t\t\tif ( jQuery.fx.step[ tween.prop ] ) {\n\t\t\t\tjQuery.fx.step[ tween.prop ]( tween );\n\t\t\t} else if ( tween.elem.nodeType === 1 && (\n\t\t\t\tjQuery.cssHooks[ tween.prop ] ||\n\t\t\t\t\ttween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {\n\t\t\t\tjQuery.style( tween.elem, tween.prop, tween.now + tween.unit );\n\t\t\t} else {\n\t\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t\t}\n\t\t}\n\t}\n};\n\n// Support: IE <=9 only\n// Panic based approach to setting things on disconnected nodes\nTween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {\n\tset: function( tween ) {\n\t\tif ( tween.elem.nodeType && tween.elem.parentNode ) {\n\t\t\ttween.elem[ tween.prop ] = tween.now;\n\t\t}\n\t}\n};\n\njQuery.easing = {\n\tlinear: function( p ) {\n\t\treturn p;\n\t},\n\tswing: function( p ) {\n\t\treturn 0.5 - Math.cos( p * Math.PI ) / 2;\n\t},\n\t_default: \"swing\"\n};\n\njQuery.fx = Tween.prototype.init;\n\n// Back compat <1.8 extension point\njQuery.fx.step = {};\n\n\n\n\nvar\n\tfxNow, inProgress,\n\trfxtypes = /^(?:toggle|show|hide)$/,\n\trrun = /queueHooks$/;\n\nfunction schedule() {\n\tif ( inProgress ) {\n\t\tif ( document.hidden === false && window.requestAnimationFrame ) {\n\t\t\twindow.requestAnimationFrame( schedule );\n\t\t} else {\n\t\t\twindow.setTimeout( schedule, jQuery.fx.interval );\n\t\t}\n\n\t\tjQuery.fx.tick();\n\t}\n}\n\n// Animations created synchronously will run synchronously\nfunction createFxNow() {\n\twindow.setTimeout( function() {\n\t\tfxNow = undefined;\n\t} );\n\treturn ( fxNow = Date.now() );\n}\n\n// Generate parameters to create a standard animation\nfunction genFx( type, includeWidth ) {\n\tvar which,\n\t\ti = 0,\n\t\tattrs = { height: type };\n\n\t// If we include width, step value is 1 to do all cssExpand values,\n\t// otherwise step value is 2 to skip over Left and Right\n\tincludeWidth = includeWidth ? 1 : 0;\n\tfor ( ; i < 4; i += 2 - includeWidth ) {\n\t\twhich = cssExpand[ i ];\n\t\tattrs[ \"margin\" + which ] = attrs[ \"padding\" + which ] = type;\n\t}\n\n\tif ( includeWidth ) {\n\t\tattrs.opacity = attrs.width = type;\n\t}\n\n\treturn attrs;\n}\n\nfunction createTween( value, prop, animation ) {\n\tvar tween,\n\t\tcollection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ \"*\" ] ),\n\t\tindex = 0,\n\t\tlength = collection.length;\n\tfor ( ; index < length; index++ ) {\n\t\tif ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {\n\n\t\t\t// We're done with this property\n\t\t\treturn tween;\n\t\t}\n\t}\n}\n\nfunction defaultPrefilter( elem, props, opts ) {\n\tvar prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,\n\t\tisBox = \"width\" in props || \"height\" in props,\n\t\tanim = this,\n\t\torig = {},\n\t\tstyle = elem.style,\n\t\thidden = elem.nodeType && isHiddenWithinTree( elem ),\n\t\tdataShow = dataPriv.get( elem, \"fxshow\" );\n\n\t// Queue-skipping animations hijack the fx hooks\n\tif ( !opts.queue ) {\n\t\thooks = jQuery._queueHooks( elem, \"fx\" );\n\t\tif ( hooks.unqueued == null ) {\n\t\t\thooks.unqueued = 0;\n\t\t\toldfire = hooks.empty.fire;\n\t\t\thooks.empty.fire = function() {\n\t\t\t\tif ( !hooks.unqueued ) {\n\t\t\t\t\toldfire();\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\thooks.unqueued++;\n\n\t\tanim.always( function() {\n\n\t\t\t// Ensure the complete handler is called before this completes\n\t\t\tanim.always( function() {\n\t\t\t\thooks.unqueued--;\n\t\t\t\tif ( !jQuery.queue( elem, \"fx\" ).length ) {\n\t\t\t\t\thooks.empty.fire();\n\t\t\t\t}\n\t\t\t} );\n\t\t} );\n\t}\n\n\t// Detect show/hide animations\n\tfor ( prop in props ) {\n\t\tvalue = props[ prop ];\n\t\tif ( rfxtypes.test( value ) ) {\n\t\t\tdelete props[ prop ];\n\t\t\ttoggle = toggle || value === \"toggle\";\n\t\t\tif ( value === ( hidden ? \"hide\" : \"show\" ) ) {\n\n\t\t\t\t// Pretend to be hidden if this is a \"show\" and\n\t\t\t\t// there is still data from a stopped show/hide\n\t\t\t\tif ( value === \"show\" && dataShow && dataShow[ prop ] !== undefined ) {\n\t\t\t\t\thidden = true;\n\n\t\t\t\t// Ignore all other no-op show/hide data\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\torig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );\n\t\t}\n\t}\n\n\t// Bail out if this is a no-op like .hide().hide()\n\tpropTween = !jQuery.isEmptyObject( props );\n\tif ( !propTween && jQuery.isEmptyObject( orig ) ) {\n\t\treturn;\n\t}\n\n\t// Restrict \"overflow\" and \"display\" styles during box animations\n\tif ( isBox && elem.nodeType === 1 ) {\n\n\t\t// Support: IE <=9 - 11, Edge 12 - 15\n\t\t// Record all 3 overflow attributes because IE does not infer the shorthand\n\t\t// from identically-valued overflowX and overflowY and Edge just mirrors\n\t\t// the overflowX value there.\n\t\topts.overflow = [ style.overflow, style.overflowX, style.overflowY ];\n\n\t\t// Identify a display type, preferring old show/hide data over the CSS cascade\n\t\trestoreDisplay = dataShow && dataShow.display;\n\t\tif ( restoreDisplay == null ) {\n\t\t\trestoreDisplay = dataPriv.get( elem, \"display\" );\n\t\t}\n\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\tif ( display === \"none\" ) {\n\t\t\tif ( restoreDisplay ) {\n\t\t\t\tdisplay = restoreDisplay;\n\t\t\t} else {\n\n\t\t\t\t// Get nonempty value(s) by temporarily forcing visibility\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t\trestoreDisplay = elem.style.display || restoreDisplay;\n\t\t\t\tdisplay = jQuery.css( elem, \"display\" );\n\t\t\t\tshowHide( [ elem ] );\n\t\t\t}\n\t\t}\n\n\t\t// Animate inline elements as inline-block\n\t\tif ( display === \"inline\" || display === \"inline-block\" && restoreDisplay != null ) {\n\t\t\tif ( jQuery.css( elem, \"float\" ) === \"none\" ) {\n\n\t\t\t\t// Restore the original display value at the end of pure show/hide animations\n\t\t\t\tif ( !propTween ) {\n\t\t\t\t\tanim.done( function() {\n\t\t\t\t\t\tstyle.display = restoreDisplay;\n\t\t\t\t\t} );\n\t\t\t\t\tif ( restoreDisplay == null ) {\n\t\t\t\t\t\tdisplay = style.display;\n\t\t\t\t\t\trestoreDisplay = display === \"none\" ? \"\" : display;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstyle.display = \"inline-block\";\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( opts.overflow ) {\n\t\tstyle.overflow = \"hidden\";\n\t\tanim.always( function() {\n\t\t\tstyle.overflow = opts.overflow[ 0 ];\n\t\t\tstyle.overflowX = opts.overflow[ 1 ];\n\t\t\tstyle.overflowY = opts.overflow[ 2 ];\n\t\t} );\n\t}\n\n\t// Implement show/hide animations\n\tpropTween = false;\n\tfor ( prop in orig ) {\n\n\t\t// General show/hide setup for this element animation\n\t\tif ( !propTween ) {\n\t\t\tif ( dataShow ) {\n\t\t\t\tif ( \"hidden\" in dataShow ) {\n\t\t\t\t\thidden = dataShow.hidden;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdataShow = dataPriv.access( elem, \"fxshow\", { display: restoreDisplay } );\n\t\t\t}\n\n\t\t\t// Store hidden/visible for toggle so `.stop().toggle()` \"reverses\"\n\t\t\tif ( toggle ) {\n\t\t\t\tdataShow.hidden = !hidden;\n\t\t\t}\n\n\t\t\t// Show elements before animating them\n\t\t\tif ( hidden ) {\n\t\t\t\tshowHide( [ elem ], true );\n\t\t\t}\n\n\t\t\t/* eslint-disable no-loop-func */\n\n\t\t\tanim.done( function() {\n\n\t\t\t\t/* eslint-enable no-loop-func */\n\n\t\t\t\t// The final step of a \"hide\" animation is actually hiding the element\n\t\t\t\tif ( !hidden ) {\n\t\t\t\t\tshowHide( [ elem ] );\n\t\t\t\t}\n\t\t\t\tdataPriv.remove( elem, \"fxshow\" );\n\t\t\t\tfor ( prop in orig ) {\n\t\t\t\t\tjQuery.style( elem, prop, orig[ prop ] );\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\t// Per-property setup\n\t\tpropTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );\n\t\tif ( !( prop in dataShow ) ) {\n\t\t\tdataShow[ prop ] = propTween.start;\n\t\t\tif ( hidden ) {\n\t\t\t\tpropTween.end = propTween.start;\n\t\t\t\tpropTween.start = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction propFilter( props, specialEasing ) {\n\tvar index, name, easing, value, hooks;\n\n\t// camelCase, specialEasing and expand cssHook pass\n\tfor ( index in props ) {\n\t\tname = camelCase( index );\n\t\teasing = specialEasing[ name ];\n\t\tvalue = props[ index ];\n\t\tif ( Array.isArray( value ) ) {\n\t\t\teasing = value[ 1 ];\n\t\t\tvalue = props[ index ] = value[ 0 ];\n\t\t}\n\n\t\tif ( index !== name ) {\n\t\t\tprops[ name ] = value;\n\t\t\tdelete props[ index ];\n\t\t}\n\n\t\thooks = jQuery.cssHooks[ name ];\n\t\tif ( hooks && \"expand\" in hooks ) {\n\t\t\tvalue = hooks.expand( value );\n\t\t\tdelete props[ name ];\n\n\t\t\t// Not quite $.extend, this won't overwrite existing keys.\n\t\t\t// Reusing 'index' because we have the correct \"name\"\n\t\t\tfor ( index in value ) {\n\t\t\t\tif ( !( index in props ) ) {\n\t\t\t\t\tprops[ index ] = value[ index ];\n\t\t\t\t\tspecialEasing[ index ] = easing;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tspecialEasing[ name ] = easing;\n\t\t}\n\t}\n}\n\nfunction Animation( elem, properties, options ) {\n\tvar result,\n\t\tstopped,\n\t\tindex = 0,\n\t\tlength = Animation.prefilters.length,\n\t\tdeferred = jQuery.Deferred().always( function() {\n\n\t\t\t// Don't match elem in the :animated selector\n\t\t\tdelete tick.elem;\n\t\t} ),\n\t\ttick = function() {\n\t\t\tif ( stopped ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tvar currentTime = fxNow || createFxNow(),\n\t\t\t\tremaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),\n\n\t\t\t\t// Support: Android 2.3 only\n\t\t\t\t// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)\n\t\t\t\ttemp = remaining / animation.duration || 0,\n\t\t\t\tpercent = 1 - temp,\n\t\t\t\tindex = 0,\n\t\t\t\tlength = animation.tweens.length;\n\n\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\tanimation.tweens[ index ].run( percent );\n\t\t\t}\n\n\t\t\tdeferred.notifyWith( elem, [ animation, percent, remaining ] );\n\n\t\t\t// If there's more to do, yield\n\t\t\tif ( percent < 1 && length ) {\n\t\t\t\treturn remaining;\n\t\t\t}\n\n\t\t\t// If this was an empty animation, synthesize a final progress notification\n\t\t\tif ( !length ) {\n\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t}\n\n\t\t\t// Resolve the animation and report its conclusion\n\t\t\tdeferred.resolveWith( elem, [ animation ] );\n\t\t\treturn false;\n\t\t},\n\t\tanimation = deferred.promise( {\n\t\t\telem: elem,\n\t\t\tprops: jQuery.extend( {}, properties ),\n\t\t\topts: jQuery.extend( true, {\n\t\t\t\tspecialEasing: {},\n\t\t\t\teasing: jQuery.easing._default\n\t\t\t}, options ),\n\t\t\toriginalProperties: properties,\n\t\t\toriginalOptions: options,\n\t\t\tstartTime: fxNow || createFxNow(),\n\t\t\tduration: options.duration,\n\t\t\ttweens: [],\n\t\t\tcreateTween: function( prop, end ) {\n\t\t\t\tvar tween = jQuery.Tween( elem, animation.opts, prop, end,\n\t\t\t\t\tanimation.opts.specialEasing[ prop ] || animation.opts.easing );\n\t\t\t\tanimation.tweens.push( tween );\n\t\t\t\treturn tween;\n\t\t\t},\n\t\t\tstop: function( gotoEnd ) {\n\t\t\t\tvar index = 0,\n\n\t\t\t\t\t// If we are going to the end, we want to run all the tweens\n\t\t\t\t\t// otherwise we skip this part\n\t\t\t\t\tlength = gotoEnd ? animation.tweens.length : 0;\n\t\t\t\tif ( stopped ) {\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t\tstopped = true;\n\t\t\t\tfor ( ; index < length; index++ ) {\n\t\t\t\t\tanimation.tweens[ index ].run( 1 );\n\t\t\t\t}\n\n\t\t\t\t// Resolve when we played the last frame; otherwise, reject\n\t\t\t\tif ( gotoEnd ) {\n\t\t\t\t\tdeferred.notifyWith( elem, [ animation, 1, 0 ] );\n\t\t\t\t\tdeferred.resolveWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t} else {\n\t\t\t\t\tdeferred.rejectWith( elem, [ animation, gotoEnd ] );\n\t\t\t\t}\n\t\t\t\treturn this;\n\t\t\t}\n\t\t} ),\n\t\tprops = animation.props;\n\n\tpropFilter( props, animation.opts.specialEasing );\n\n\tfor ( ; index < length; index++ ) {\n\t\tresult = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );\n\t\tif ( result ) {\n\t\t\tif ( isFunction( result.stop ) ) {\n\t\t\t\tjQuery._queueHooks( animation.elem, animation.opts.queue ).stop =\n\t\t\t\t\tresult.stop.bind( result );\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tjQuery.map( props, createTween, animation );\n\n\tif ( isFunction( animation.opts.start ) ) {\n\t\tanimation.opts.start.call( elem, animation );\n\t}\n\n\t// Attach callbacks from options\n\tanimation\n\t\t.progress( animation.opts.progress )\n\t\t.done( animation.opts.done, animation.opts.complete )\n\t\t.fail( animation.opts.fail )\n\t\t.always( animation.opts.always );\n\n\tjQuery.fx.timer(\n\t\tjQuery.extend( tick, {\n\t\t\telem: elem,\n\t\t\tanim: animation,\n\t\t\tqueue: animation.opts.queue\n\t\t} )\n\t);\n\n\treturn animation;\n}\n\njQuery.Animation = jQuery.extend( Animation, {\n\n\ttweeners: {\n\t\t\"*\": [ function( prop, value ) {\n\t\t\tvar tween = this.createTween( prop, value );\n\t\t\tadjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );\n\t\t\treturn tween;\n\t\t} ]\n\t},\n\n\ttweener: function( props, callback ) {\n\t\tif ( isFunction( props ) ) {\n\t\t\tcallback = props;\n\t\t\tprops = [ \"*\" ];\n\t\t} else {\n\t\t\tprops = props.match( rnothtmlwhite );\n\t\t}\n\n\t\tvar prop,\n\t\t\tindex = 0,\n\t\t\tlength = props.length;\n\n\t\tfor ( ; index < length; index++ ) {\n\t\t\tprop = props[ index ];\n\t\t\tAnimation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];\n\t\t\tAnimation.tweeners[ prop ].unshift( callback );\n\t\t}\n\t},\n\n\tprefilters: [ defaultPrefilter ],\n\n\tprefilter: function( callback, prepend ) {\n\t\tif ( prepend ) {\n\t\t\tAnimation.prefilters.unshift( callback );\n\t\t} else {\n\t\t\tAnimation.prefilters.push( callback );\n\t\t}\n\t}\n} );\n\njQuery.speed = function( speed, easing, fn ) {\n\tvar opt = speed && typeof speed === \"object\" ? jQuery.extend( {}, speed ) : {\n\t\tcomplete: fn || !fn && easing ||\n\t\t\tisFunction( speed ) && speed,\n\t\tduration: speed,\n\t\teasing: fn && easing || easing && !isFunction( easing ) && easing\n\t};\n\n\t// Go to the end state if fx are off\n\tif ( jQuery.fx.off ) {\n\t\topt.duration = 0;\n\n\t} else {\n\t\tif ( typeof opt.duration !== \"number\" ) {\n\t\t\tif ( opt.duration in jQuery.fx.speeds ) {\n\t\t\t\topt.duration = jQuery.fx.speeds[ opt.duration ];\n\n\t\t\t} else {\n\t\t\t\topt.duration = jQuery.fx.speeds._default;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Normalize opt.queue - true/undefined/null -> \"fx\"\n\tif ( opt.queue == null || opt.queue === true ) {\n\t\topt.queue = \"fx\";\n\t}\n\n\t// Queueing\n\topt.old = opt.complete;\n\n\topt.complete = function() {\n\t\tif ( isFunction( opt.old ) ) {\n\t\t\topt.old.call( this );\n\t\t}\n\n\t\tif ( opt.queue ) {\n\t\t\tjQuery.dequeue( this, opt.queue );\n\t\t}\n\t};\n\n\treturn opt;\n};\n\njQuery.fn.extend( {\n\tfadeTo: function( speed, to, easing, callback ) {\n\n\t\t// Show any hidden elements after setting opacity to 0\n\t\treturn this.filter( isHiddenWithinTree ).css( \"opacity\", 0 ).show()\n\n\t\t\t// Animate to the value specified\n\t\t\t.end().animate( { opacity: to }, speed, easing, callback );\n\t},\n\tanimate: function( prop, speed, easing, callback ) {\n\t\tvar empty = jQuery.isEmptyObject( prop ),\n\t\t\toptall = jQuery.speed( speed, easing, callback ),\n\t\t\tdoAnimation = function() {\n\n\t\t\t\t// Operate on a copy of prop so per-property easing won't be lost\n\t\t\t\tvar anim = Animation( this, jQuery.extend( {}, prop ), optall );\n\n\t\t\t\t// Empty animations, or finishing resolves immediately\n\t\t\t\tif ( empty || dataPriv.get( this, \"finish\" ) ) {\n\t\t\t\t\tanim.stop( true );\n\t\t\t\t}\n\t\t\t};\n\n\t\tdoAnimation.finish = doAnimation;\n\n\t\treturn empty || optall.queue === false ?\n\t\t\tthis.each( doAnimation ) :\n\t\t\tthis.queue( optall.queue, doAnimation );\n\t},\n\tstop: function( type, clearQueue, gotoEnd ) {\n\t\tvar stopQueue = function( hooks ) {\n\t\t\tvar stop = hooks.stop;\n\t\t\tdelete hooks.stop;\n\t\t\tstop( gotoEnd );\n\t\t};\n\n\t\tif ( typeof type !== \"string\" ) {\n\t\t\tgotoEnd = clearQueue;\n\t\t\tclearQueue = type;\n\t\t\ttype = undefined;\n\t\t}\n\t\tif ( clearQueue ) {\n\t\t\tthis.queue( type || \"fx\", [] );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar dequeue = true,\n\t\t\t\tindex = type != null && type + \"queueHooks\",\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tdata = dataPriv.get( this );\n\n\t\t\tif ( index ) {\n\t\t\t\tif ( data[ index ] && data[ index ].stop ) {\n\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tfor ( index in data ) {\n\t\t\t\t\tif ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {\n\t\t\t\t\t\tstopQueue( data[ index ] );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this &&\n\t\t\t\t\t( type == null || timers[ index ].queue === type ) ) {\n\n\t\t\t\t\ttimers[ index ].anim.stop( gotoEnd );\n\t\t\t\t\tdequeue = false;\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Start the next in the queue if the last step wasn't forced.\n\t\t\t// Timers currently will call their complete callbacks, which\n\t\t\t// will dequeue but only if they were gotoEnd.\n\t\t\tif ( dequeue || !gotoEnd ) {\n\t\t\t\tjQuery.dequeue( this, type );\n\t\t\t}\n\t\t} );\n\t},\n\tfinish: function( type ) {\n\t\tif ( type !== false ) {\n\t\t\ttype = type || \"fx\";\n\t\t}\n\t\treturn this.each( function() {\n\t\t\tvar index,\n\t\t\t\tdata = dataPriv.get( this ),\n\t\t\t\tqueue = data[ type + \"queue\" ],\n\t\t\t\thooks = data[ type + \"queueHooks\" ],\n\t\t\t\ttimers = jQuery.timers,\n\t\t\t\tlength = queue ? queue.length : 0;\n\n\t\t\t// Enable finishing flag on private data\n\t\t\tdata.finish = true;\n\n\t\t\t// Empty the queue first\n\t\t\tjQuery.queue( this, type, [] );\n\n\t\t\tif ( hooks && hooks.stop ) {\n\t\t\t\thooks.stop.call( this, true );\n\t\t\t}\n\n\t\t\t// Look for any active animations, and finish them\n\t\t\tfor ( index = timers.length; index--; ) {\n\t\t\t\tif ( timers[ index ].elem === this && timers[ index ].queue === type ) {\n\t\t\t\t\ttimers[ index ].anim.stop( true );\n\t\t\t\t\ttimers.splice( index, 1 );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Look for any animations in the old queue and finish them\n\t\t\tfor ( index = 0; index < length; index++ ) {\n\t\t\t\tif ( queue[ index ] && queue[ index ].finish ) {\n\t\t\t\t\tqueue[ index ].finish.call( this );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Turn off finishing flag\n\t\t\tdelete data.finish;\n\t\t} );\n\t}\n} );\n\njQuery.each( [ \"toggle\", \"show\", \"hide\" ], function( _i, name ) {\n\tvar cssFn = jQuery.fn[ name ];\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn speed == null || typeof speed === \"boolean\" ?\n\t\t\tcssFn.apply( this, arguments ) :\n\t\t\tthis.animate( genFx( name, true ), speed, easing, callback );\n\t};\n} );\n\n// Generate shortcuts for custom animations\njQuery.each( {\n\tslideDown: genFx( \"show\" ),\n\tslideUp: genFx( \"hide\" ),\n\tslideToggle: genFx( \"toggle\" ),\n\tfadeIn: { opacity: \"show\" },\n\tfadeOut: { opacity: \"hide\" },\n\tfadeToggle: { opacity: \"toggle\" }\n}, function( name, props ) {\n\tjQuery.fn[ name ] = function( speed, easing, callback ) {\n\t\treturn this.animate( props, speed, easing, callback );\n\t};\n} );\n\njQuery.timers = [];\njQuery.fx.tick = function() {\n\tvar timer,\n\t\ti = 0,\n\t\ttimers = jQuery.timers;\n\n\tfxNow = Date.now();\n\n\tfor ( ; i < timers.length; i++ ) {\n\t\ttimer = timers[ i ];\n\n\t\t// Run the timer and safely remove it when done (allowing for external removal)\n\t\tif ( !timer() && timers[ i ] === timer ) {\n\t\t\ttimers.splice( i--, 1 );\n\t\t}\n\t}\n\n\tif ( !timers.length ) {\n\t\tjQuery.fx.stop();\n\t}\n\tfxNow = undefined;\n};\n\njQuery.fx.timer = function( timer ) {\n\tjQuery.timers.push( timer );\n\tjQuery.fx.start();\n};\n\njQuery.fx.interval = 13;\njQuery.fx.start = function() {\n\tif ( inProgress ) {\n\t\treturn;\n\t}\n\n\tinProgress = true;\n\tschedule();\n};\n\njQuery.fx.stop = function() {\n\tinProgress = null;\n};\n\njQuery.fx.speeds = {\n\tslow: 600,\n\tfast: 200,\n\n\t// Default speed\n\t_default: 400\n};\n\n\n// Based off of the plugin by Clint Helfers, with permission.\njQuery.fn.delay = function( time, type ) {\n\ttime = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;\n\ttype = type || \"fx\";\n\n\treturn this.queue( type, function( next, hooks ) {\n\t\tvar timeout = window.setTimeout( next, time );\n\t\thooks.stop = function() {\n\t\t\twindow.clearTimeout( timeout );\n\t\t};\n\t} );\n};\n\n\n( function() {\n\tvar input = document.createElement( \"input\" ),\n\t\tselect = document.createElement( \"select\" ),\n\t\topt = select.appendChild( document.createElement( \"option\" ) );\n\n\tinput.type = \"checkbox\";\n\n\t// Support: Android <=4.3 only\n\t// Default value for a checkbox should be \"on\"\n\tsupport.checkOn = input.value !== \"\";\n\n\t// Support: IE <=11 only\n\t// Must access selectedIndex to make default options select\n\tsupport.optSelected = opt.selected;\n\n\t// Support: IE <=11 only\n\t// An input loses its value after becoming a radio\n\tinput = document.createElement( \"input\" );\n\tinput.value = \"t\";\n\tinput.type = \"radio\";\n\tsupport.radioValue = input.value === \"t\";\n} )();\n\n\nvar boolHook,\n\tattrHandle = jQuery.expr.attrHandle;\n\njQuery.fn.extend( {\n\tattr: function( name, value ) {\n\t\treturn access( this, jQuery.attr, name, value, arguments.length > 1 );\n\t},\n\n\tremoveAttr: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.removeAttr( this, name );\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tattr: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set attributes on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fallback to prop when attributes are not supported\n\t\tif ( typeof elem.getAttribute === \"undefined\" ) {\n\t\t\treturn jQuery.prop( elem, name, value );\n\t\t}\n\n\t\t// Attribute hooks are determined by the lowercase version\n\t\t// Grab necessary hook if one is defined\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\t\t\thooks = jQuery.attrHooks[ name.toLowerCase() ] ||\n\t\t\t\t( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( value === null ) {\n\t\t\t\tjQuery.removeAttr( elem, name );\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\telem.setAttribute( name, value + \"\" );\n\t\t\treturn value;\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\tret = jQuery.find.attr( elem, name );\n\n\t\t// Non-existent attributes return null, we normalize to undefined\n\t\treturn ret == null ? undefined : ret;\n\t},\n\n\tattrHooks: {\n\t\ttype: {\n\t\t\tset: function( elem, value ) {\n\t\t\t\tif ( !support.radioValue && value === \"radio\" &&\n\t\t\t\t\tnodeName( elem, \"input\" ) ) {\n\t\t\t\t\tvar val = elem.value;\n\t\t\t\t\telem.setAttribute( \"type\", value );\n\t\t\t\t\tif ( val ) {\n\t\t\t\t\t\telem.value = val;\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\n\tremoveAttr: function( elem, value ) {\n\t\tvar name,\n\t\t\ti = 0,\n\n\t\t\t// Attribute names can contain non-HTML whitespace characters\n\t\t\t// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n\t\t\tattrNames = value && value.match( rnothtmlwhite );\n\n\t\tif ( attrNames && elem.nodeType === 1 ) {\n\t\t\twhile ( ( name = attrNames[ i++ ] ) ) {\n\t\t\t\telem.removeAttribute( name );\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Hooks for boolean attributes\nboolHook = {\n\tset: function( elem, value, name ) {\n\t\tif ( value === false ) {\n\n\t\t\t// Remove boolean attributes when set to false\n\t\t\tjQuery.removeAttr( elem, name );\n\t\t} else {\n\t\t\telem.setAttribute( name, name );\n\t\t}\n\t\treturn name;\n\t}\n};\n\njQuery.each( jQuery.expr.match.bool.source.match( /\\w+/g ), function( _i, name ) {\n\tvar getter = attrHandle[ name ] || jQuery.find.attr;\n\n\tattrHandle[ name ] = function( elem, name, isXML ) {\n\t\tvar ret, handle,\n\t\t\tlowercaseName = name.toLowerCase();\n\n\t\tif ( !isXML ) {\n\n\t\t\t// Avoid an infinite loop by temporarily removing this function from the getter\n\t\t\thandle = attrHandle[ lowercaseName ];\n\t\t\tattrHandle[ lowercaseName ] = ret;\n\t\t\tret = getter( elem, name, isXML ) != null ?\n\t\t\t\tlowercaseName :\n\t\t\t\tnull;\n\t\t\tattrHandle[ lowercaseName ] = handle;\n\t\t}\n\t\treturn ret;\n\t};\n} );\n\n\n\n\nvar rfocusable = /^(?:input|select|textarea|button)$/i,\n\trclickable = /^(?:a|area)$/i;\n\njQuery.fn.extend( {\n\tprop: function( name, value ) {\n\t\treturn access( this, jQuery.prop, name, value, arguments.length > 1 );\n\t},\n\n\tremoveProp: function( name ) {\n\t\treturn this.each( function() {\n\t\t\tdelete this[ jQuery.propFix[ name ] || name ];\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tprop: function( elem, name, value ) {\n\t\tvar ret, hooks,\n\t\t\tnType = elem.nodeType;\n\n\t\t// Don't get/set properties on text, comment and attribute nodes\n\t\tif ( nType === 3 || nType === 8 || nType === 2 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {\n\n\t\t\t// Fix name and attach hooks\n\t\t\tname = jQuery.propFix[ name ] || name;\n\t\t\thooks = jQuery.propHooks[ name ];\n\t\t}\n\n\t\tif ( value !== undefined ) {\n\t\t\tif ( hooks && \"set\" in hooks &&\n\t\t\t\t( ret = hooks.set( elem, value, name ) ) !== undefined ) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn ( elem[ name ] = value );\n\t\t}\n\n\t\tif ( hooks && \"get\" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn elem[ name ];\n\t},\n\n\tpropHooks: {\n\t\ttabIndex: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\t// Support: IE <=9 - 11 only\n\t\t\t\t// elem.tabIndex doesn't always return the\n\t\t\t\t// correct value when it hasn't been explicitly set\n\t\t\t\t// Use proper attribute retrieval (trac-12072)\n\t\t\t\tvar tabindex = jQuery.find.attr( elem, \"tabindex\" );\n\n\t\t\t\tif ( tabindex ) {\n\t\t\t\t\treturn parseInt( tabindex, 10 );\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\trfocusable.test( elem.nodeName ) ||\n\t\t\t\t\trclickable.test( elem.nodeName ) &&\n\t\t\t\t\telem.href\n\t\t\t\t) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\t},\n\n\tpropFix: {\n\t\t\"for\": \"htmlFor\",\n\t\t\"class\": \"className\"\n\t}\n} );\n\n// Support: IE <=11 only\n// Accessing the selectedIndex property\n// forces the browser to respect setting selected\n// on the option\n// The getter ensures a default option is selected\n// when in an optgroup\n// eslint rule \"no-unused-expressions\" is disabled for this code\n// since it considers such accessions noop\nif ( !support.optSelected ) {\n\tjQuery.propHooks.selected = {\n\t\tget: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent && parent.parentNode ) {\n\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t}\n\t\t\treturn null;\n\t\t},\n\t\tset: function( elem ) {\n\n\t\t\t/* eslint no-unused-expressions: \"off\" */\n\n\t\t\tvar parent = elem.parentNode;\n\t\t\tif ( parent ) {\n\t\t\t\tparent.selectedIndex;\n\n\t\t\t\tif ( parent.parentNode ) {\n\t\t\t\t\tparent.parentNode.selectedIndex;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\njQuery.each( [\n\t\"tabIndex\",\n\t\"readOnly\",\n\t\"maxLength\",\n\t\"cellSpacing\",\n\t\"cellPadding\",\n\t\"rowSpan\",\n\t\"colSpan\",\n\t\"useMap\",\n\t\"frameBorder\",\n\t\"contentEditable\"\n], function() {\n\tjQuery.propFix[ this.toLowerCase() ] = this;\n} );\n\n\n\n\n\t// Strip and collapse whitespace according to HTML spec\n\t// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\n\tfunction stripAndCollapse( value ) {\n\t\tvar tokens = value.match( rnothtmlwhite ) || [];\n\t\treturn tokens.join( \" \" );\n\t}\n\n\nfunction getClass( elem ) {\n\treturn elem.getAttribute && elem.getAttribute( \"class\" ) || \"\";\n}\n\nfunction classesToArray( value ) {\n\tif ( Array.isArray( value ) ) {\n\t\treturn value;\n\t}\n\tif ( typeof value === \"string\" ) {\n\t\treturn value.match( rnothtmlwhite ) || [];\n\t}\n\treturn [];\n}\n\njQuery.fn.extend( {\n\taddClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).addClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\t\t\t\t\t\tif ( cur.indexOf( \" \" + className + \" \" ) < 0 ) {\n\t\t\t\t\t\t\tcur += className + \" \";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\tremoveClass: function( value ) {\n\t\tvar classNames, cur, curValue, className, i, finalValue;\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( j ) {\n\t\t\t\tjQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );\n\t\t\t} );\n\t\t}\n\n\t\tif ( !arguments.length ) {\n\t\t\treturn this.attr( \"class\", \"\" );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\tif ( classNames.length ) {\n\t\t\treturn this.each( function() {\n\t\t\t\tcurValue = getClass( this );\n\n\t\t\t\t// This expression is here for better compressibility (see addClass)\n\t\t\t\tcur = this.nodeType === 1 && ( \" \" + stripAndCollapse( curValue ) + \" \" );\n\n\t\t\t\tif ( cur ) {\n\t\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t\t// Remove *all* instances\n\t\t\t\t\t\twhile ( cur.indexOf( \" \" + className + \" \" ) > -1 ) {\n\t\t\t\t\t\t\tcur = cur.replace( \" \" + className + \" \", \" \" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Only assign if different to avoid unneeded rendering.\n\t\t\t\t\tfinalValue = stripAndCollapse( cur );\n\t\t\t\t\tif ( curValue !== finalValue ) {\n\t\t\t\t\t\tthis.setAttribute( \"class\", finalValue );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\ttoggleClass: function( value, stateVal ) {\n\t\tvar classNames, className, i, self,\n\t\t\ttype = typeof value,\n\t\t\tisValidValue = type === \"string\" || Array.isArray( value );\n\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).toggleClass(\n\t\t\t\t\tvalue.call( this, i, getClass( this ), stateVal ),\n\t\t\t\t\tstateVal\n\t\t\t\t);\n\t\t\t} );\n\t\t}\n\n\t\tif ( typeof stateVal === \"boolean\" && isValidValue ) {\n\t\t\treturn stateVal ? this.addClass( value ) : this.removeClass( value );\n\t\t}\n\n\t\tclassNames = classesToArray( value );\n\n\t\treturn this.each( function() {\n\t\t\tif ( isValidValue ) {\n\n\t\t\t\t// Toggle individual class names\n\t\t\t\tself = jQuery( this );\n\n\t\t\t\tfor ( i = 0; i < classNames.length; i++ ) {\n\t\t\t\t\tclassName = classNames[ i ];\n\n\t\t\t\t\t// Check each className given, space separated list\n\t\t\t\t\tif ( self.hasClass( className ) ) {\n\t\t\t\t\t\tself.removeClass( className );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tself.addClass( className );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Toggle whole class name\n\t\t\t} else if ( value === undefined || type === \"boolean\" ) {\n\t\t\t\tclassName = getClass( this );\n\t\t\t\tif ( className ) {\n\n\t\t\t\t\t// Store className if set\n\t\t\t\t\tdataPriv.set( this, \"__className__\", className );\n\t\t\t\t}\n\n\t\t\t\t// If the element has a class name or if we're passed `false`,\n\t\t\t\t// then remove the whole classname (if there was one, the above saved it).\n\t\t\t\t// Otherwise bring back whatever was previously saved (if anything),\n\t\t\t\t// falling back to the empty string if nothing was stored.\n\t\t\t\tif ( this.setAttribute ) {\n\t\t\t\t\tthis.setAttribute( \"class\",\n\t\t\t\t\t\tclassName || value === false ?\n\t\t\t\t\t\t\t\"\" :\n\t\t\t\t\t\t\tdataPriv.get( this, \"__className__\" ) || \"\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t},\n\n\thasClass: function( selector ) {\n\t\tvar className, elem,\n\t\t\ti = 0;\n\n\t\tclassName = \" \" + selector + \" \";\n\t\twhile ( ( elem = this[ i++ ] ) ) {\n\t\t\tif ( elem.nodeType === 1 &&\n\t\t\t\t( \" \" + stripAndCollapse( getClass( elem ) ) + \" \" ).indexOf( className ) > -1 ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n} );\n\n\n\n\nvar rreturn = /\\r/g;\n\njQuery.fn.extend( {\n\tval: function( value ) {\n\t\tvar hooks, ret, valueIsFunction,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !arguments.length ) {\n\t\t\tif ( elem ) {\n\t\t\t\thooks = jQuery.valHooks[ elem.type ] ||\n\t\t\t\t\tjQuery.valHooks[ elem.nodeName.toLowerCase() ];\n\n\t\t\t\tif ( hooks &&\n\t\t\t\t\t\"get\" in hooks &&\n\t\t\t\t\t( ret = hooks.get( elem, \"value\" ) ) !== undefined\n\t\t\t\t) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\n\t\t\t\tret = elem.value;\n\n\t\t\t\t// Handle most common string cases\n\t\t\t\tif ( typeof ret === \"string\" ) {\n\t\t\t\t\treturn ret.replace( rreturn, \"\" );\n\t\t\t\t}\n\n\t\t\t\t// Handle cases where value is null/undef or number\n\t\t\t\treturn ret == null ? \"\" : ret;\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tvalueIsFunction = isFunction( value );\n\n\t\treturn this.each( function( i ) {\n\t\t\tvar val;\n\n\t\t\tif ( this.nodeType !== 1 ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ( valueIsFunction ) {\n\t\t\t\tval = value.call( this, i, jQuery( this ).val() );\n\t\t\t} else {\n\t\t\t\tval = value;\n\t\t\t}\n\n\t\t\t// Treat null/undefined as \"\"; convert numbers to string\n\t\t\tif ( val == null ) {\n\t\t\t\tval = \"\";\n\n\t\t\t} else if ( typeof val === \"number\" ) {\n\t\t\t\tval += \"\";\n\n\t\t\t} else if ( Array.isArray( val ) ) {\n\t\t\t\tval = jQuery.map( val, function( value ) {\n\t\t\t\t\treturn value == null ? \"\" : value + \"\";\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\thooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];\n\n\t\t\t// If set returns undefined, fall back to normal setting\n\t\t\tif ( !hooks || !( \"set\" in hooks ) || hooks.set( this, val, \"value\" ) === undefined ) {\n\t\t\t\tthis.value = val;\n\t\t\t}\n\t\t} );\n\t}\n} );\n\njQuery.extend( {\n\tvalHooks: {\n\t\toption: {\n\t\t\tget: function( elem ) {\n\n\t\t\t\tvar val = jQuery.find.attr( elem, \"value\" );\n\t\t\t\treturn val != null ?\n\t\t\t\t\tval :\n\n\t\t\t\t\t// Support: IE <=10 - 11 only\n\t\t\t\t\t// option.text throws exceptions (trac-14686, trac-14858)\n\t\t\t\t\t// Strip and collapse whitespace\n\t\t\t\t\t// https://html.spec.whatwg.org/#strip-and-collapse-whitespace\n\t\t\t\t\tstripAndCollapse( jQuery.text( elem ) );\n\t\t\t}\n\t\t},\n\t\tselect: {\n\t\t\tget: function( elem ) {\n\t\t\t\tvar value, option, i,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tindex = elem.selectedIndex,\n\t\t\t\t\tone = elem.type === \"select-one\",\n\t\t\t\t\tvalues = one ? null : [],\n\t\t\t\t\tmax = one ? index + 1 : options.length;\n\n\t\t\t\tif ( index < 0 ) {\n\t\t\t\t\ti = max;\n\n\t\t\t\t} else {\n\t\t\t\t\ti = one ? index : 0;\n\t\t\t\t}\n\n\t\t\t\t// Loop through all the selected options\n\t\t\t\tfor ( ; i < max; i++ ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t// IE8-9 doesn't update selected after form reset (trac-2551)\n\t\t\t\t\tif ( ( option.selected || i === index ) &&\n\n\t\t\t\t\t\t\t// Don't return options that are disabled or in a disabled optgroup\n\t\t\t\t\t\t\t!option.disabled &&\n\t\t\t\t\t\t\t( !option.parentNode.disabled ||\n\t\t\t\t\t\t\t\t!nodeName( option.parentNode, \"optgroup\" ) ) ) {\n\n\t\t\t\t\t\t// Get the specific value for the option\n\t\t\t\t\t\tvalue = jQuery( option ).val();\n\n\t\t\t\t\t\t// We don't need an array for one selects\n\t\t\t\t\t\tif ( one ) {\n\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi-Selects return an array\n\t\t\t\t\t\tvalues.push( value );\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn values;\n\t\t\t},\n\n\t\t\tset: function( elem, value ) {\n\t\t\t\tvar optionSet, option,\n\t\t\t\t\toptions = elem.options,\n\t\t\t\t\tvalues = jQuery.makeArray( value ),\n\t\t\t\t\ti = options.length;\n\n\t\t\t\twhile ( i-- ) {\n\t\t\t\t\toption = options[ i ];\n\n\t\t\t\t\t/* eslint-disable no-cond-assign */\n\n\t\t\t\t\tif ( option.selected =\n\t\t\t\t\t\tjQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1\n\t\t\t\t\t) {\n\t\t\t\t\t\toptionSet = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t/* eslint-enable no-cond-assign */\n\t\t\t\t}\n\n\t\t\t\t// Force browsers to behave consistently when non-matching value is set\n\t\t\t\tif ( !optionSet ) {\n\t\t\t\t\telem.selectedIndex = -1;\n\t\t\t\t}\n\t\t\t\treturn values;\n\t\t\t}\n\t\t}\n\t}\n} );\n\n// Radios and checkboxes getter/setter\njQuery.each( [ \"radio\", \"checkbox\" ], function() {\n\tjQuery.valHooks[ this ] = {\n\t\tset: function( elem, value ) {\n\t\t\tif ( Array.isArray( value ) ) {\n\t\t\t\treturn ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );\n\t\t\t}\n\t\t}\n\t};\n\tif ( !support.checkOn ) {\n\t\tjQuery.valHooks[ this ].get = function( elem ) {\n\t\t\treturn elem.getAttribute( \"value\" ) === null ? \"on\" : elem.value;\n\t\t};\n\t}\n} );\n\n\n\n\n// Return jQuery for attributes-only inclusion\n\n\nsupport.focusin = \"onfocusin\" in window;\n\n\nvar rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,\n\tstopPropagationCallback = function( e ) {\n\t\te.stopPropagation();\n\t};\n\njQuery.extend( jQuery.event, {\n\n\ttrigger: function( event, data, elem, onlyHandlers ) {\n\n\t\tvar i, cur, tmp, bubbleType, ontype, handle, special, lastElement,\n\t\t\teventPath = [ elem || document ],\n\t\t\ttype = hasOwn.call( event, \"type\" ) ? event.type : event,\n\t\t\tnamespaces = hasOwn.call( event, \"namespace\" ) ? event.namespace.split( \".\" ) : [];\n\n\t\tcur = lastElement = tmp = elem = elem || document;\n\n\t\t// Don't do events on text and comment nodes\n\t\tif ( elem.nodeType === 3 || elem.nodeType === 8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// focus/blur morphs to focusin/out; ensure we're not firing them right now\n\t\tif ( rfocusMorph.test( type + jQuery.event.triggered ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( type.indexOf( \".\" ) > -1 ) {\n\n\t\t\t// Namespaced trigger; create a regexp to match event type in handle()\n\t\t\tnamespaces = type.split( \".\" );\n\t\t\ttype = namespaces.shift();\n\t\t\tnamespaces.sort();\n\t\t}\n\t\tontype = type.indexOf( \":\" ) < 0 && \"on\" + type;\n\n\t\t// Caller can pass in a jQuery.Event object, Object, or just an event type string\n\t\tevent = event[ jQuery.expando ] ?\n\t\t\tevent :\n\t\t\tnew jQuery.Event( type, typeof event === \"object\" && event );\n\n\t\t// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)\n\t\tevent.isTrigger = onlyHandlers ? 2 : 3;\n\t\tevent.namespace = namespaces.join( \".\" );\n\t\tevent.rnamespace = event.namespace ?\n\t\t\tnew RegExp( \"(^|\\\\.)\" + namespaces.join( \"\\\\.(?:.*\\\\.|)\" ) + \"(\\\\.|$)\" ) :\n\t\t\tnull;\n\n\t\t// Clean up the event in case it is being reused\n\t\tevent.result = undefined;\n\t\tif ( !event.target ) {\n\t\t\tevent.target = elem;\n\t\t}\n\n\t\t// Clone any incoming data and prepend the event, creating the handler arg list\n\t\tdata = data == null ?\n\t\t\t[ event ] :\n\t\t\tjQuery.makeArray( data, [ event ] );\n\n\t\t// Allow special events to draw outside the lines\n\t\tspecial = jQuery.event.special[ type ] || {};\n\t\tif ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Determine event propagation path in advance, per W3C events spec (trac-9951)\n\t\t// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)\n\t\tif ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {\n\n\t\t\tbubbleType = special.delegateType || type;\n\t\t\tif ( !rfocusMorph.test( bubbleType + type ) ) {\n\t\t\t\tcur = cur.parentNode;\n\t\t\t}\n\t\t\tfor ( ; cur; cur = cur.parentNode ) {\n\t\t\t\teventPath.push( cur );\n\t\t\t\ttmp = cur;\n\t\t\t}\n\n\t\t\t// Only add window if we got to document (e.g., not plain obj or detached DOM)\n\t\t\tif ( tmp === ( elem.ownerDocument || document ) ) {\n\t\t\t\teventPath.push( tmp.defaultView || tmp.parentWindow || window );\n\t\t\t}\n\t\t}\n\n\t\t// Fire handlers on the event path\n\t\ti = 0;\n\t\twhile ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {\n\t\t\tlastElement = cur;\n\t\t\tevent.type = i > 1 ?\n\t\t\t\tbubbleType :\n\t\t\t\tspecial.bindType || type;\n\n\t\t\t// jQuery handler\n\t\t\thandle = ( dataPriv.get( cur, \"events\" ) || Object.create( null ) )[ event.type ] &&\n\t\t\t\tdataPriv.get( cur, \"handle\" );\n\t\t\tif ( handle ) {\n\t\t\t\thandle.apply( cur, data );\n\t\t\t}\n\n\t\t\t// Native handler\n\t\t\thandle = ontype && cur[ ontype ];\n\t\t\tif ( handle && handle.apply && acceptData( cur ) ) {\n\t\t\t\tevent.result = handle.apply( cur, data );\n\t\t\t\tif ( event.result === false ) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tevent.type = type;\n\n\t\t// If nobody prevented the default action, do it now\n\t\tif ( !onlyHandlers && !event.isDefaultPrevented() ) {\n\n\t\t\tif ( ( !special._default ||\n\t\t\t\tspecial._default.apply( eventPath.pop(), data ) === false ) &&\n\t\t\t\tacceptData( elem ) ) {\n\n\t\t\t\t// Call a native DOM method on the target with the same name as the event.\n\t\t\t\t// Don't do default actions on window, that's where global variables be (trac-6170)\n\t\t\t\tif ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {\n\n\t\t\t\t\t// Don't re-trigger an onFOO event when we call its FOO() method\n\t\t\t\t\ttmp = elem[ ontype ];\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Prevent re-triggering of the same event, since we already bubbled it above\n\t\t\t\t\tjQuery.event.triggered = type;\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.addEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\telem[ type ]();\n\n\t\t\t\t\tif ( event.isPropagationStopped() ) {\n\t\t\t\t\t\tlastElement.removeEventListener( type, stopPropagationCallback );\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.event.triggered = undefined;\n\n\t\t\t\t\tif ( tmp ) {\n\t\t\t\t\t\telem[ ontype ] = tmp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn event.result;\n\t},\n\n\t// Piggyback on a donor event to simulate a different one\n\t// Used only for `focus(in | out)` events\n\tsimulate: function( type, elem, event ) {\n\t\tvar e = jQuery.extend(\n\t\t\tnew jQuery.Event(),\n\t\t\tevent,\n\t\t\t{\n\t\t\t\ttype: type,\n\t\t\t\tisSimulated: true\n\t\t\t}\n\t\t);\n\n\t\tjQuery.event.trigger( e, null, elem );\n\t}\n\n} );\n\njQuery.fn.extend( {\n\n\ttrigger: function( type, data ) {\n\t\treturn this.each( function() {\n\t\t\tjQuery.event.trigger( type, data, this );\n\t\t} );\n\t},\n\ttriggerHandler: function( type, data ) {\n\t\tvar elem = this[ 0 ];\n\t\tif ( elem ) {\n\t\t\treturn jQuery.event.trigger( type, data, elem, true );\n\t\t}\n\t}\n} );\n\n\n// Support: Firefox <=44\n// Firefox doesn't have focus(in | out) events\n// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787\n//\n// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1\n// focus(in | out) events fire after focus & blur events,\n// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order\n// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857\nif ( !support.focusin ) {\n\tjQuery.each( { focus: \"focusin\", blur: \"focusout\" }, function( orig, fix ) {\n\n\t\t// Attach a single capturing handler on the document while someone wants focusin/focusout\n\t\tvar handler = function( event ) {\n\t\t\tjQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );\n\t\t};\n\n\t\tjQuery.event.special[ fix ] = {\n\t\t\tsetup: function() {\n\n\t\t\t\t// Handle: regular nodes (via `this.ownerDocument`), window\n\t\t\t\t// (via `this.document`) & document (via `this`).\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix );\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.addEventListener( orig, handler, true );\n\t\t\t\t}\n\t\t\t\tdataPriv.access( doc, fix, ( attaches || 0 ) + 1 );\n\t\t\t},\n\t\t\tteardown: function() {\n\t\t\t\tvar doc = this.ownerDocument || this.document || this,\n\t\t\t\t\tattaches = dataPriv.access( doc, fix ) - 1;\n\n\t\t\t\tif ( !attaches ) {\n\t\t\t\t\tdoc.removeEventListener( orig, handler, true );\n\t\t\t\t\tdataPriv.remove( doc, fix );\n\n\t\t\t\t} else {\n\t\t\t\t\tdataPriv.access( doc, fix, attaches );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t} );\n}\nvar location = window.location;\n\nvar nonce = { guid: Date.now() };\n\nvar rquery = ( /\\?/ );\n\n\n\n// Cross-browser xml parsing\njQuery.parseXML = function( data ) {\n\tvar xml, parserErrorElem;\n\tif ( !data || typeof data !== \"string\" ) {\n\t\treturn null;\n\t}\n\n\t// Support: IE 9 - 11 only\n\t// IE throws on parseFromString with invalid input.\n\ttry {\n\t\txml = ( new window.DOMParser() ).parseFromString( data, \"text/xml\" );\n\t} catch ( e ) {}\n\n\tparserErrorElem = xml && xml.getElementsByTagName( \"parsererror\" )[ 0 ];\n\tif ( !xml || parserErrorElem ) {\n\t\tjQuery.error( \"Invalid XML: \" + (\n\t\t\tparserErrorElem ?\n\t\t\t\tjQuery.map( parserErrorElem.childNodes, function( el ) {\n\t\t\t\t\treturn el.textContent;\n\t\t\t\t} ).join( \"\\n\" ) :\n\t\t\t\tdata\n\t\t) );\n\t}\n\treturn xml;\n};\n\n\nvar\n\trbracket = /\\[\\]$/,\n\trCRLF = /\\r?\\n/g,\n\trsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,\n\trsubmittable = /^(?:input|select|textarea|keygen)/i;\n\nfunction buildParams( prefix, obj, traditional, add ) {\n\tvar name;\n\n\tif ( Array.isArray( obj ) ) {\n\n\t\t// Serialize array item.\n\t\tjQuery.each( obj, function( i, v ) {\n\t\t\tif ( traditional || rbracket.test( prefix ) ) {\n\n\t\t\t\t// Treat each array item as a scalar.\n\t\t\t\tadd( prefix, v );\n\n\t\t\t} else {\n\n\t\t\t\t// Item is non-scalar (array or object), encode its numeric index.\n\t\t\t\tbuildParams(\n\t\t\t\t\tprefix + \"[\" + ( typeof v === \"object\" && v != null ? i : \"\" ) + \"]\",\n\t\t\t\t\tv,\n\t\t\t\t\ttraditional,\n\t\t\t\t\tadd\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t} else if ( !traditional && toType( obj ) === \"object\" ) {\n\n\t\t// Serialize object item.\n\t\tfor ( name in obj ) {\n\t\t\tbuildParams( prefix + \"[\" + name + \"]\", obj[ name ], traditional, add );\n\t\t}\n\n\t} else {\n\n\t\t// Serialize scalar item.\n\t\tadd( prefix, obj );\n\t}\n}\n\n// Serialize an array of form elements or a set of\n// key/values into a query string\njQuery.param = function( a, traditional ) {\n\tvar prefix,\n\t\ts = [],\n\t\tadd = function( key, valueOrFunction ) {\n\n\t\t\t// If value is a function, invoke it and use its return value\n\t\t\tvar value = isFunction( valueOrFunction ) ?\n\t\t\t\tvalueOrFunction() :\n\t\t\t\tvalueOrFunction;\n\n\t\t\ts[ s.length ] = encodeURIComponent( key ) + \"=\" +\n\t\t\t\tencodeURIComponent( value == null ? \"\" : value );\n\t\t};\n\n\tif ( a == null ) {\n\t\treturn \"\";\n\t}\n\n\t// If an array was passed in, assume that it is an array of form elements.\n\tif ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {\n\n\t\t// Serialize the form elements\n\t\tjQuery.each( a, function() {\n\t\t\tadd( this.name, this.value );\n\t\t} );\n\n\t} else {\n\n\t\t// If traditional, encode the \"old\" way (the way 1.3.2 or older\n\t\t// did it), otherwise encode params recursively.\n\t\tfor ( prefix in a ) {\n\t\t\tbuildParams( prefix, a[ prefix ], traditional, add );\n\t\t}\n\t}\n\n\t// Return the resulting serialization\n\treturn s.join( \"&\" );\n};\n\njQuery.fn.extend( {\n\tserialize: function() {\n\t\treturn jQuery.param( this.serializeArray() );\n\t},\n\tserializeArray: function() {\n\t\treturn this.map( function() {\n\n\t\t\t// Can add propHook for \"elements\" to filter or add form elements\n\t\t\tvar elements = jQuery.prop( this, \"elements\" );\n\t\t\treturn elements ? jQuery.makeArray( elements ) : this;\n\t\t} ).filter( function() {\n\t\t\tvar type = this.type;\n\n\t\t\t// Use .is( \":disabled\" ) so that fieldset[disabled] works\n\t\t\treturn this.name && !jQuery( this ).is( \":disabled\" ) &&\n\t\t\t\trsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&\n\t\t\t\t( this.checked || !rcheckableType.test( type ) );\n\t\t} ).map( function( _i, elem ) {\n\t\t\tvar val = jQuery( this ).val();\n\n\t\t\tif ( val == null ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( Array.isArray( val ) ) {\n\t\t\t\treturn jQuery.map( val, function( val ) {\n\t\t\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\treturn { name: elem.name, value: val.replace( rCRLF, \"\\r\\n\" ) };\n\t\t} ).get();\n\t}\n} );\n\n\nvar\n\tr20 = /%20/g,\n\trhash = /#.*$/,\n\trantiCache = /([?&])_=[^&]*/,\n\trheaders = /^(.*?):[ \\t]*([^\\r\\n]*)$/mg,\n\n\t// trac-7653, trac-8125, trac-8152: local protocol detection\n\trlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,\n\trnoContent = /^(?:GET|HEAD)$/,\n\trprotocol = /^\\/\\//,\n\n\t/* Prefilters\n\t * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\n\t * 2) These are called:\n\t *    - BEFORE asking for a transport\n\t *    - AFTER param serialization (s.data is a string if s.processData is true)\n\t * 3) key is the dataType\n\t * 4) the catchall symbol \"*\" can be used\n\t * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\n\t */\n\tprefilters = {},\n\n\t/* Transports bindings\n\t * 1) key is the dataType\n\t * 2) the catchall symbol \"*\" can be used\n\t * 3) selection will start with transport dataType and THEN go to \"*\" if needed\n\t */\n\ttransports = {},\n\n\t// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression\n\tallTypes = \"*/\".concat( \"*\" ),\n\n\t// Anchor tag for parsing the document origin\n\toriginAnchor = document.createElement( \"a\" );\n\noriginAnchor.href = location.href;\n\n// Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\nfunction addToPrefiltersOrTransports( structure ) {\n\n\t// dataTypeExpression is optional and defaults to \"*\"\n\treturn function( dataTypeExpression, func ) {\n\n\t\tif ( typeof dataTypeExpression !== \"string\" ) {\n\t\t\tfunc = dataTypeExpression;\n\t\t\tdataTypeExpression = \"*\";\n\t\t}\n\n\t\tvar dataType,\n\t\t\ti = 0,\n\t\t\tdataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];\n\n\t\tif ( isFunction( func ) ) {\n\n\t\t\t// For each dataType in the dataTypeExpression\n\t\t\twhile ( ( dataType = dataTypes[ i++ ] ) ) {\n\n\t\t\t\t// Prepend if requested\n\t\t\t\tif ( dataType[ 0 ] === \"+\" ) {\n\t\t\t\t\tdataType = dataType.slice( 1 ) || \"*\";\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );\n\n\t\t\t\t// Otherwise append\n\t\t\t\t} else {\n\t\t\t\t\t( structure[ dataType ] = structure[ dataType ] || [] ).push( func );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Base inspection function for prefilters and transports\nfunction inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {\n\n\tvar inspected = {},\n\t\tseekingTransport = ( structure === transports );\n\n\tfunction inspect( dataType ) {\n\t\tvar selected;\n\t\tinspected[ dataType ] = true;\n\t\tjQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {\n\t\t\tvar dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );\n\t\t\tif ( typeof dataTypeOrTransport === \"string\" &&\n\t\t\t\t!seekingTransport && !inspected[ dataTypeOrTransport ] ) {\n\n\t\t\t\toptions.dataTypes.unshift( dataTypeOrTransport );\n\t\t\t\tinspect( dataTypeOrTransport );\n\t\t\t\treturn false;\n\t\t\t} else if ( seekingTransport ) {\n\t\t\t\treturn !( selected = dataTypeOrTransport );\n\t\t\t}\n\t\t} );\n\t\treturn selected;\n\t}\n\n\treturn inspect( options.dataTypes[ 0 ] ) || !inspected[ \"*\" ] && inspect( \"*\" );\n}\n\n// A special extend for ajax options\n// that takes \"flat\" options (not to be deep extended)\n// Fixes trac-9887\nfunction ajaxExtend( target, src ) {\n\tvar key, deep,\n\t\tflatOptions = jQuery.ajaxSettings.flatOptions || {};\n\n\tfor ( key in src ) {\n\t\tif ( src[ key ] !== undefined ) {\n\t\t\t( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];\n\t\t}\n\t}\n\tif ( deep ) {\n\t\tjQuery.extend( true, target, deep );\n\t}\n\n\treturn target;\n}\n\n/* Handles responses to an ajax request:\n * - finds the right dataType (mediates between content-type and expected dataType)\n * - returns the corresponding response\n */\nfunction ajaxHandleResponses( s, jqXHR, responses ) {\n\n\tvar ct, type, finalDataType, firstDataType,\n\t\tcontents = s.contents,\n\t\tdataTypes = s.dataTypes;\n\n\t// Remove auto dataType and get content-type in the process\n\twhile ( dataTypes[ 0 ] === \"*\" ) {\n\t\tdataTypes.shift();\n\t\tif ( ct === undefined ) {\n\t\t\tct = s.mimeType || jqXHR.getResponseHeader( \"Content-Type\" );\n\t\t}\n\t}\n\n\t// Check if we're dealing with a known content-type\n\tif ( ct ) {\n\t\tfor ( type in contents ) {\n\t\t\tif ( contents[ type ] && contents[ type ].test( ct ) ) {\n\t\t\t\tdataTypes.unshift( type );\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Check to see if we have a response for the expected dataType\n\tif ( dataTypes[ 0 ] in responses ) {\n\t\tfinalDataType = dataTypes[ 0 ];\n\t} else {\n\n\t\t// Try convertible dataTypes\n\t\tfor ( type in responses ) {\n\t\t\tif ( !dataTypes[ 0 ] || s.converters[ type + \" \" + dataTypes[ 0 ] ] ) {\n\t\t\t\tfinalDataType = type;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( !firstDataType ) {\n\t\t\t\tfirstDataType = type;\n\t\t\t}\n\t\t}\n\n\t\t// Or just use first one\n\t\tfinalDataType = finalDataType || firstDataType;\n\t}\n\n\t// If we found a dataType\n\t// We add the dataType to the list if needed\n\t// and return the corresponding response\n\tif ( finalDataType ) {\n\t\tif ( finalDataType !== dataTypes[ 0 ] ) {\n\t\t\tdataTypes.unshift( finalDataType );\n\t\t}\n\t\treturn responses[ finalDataType ];\n\t}\n}\n\n/* Chain conversions given the request and the original response\n * Also sets the responseXXX fields on the jqXHR instance\n */\nfunction ajaxConvert( s, response, jqXHR, isSuccess ) {\n\tvar conv2, current, conv, tmp, prev,\n\t\tconverters = {},\n\n\t\t// Work with a copy of dataTypes in case we need to modify it for conversion\n\t\tdataTypes = s.dataTypes.slice();\n\n\t// Create converters map with lowercased keys\n\tif ( dataTypes[ 1 ] ) {\n\t\tfor ( conv in s.converters ) {\n\t\t\tconverters[ conv.toLowerCase() ] = s.converters[ conv ];\n\t\t}\n\t}\n\n\tcurrent = dataTypes.shift();\n\n\t// Convert to each sequential dataType\n\twhile ( current ) {\n\n\t\tif ( s.responseFields[ current ] ) {\n\t\t\tjqXHR[ s.responseFields[ current ] ] = response;\n\t\t}\n\n\t\t// Apply the dataFilter if provided\n\t\tif ( !prev && isSuccess && s.dataFilter ) {\n\t\t\tresponse = s.dataFilter( response, s.dataType );\n\t\t}\n\n\t\tprev = current;\n\t\tcurrent = dataTypes.shift();\n\n\t\tif ( current ) {\n\n\t\t\t// There's only work to do if current dataType is non-auto\n\t\t\tif ( current === \"*\" ) {\n\n\t\t\t\tcurrent = prev;\n\n\t\t\t// Convert response if prev dataType is non-auto and differs from current\n\t\t\t} else if ( prev !== \"*\" && prev !== current ) {\n\n\t\t\t\t// Seek a direct converter\n\t\t\t\tconv = converters[ prev + \" \" + current ] || converters[ \"* \" + current ];\n\n\t\t\t\t// If none found, seek a pair\n\t\t\t\tif ( !conv ) {\n\t\t\t\t\tfor ( conv2 in converters ) {\n\n\t\t\t\t\t\t// If conv2 outputs current\n\t\t\t\t\t\ttmp = conv2.split( \" \" );\n\t\t\t\t\t\tif ( tmp[ 1 ] === current ) {\n\n\t\t\t\t\t\t\t// If prev can be converted to accepted input\n\t\t\t\t\t\t\tconv = converters[ prev + \" \" + tmp[ 0 ] ] ||\n\t\t\t\t\t\t\t\tconverters[ \"* \" + tmp[ 0 ] ];\n\t\t\t\t\t\t\tif ( conv ) {\n\n\t\t\t\t\t\t\t\t// Condense equivalence converters\n\t\t\t\t\t\t\t\tif ( conv === true ) {\n\t\t\t\t\t\t\t\t\tconv = converters[ conv2 ];\n\n\t\t\t\t\t\t\t\t// Otherwise, insert the intermediate dataType\n\t\t\t\t\t\t\t\t} else if ( converters[ conv2 ] !== true ) {\n\t\t\t\t\t\t\t\t\tcurrent = tmp[ 0 ];\n\t\t\t\t\t\t\t\t\tdataTypes.unshift( tmp[ 1 ] );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply converter (if not an equivalence)\n\t\t\t\tif ( conv !== true ) {\n\n\t\t\t\t\t// Unless errors are allowed to bubble, catch and return them\n\t\t\t\t\tif ( conv && s.throws ) {\n\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tresponse = conv( response );\n\t\t\t\t\t\t} catch ( e ) {\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\tstate: \"parsererror\",\n\t\t\t\t\t\t\t\terror: conv ? e : \"No conversion from \" + prev + \" to \" + current\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { state: \"success\", data: response };\n}\n\njQuery.extend( {\n\n\t// Counter for holding the number of active queries\n\tactive: 0,\n\n\t// Last-Modified header cache for next request\n\tlastModified: {},\n\tetag: {},\n\n\tajaxSettings: {\n\t\turl: location.href,\n\t\ttype: \"GET\",\n\t\tisLocal: rlocalProtocol.test( location.protocol ),\n\t\tglobal: true,\n\t\tprocessData: true,\n\t\tasync: true,\n\t\tcontentType: \"application/x-www-form-urlencoded; charset=UTF-8\",\n\n\t\t/*\n\t\ttimeout: 0,\n\t\tdata: null,\n\t\tdataType: null,\n\t\tusername: null,\n\t\tpassword: null,\n\t\tcache: null,\n\t\tthrows: false,\n\t\ttraditional: false,\n\t\theaders: {},\n\t\t*/\n\n\t\taccepts: {\n\t\t\t\"*\": allTypes,\n\t\t\ttext: \"text/plain\",\n\t\t\thtml: \"text/html\",\n\t\t\txml: \"application/xml, text/xml\",\n\t\t\tjson: \"application/json, text/javascript\"\n\t\t},\n\n\t\tcontents: {\n\t\t\txml: /\\bxml\\b/,\n\t\t\thtml: /\\bhtml/,\n\t\t\tjson: /\\bjson\\b/\n\t\t},\n\n\t\tresponseFields: {\n\t\t\txml: \"responseXML\",\n\t\t\ttext: \"responseText\",\n\t\t\tjson: \"responseJSON\"\n\t\t},\n\n\t\t// Data converters\n\t\t// Keys separate source (or catchall \"*\") and destination types with a single space\n\t\tconverters: {\n\n\t\t\t// Convert anything to text\n\t\t\t\"* text\": String,\n\n\t\t\t// Text to html (true = no transformation)\n\t\t\t\"text html\": true,\n\n\t\t\t// Evaluate text as a json expression\n\t\t\t\"text json\": JSON.parse,\n\n\t\t\t// Parse text as xml\n\t\t\t\"text xml\": jQuery.parseXML\n\t\t},\n\n\t\t// For options that shouldn't be deep extended:\n\t\t// you can add your own custom options here if\n\t\t// and when you create one that shouldn't be\n\t\t// deep extended (see ajaxExtend)\n\t\tflatOptions: {\n\t\t\turl: true,\n\t\t\tcontext: true\n\t\t}\n\t},\n\n\t// Creates a full fledged settings object into target\n\t// with both ajaxSettings and settings fields.\n\t// If target is omitted, writes into ajaxSettings.\n\tajaxSetup: function( target, settings ) {\n\t\treturn settings ?\n\n\t\t\t// Building a settings object\n\t\t\tajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :\n\n\t\t\t// Extending ajaxSettings\n\t\t\tajaxExtend( jQuery.ajaxSettings, target );\n\t},\n\n\tajaxPrefilter: addToPrefiltersOrTransports( prefilters ),\n\tajaxTransport: addToPrefiltersOrTransports( transports ),\n\n\t// Main method\n\tajax: function( url, options ) {\n\n\t\t// If url is an object, simulate pre-1.5 signature\n\t\tif ( typeof url === \"object\" ) {\n\t\t\toptions = url;\n\t\t\turl = undefined;\n\t\t}\n\n\t\t// Force options to be an object\n\t\toptions = options || {};\n\n\t\tvar transport,\n\n\t\t\t// URL without anti-cache param\n\t\t\tcacheURL,\n\n\t\t\t// Response headers\n\t\t\tresponseHeadersString,\n\t\t\tresponseHeaders,\n\n\t\t\t// timeout handle\n\t\t\ttimeoutTimer,\n\n\t\t\t// Url cleanup var\n\t\t\turlAnchor,\n\n\t\t\t// Request state (becomes false upon send and true upon completion)\n\t\t\tcompleted,\n\n\t\t\t// To know if global events are to be dispatched\n\t\t\tfireGlobals,\n\n\t\t\t// Loop variable\n\t\t\ti,\n\n\t\t\t// uncached part of the url\n\t\t\tuncached,\n\n\t\t\t// Create the final options object\n\t\t\ts = jQuery.ajaxSetup( {}, options ),\n\n\t\t\t// Callbacks context\n\t\t\tcallbackContext = s.context || s,\n\n\t\t\t// Context for global events is callbackContext if it is a DOM node or jQuery collection\n\t\t\tglobalEventContext = s.context &&\n\t\t\t\t( callbackContext.nodeType || callbackContext.jquery ) ?\n\t\t\t\tjQuery( callbackContext ) :\n\t\t\t\tjQuery.event,\n\n\t\t\t// Deferreds\n\t\t\tdeferred = jQuery.Deferred(),\n\t\t\tcompleteDeferred = jQuery.Callbacks( \"once memory\" ),\n\n\t\t\t// Status-dependent callbacks\n\t\t\tstatusCode = s.statusCode || {},\n\n\t\t\t// Headers (they are sent all at once)\n\t\t\trequestHeaders = {},\n\t\t\trequestHeadersNames = {},\n\n\t\t\t// Default abort message\n\t\t\tstrAbort = \"canceled\",\n\n\t\t\t// Fake xhr\n\t\t\tjqXHR = {\n\t\t\t\treadyState: 0,\n\n\t\t\t\t// Builds headers hashtable if needed\n\t\t\t\tgetResponseHeader: function( key ) {\n\t\t\t\t\tvar match;\n\t\t\t\t\tif ( completed ) {\n\t\t\t\t\t\tif ( !responseHeaders ) {\n\t\t\t\t\t\t\tresponseHeaders = {};\n\t\t\t\t\t\t\twhile ( ( match = rheaders.exec( responseHeadersString ) ) ) {\n\t\t\t\t\t\t\t\tresponseHeaders[ match[ 1 ].toLowerCase() + \" \" ] =\n\t\t\t\t\t\t\t\t\t( responseHeaders[ match[ 1 ].toLowerCase() + \" \" ] || [] )\n\t\t\t\t\t\t\t\t\t\t.concat( match[ 2 ] );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = responseHeaders[ key.toLowerCase() + \" \" ];\n\t\t\t\t\t}\n\t\t\t\t\treturn match == null ? null : match.join( \", \" );\n\t\t\t\t},\n\n\t\t\t\t// Raw string\n\t\t\t\tgetAllResponseHeaders: function() {\n\t\t\t\t\treturn completed ? responseHeadersString : null;\n\t\t\t\t},\n\n\t\t\t\t// Caches the header\n\t\t\t\tsetRequestHeader: function( name, value ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\tname = requestHeadersNames[ name.toLowerCase() ] =\n\t\t\t\t\t\t\trequestHeadersNames[ name.toLowerCase() ] || name;\n\t\t\t\t\t\trequestHeaders[ name ] = value;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Overrides response content-type header\n\t\t\t\toverrideMimeType: function( type ) {\n\t\t\t\t\tif ( completed == null ) {\n\t\t\t\t\t\ts.mimeType = type;\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Status-dependent callbacks\n\t\t\t\tstatusCode: function( map ) {\n\t\t\t\t\tvar code;\n\t\t\t\t\tif ( map ) {\n\t\t\t\t\t\tif ( completed ) {\n\n\t\t\t\t\t\t\t// Execute the appropriate callbacks\n\t\t\t\t\t\t\tjqXHR.always( map[ jqXHR.status ] );\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// Lazy-add the new callbacks in a way that preserves old ones\n\t\t\t\t\t\t\tfor ( code in map ) {\n\t\t\t\t\t\t\t\tstatusCode[ code ] = [ statusCode[ code ], map[ code ] ];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn this;\n\t\t\t\t},\n\n\t\t\t\t// Cancel the request\n\t\t\t\tabort: function( statusText ) {\n\t\t\t\t\tvar finalText = statusText || strAbort;\n\t\t\t\t\tif ( transport ) {\n\t\t\t\t\t\ttransport.abort( finalText );\n\t\t\t\t\t}\n\t\t\t\t\tdone( 0, finalText );\n\t\t\t\t\treturn this;\n\t\t\t\t}\n\t\t\t};\n\n\t\t// Attach deferreds\n\t\tdeferred.promise( jqXHR );\n\n\t\t// Add protocol if not provided (prefilters might expect it)\n\t\t// Handle falsy url in the settings object (trac-10093: consistency with old signature)\n\t\t// We also use the url parameter if available\n\t\ts.url = ( ( url || s.url || location.href ) + \"\" )\n\t\t\t.replace( rprotocol, location.protocol + \"//\" );\n\n\t\t// Alias method option to type as per ticket trac-12004\n\t\ts.type = options.method || options.type || s.method || s.type;\n\n\t\t// Extract dataTypes list\n\t\ts.dataTypes = ( s.dataType || \"*\" ).toLowerCase().match( rnothtmlwhite ) || [ \"\" ];\n\n\t\t// A cross-domain request is in order when the origin doesn't match the current origin.\n\t\tif ( s.crossDomain == null ) {\n\t\t\turlAnchor = document.createElement( \"a\" );\n\n\t\t\t// Support: IE <=8 - 11, Edge 12 - 15\n\t\t\t// IE throws exception on accessing the href property if url is malformed,\n\t\t\t// e.g. http://example.com:80x/\n\t\t\ttry {\n\t\t\t\turlAnchor.href = s.url;\n\n\t\t\t\t// Support: IE <=8 - 11 only\n\t\t\t\t// Anchor's host property isn't correctly set when s.url is relative\n\t\t\t\turlAnchor.href = urlAnchor.href;\n\t\t\t\ts.crossDomain = originAnchor.protocol + \"//\" + originAnchor.host !==\n\t\t\t\t\turlAnchor.protocol + \"//\" + urlAnchor.host;\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// If there is an error parsing the URL, assume it is crossDomain,\n\t\t\t\t// it can be rejected by the transport if it is invalid\n\t\t\t\ts.crossDomain = true;\n\t\t\t}\n\t\t}\n\n\t\t// Convert data if not already a string\n\t\tif ( s.data && s.processData && typeof s.data !== \"string\" ) {\n\t\t\ts.data = jQuery.param( s.data, s.traditional );\n\t\t}\n\n\t\t// Apply prefilters\n\t\tinspectPrefiltersOrTransports( prefilters, s, options, jqXHR );\n\n\t\t// If request was aborted inside a prefilter, stop there\n\t\tif ( completed ) {\n\t\t\treturn jqXHR;\n\t\t}\n\n\t\t// We can fire global events as of now if asked to\n\t\t// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)\n\t\tfireGlobals = jQuery.event && s.global;\n\n\t\t// Watch for a new set of requests\n\t\tif ( fireGlobals && jQuery.active++ === 0 ) {\n\t\t\tjQuery.event.trigger( \"ajaxStart\" );\n\t\t}\n\n\t\t// Uppercase the type\n\t\ts.type = s.type.toUpperCase();\n\n\t\t// Determine if request has content\n\t\ts.hasContent = !rnoContent.test( s.type );\n\n\t\t// Save the URL in case we're toying with the If-Modified-Since\n\t\t// and/or If-None-Match header later on\n\t\t// Remove hash to simplify url manipulation\n\t\tcacheURL = s.url.replace( rhash, \"\" );\n\n\t\t// More options handling for requests with no content\n\t\tif ( !s.hasContent ) {\n\n\t\t\t// Remember the hash so we can put it back\n\t\t\tuncached = s.url.slice( cacheURL.length );\n\n\t\t\t// If data is available and should be processed, append data to url\n\t\t\tif ( s.data && ( s.processData || typeof s.data === \"string\" ) ) {\n\t\t\t\tcacheURL += ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + s.data;\n\n\t\t\t\t// trac-9682: remove data so that it's not used in an eventual retry\n\t\t\t\tdelete s.data;\n\t\t\t}\n\n\t\t\t// Add or update anti-cache param if needed\n\t\t\tif ( s.cache === false ) {\n\t\t\t\tcacheURL = cacheURL.replace( rantiCache, \"$1\" );\n\t\t\t\tuncached = ( rquery.test( cacheURL ) ? \"&\" : \"?\" ) + \"_=\" + ( nonce.guid++ ) +\n\t\t\t\t\tuncached;\n\t\t\t}\n\n\t\t\t// Put hash and anti-cache on the URL that will be requested (gh-1732)\n\t\t\ts.url = cacheURL + uncached;\n\n\t\t// Change '%20' to '+' if this is encoded form body content (gh-2658)\n\t\t} else if ( s.data && s.processData &&\n\t\t\t( s.contentType || \"\" ).indexOf( \"application/x-www-form-urlencoded\" ) === 0 ) {\n\t\t\ts.data = s.data.replace( r20, \"+\" );\n\t\t}\n\n\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\tif ( s.ifModified ) {\n\t\t\tif ( jQuery.lastModified[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-Modified-Since\", jQuery.lastModified[ cacheURL ] );\n\t\t\t}\n\t\t\tif ( jQuery.etag[ cacheURL ] ) {\n\t\t\t\tjqXHR.setRequestHeader( \"If-None-Match\", jQuery.etag[ cacheURL ] );\n\t\t\t}\n\t\t}\n\n\t\t// Set the correct header, if data is being sent\n\t\tif ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {\n\t\t\tjqXHR.setRequestHeader( \"Content-Type\", s.contentType );\n\t\t}\n\n\t\t// Set the Accepts header for the server, depending on the dataType\n\t\tjqXHR.setRequestHeader(\n\t\t\t\"Accept\",\n\t\t\ts.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?\n\t\t\t\ts.accepts[ s.dataTypes[ 0 ] ] +\n\t\t\t\t\t( s.dataTypes[ 0 ] !== \"*\" ? \", \" + allTypes + \"; q=0.01\" : \"\" ) :\n\t\t\t\ts.accepts[ \"*\" ]\n\t\t);\n\n\t\t// Check for headers option\n\t\tfor ( i in s.headers ) {\n\t\t\tjqXHR.setRequestHeader( i, s.headers[ i ] );\n\t\t}\n\n\t\t// Allow custom headers/mimetypes and early abort\n\t\tif ( s.beforeSend &&\n\t\t\t( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {\n\n\t\t\t// Abort if not done already and return\n\t\t\treturn jqXHR.abort();\n\t\t}\n\n\t\t// Aborting is no longer a cancellation\n\t\tstrAbort = \"abort\";\n\n\t\t// Install callbacks on deferreds\n\t\tcompleteDeferred.add( s.complete );\n\t\tjqXHR.done( s.success );\n\t\tjqXHR.fail( s.error );\n\n\t\t// Get transport\n\t\ttransport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );\n\n\t\t// If no transport, we auto-abort\n\t\tif ( !transport ) {\n\t\t\tdone( -1, \"No Transport\" );\n\t\t} else {\n\t\t\tjqXHR.readyState = 1;\n\n\t\t\t// Send global event\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxSend\", [ jqXHR, s ] );\n\t\t\t}\n\n\t\t\t// If request was aborted inside ajaxSend, stop there\n\t\t\tif ( completed ) {\n\t\t\t\treturn jqXHR;\n\t\t\t}\n\n\t\t\t// Timeout\n\t\t\tif ( s.async && s.timeout > 0 ) {\n\t\t\t\ttimeoutTimer = window.setTimeout( function() {\n\t\t\t\t\tjqXHR.abort( \"timeout\" );\n\t\t\t\t}, s.timeout );\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcompleted = false;\n\t\t\t\ttransport.send( requestHeaders, done );\n\t\t\t} catch ( e ) {\n\n\t\t\t\t// Rethrow post-completion exceptions\n\t\t\t\tif ( completed ) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\n\t\t\t\t// Propagate others as results\n\t\t\t\tdone( -1, e );\n\t\t\t}\n\t\t}\n\n\t\t// Callback for when everything is done\n\t\tfunction done( status, nativeStatusText, responses, headers ) {\n\t\t\tvar isSuccess, success, error, response, modified,\n\t\t\t\tstatusText = nativeStatusText;\n\n\t\t\t// Ignore repeat invocations\n\t\t\tif ( completed ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcompleted = true;\n\n\t\t\t// Clear timeout if it exists\n\t\t\tif ( timeoutTimer ) {\n\t\t\t\twindow.clearTimeout( timeoutTimer );\n\t\t\t}\n\n\t\t\t// Dereference transport for early garbage collection\n\t\t\t// (no matter how long the jqXHR object will be used)\n\t\t\ttransport = undefined;\n\n\t\t\t// Cache response headers\n\t\t\tresponseHeadersString = headers || \"\";\n\n\t\t\t// Set readyState\n\t\t\tjqXHR.readyState = status > 0 ? 4 : 0;\n\n\t\t\t// Determine if successful\n\t\t\tisSuccess = status >= 200 && status < 300 || status === 304;\n\n\t\t\t// Get response data\n\t\t\tif ( responses ) {\n\t\t\t\tresponse = ajaxHandleResponses( s, jqXHR, responses );\n\t\t\t}\n\n\t\t\t// Use a noop converter for missing script but not if jsonp\n\t\t\tif ( !isSuccess &&\n\t\t\t\tjQuery.inArray( \"script\", s.dataTypes ) > -1 &&\n\t\t\t\tjQuery.inArray( \"json\", s.dataTypes ) < 0 ) {\n\t\t\t\ts.converters[ \"text script\" ] = function() {};\n\t\t\t}\n\n\t\t\t// Convert no matter what (that way responseXXX fields are always set)\n\t\t\tresponse = ajaxConvert( s, response, jqXHR, isSuccess );\n\n\t\t\t// If successful, handle type chaining\n\t\t\tif ( isSuccess ) {\n\n\t\t\t\t// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.\n\t\t\t\tif ( s.ifModified ) {\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"Last-Modified\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.lastModified[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t\tmodified = jqXHR.getResponseHeader( \"etag\" );\n\t\t\t\t\tif ( modified ) {\n\t\t\t\t\t\tjQuery.etag[ cacheURL ] = modified;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// if no content\n\t\t\t\tif ( status === 204 || s.type === \"HEAD\" ) {\n\t\t\t\t\tstatusText = \"nocontent\";\n\n\t\t\t\t// if not modified\n\t\t\t\t} else if ( status === 304 ) {\n\t\t\t\t\tstatusText = \"notmodified\";\n\n\t\t\t\t// If we have data, let's convert it\n\t\t\t\t} else {\n\t\t\t\t\tstatusText = response.state;\n\t\t\t\t\tsuccess = response.data;\n\t\t\t\t\terror = response.error;\n\t\t\t\t\tisSuccess = !error;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// Extract error from statusText and normalize for non-aborts\n\t\t\t\terror = statusText;\n\t\t\t\tif ( status || !statusText ) {\n\t\t\t\t\tstatusText = \"error\";\n\t\t\t\t\tif ( status < 0 ) {\n\t\t\t\t\t\tstatus = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set data for the fake xhr object\n\t\t\tjqXHR.status = status;\n\t\t\tjqXHR.statusText = ( nativeStatusText || statusText ) + \"\";\n\n\t\t\t// Success/Error\n\t\t\tif ( isSuccess ) {\n\t\t\t\tdeferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );\n\t\t\t} else {\n\t\t\t\tdeferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );\n\t\t\t}\n\n\t\t\t// Status-dependent callbacks\n\t\t\tjqXHR.statusCode( statusCode );\n\t\t\tstatusCode = undefined;\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( isSuccess ? \"ajaxSuccess\" : \"ajaxError\",\n\t\t\t\t\t[ jqXHR, s, isSuccess ? success : error ] );\n\t\t\t}\n\n\t\t\t// Complete\n\t\t\tcompleteDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );\n\n\t\t\tif ( fireGlobals ) {\n\t\t\t\tglobalEventContext.trigger( \"ajaxComplete\", [ jqXHR, s ] );\n\n\t\t\t\t// Handle the global AJAX counter\n\t\t\t\tif ( !( --jQuery.active ) ) {\n\t\t\t\t\tjQuery.event.trigger( \"ajaxStop\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn jqXHR;\n\t},\n\n\tgetJSON: function( url, data, callback ) {\n\t\treturn jQuery.get( url, data, callback, \"json\" );\n\t},\n\n\tgetScript: function( url, callback ) {\n\t\treturn jQuery.get( url, undefined, callback, \"script\" );\n\t}\n} );\n\njQuery.each( [ \"get\", \"post\" ], function( _i, method ) {\n\tjQuery[ method ] = function( url, data, callback, type ) {\n\n\t\t// Shift arguments if data argument was omitted\n\t\tif ( isFunction( data ) ) {\n\t\t\ttype = type || callback;\n\t\t\tcallback = data;\n\t\t\tdata = undefined;\n\t\t}\n\n\t\t// The url can be an options object (which then must have .url)\n\t\treturn jQuery.ajax( jQuery.extend( {\n\t\t\turl: url,\n\t\t\ttype: method,\n\t\t\tdataType: type,\n\t\t\tdata: data,\n\t\t\tsuccess: callback\n\t\t}, jQuery.isPlainObject( url ) && url ) );\n\t};\n} );\n\njQuery.ajaxPrefilter( function( s ) {\n\tvar i;\n\tfor ( i in s.headers ) {\n\t\tif ( i.toLowerCase() === \"content-type\" ) {\n\t\t\ts.contentType = s.headers[ i ] || \"\";\n\t\t}\n\t}\n} );\n\n\njQuery._evalUrl = function( url, options, doc ) {\n\treturn jQuery.ajax( {\n\t\turl: url,\n\n\t\t// Make this explicit, since user can override this through ajaxSetup (trac-11264)\n\t\ttype: \"GET\",\n\t\tdataType: \"script\",\n\t\tcache: true,\n\t\tasync: false,\n\t\tglobal: false,\n\n\t\t// Only evaluate the response if it is successful (gh-4126)\n\t\t// dataFilter is not invoked for failure responses, so using it instead\n\t\t// of the default converter is kludgy but it works.\n\t\tconverters: {\n\t\t\t\"text script\": function() {}\n\t\t},\n\t\tdataFilter: function( response ) {\n\t\t\tjQuery.globalEval( response, options, doc );\n\t\t}\n\t} );\n};\n\n\njQuery.fn.extend( {\n\twrapAll: function( html ) {\n\t\tvar wrap;\n\n\t\tif ( this[ 0 ] ) {\n\t\t\tif ( isFunction( html ) ) {\n\t\t\t\thtml = html.call( this[ 0 ] );\n\t\t\t}\n\n\t\t\t// The elements to wrap the target around\n\t\t\twrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );\n\n\t\t\tif ( this[ 0 ].parentNode ) {\n\t\t\t\twrap.insertBefore( this[ 0 ] );\n\t\t\t}\n\n\t\t\twrap.map( function() {\n\t\t\t\tvar elem = this;\n\n\t\t\t\twhile ( elem.firstElementChild ) {\n\t\t\t\t\telem = elem.firstElementChild;\n\t\t\t\t}\n\n\t\t\t\treturn elem;\n\t\t\t} ).append( this );\n\t\t}\n\n\t\treturn this;\n\t},\n\n\twrapInner: function( html ) {\n\t\tif ( isFunction( html ) ) {\n\t\t\treturn this.each( function( i ) {\n\t\t\t\tjQuery( this ).wrapInner( html.call( this, i ) );\n\t\t\t} );\n\t\t}\n\n\t\treturn this.each( function() {\n\t\t\tvar self = jQuery( this ),\n\t\t\t\tcontents = self.contents();\n\n\t\t\tif ( contents.length ) {\n\t\t\t\tcontents.wrapAll( html );\n\n\t\t\t} else {\n\t\t\t\tself.append( html );\n\t\t\t}\n\t\t} );\n\t},\n\n\twrap: function( html ) {\n\t\tvar htmlIsFunction = isFunction( html );\n\n\t\treturn this.each( function( i ) {\n\t\t\tjQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );\n\t\t} );\n\t},\n\n\tunwrap: function( selector ) {\n\t\tthis.parent( selector ).not( \"body\" ).each( function() {\n\t\t\tjQuery( this ).replaceWith( this.childNodes );\n\t\t} );\n\t\treturn this;\n\t}\n} );\n\n\njQuery.expr.pseudos.hidden = function( elem ) {\n\treturn !jQuery.expr.pseudos.visible( elem );\n};\njQuery.expr.pseudos.visible = function( elem ) {\n\treturn !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );\n};\n\n\n\n\njQuery.ajaxSettings.xhr = function() {\n\ttry {\n\t\treturn new window.XMLHttpRequest();\n\t} catch ( e ) {}\n};\n\nvar xhrSuccessStatus = {\n\n\t\t// File protocol always yields status code 0, assume 200\n\t\t0: 200,\n\n\t\t// Support: IE <=9 only\n\t\t// trac-1450: sometimes IE returns 1223 when it should be 204\n\t\t1223: 204\n\t},\n\txhrSupported = jQuery.ajaxSettings.xhr();\n\nsupport.cors = !!xhrSupported && ( \"withCredentials\" in xhrSupported );\nsupport.ajax = xhrSupported = !!xhrSupported;\n\njQuery.ajaxTransport( function( options ) {\n\tvar callback, errorCallback;\n\n\t// Cross domain only allowed if supported through XMLHttpRequest\n\tif ( support.cors || xhrSupported && !options.crossDomain ) {\n\t\treturn {\n\t\t\tsend: function( headers, complete ) {\n\t\t\t\tvar i,\n\t\t\t\t\txhr = options.xhr();\n\n\t\t\t\txhr.open(\n\t\t\t\t\toptions.type,\n\t\t\t\t\toptions.url,\n\t\t\t\t\toptions.async,\n\t\t\t\t\toptions.username,\n\t\t\t\t\toptions.password\n\t\t\t\t);\n\n\t\t\t\t// Apply custom fields if provided\n\t\t\t\tif ( options.xhrFields ) {\n\t\t\t\t\tfor ( i in options.xhrFields ) {\n\t\t\t\t\t\txhr[ i ] = options.xhrFields[ i ];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Override mime type if needed\n\t\t\t\tif ( options.mimeType && xhr.overrideMimeType ) {\n\t\t\t\t\txhr.overrideMimeType( options.mimeType );\n\t\t\t\t}\n\n\t\t\t\t// X-Requested-With header\n\t\t\t\t// For cross-domain requests, seeing as conditions for a preflight are\n\t\t\t\t// akin to a jigsaw puzzle, we simply never set it to be sure.\n\t\t\t\t// (it can always be set on a per-request basis or even using ajaxSetup)\n\t\t\t\t// For same-domain requests, won't change header if already provided.\n\t\t\t\tif ( !options.crossDomain && !headers[ \"X-Requested-With\" ] ) {\n\t\t\t\t\theaders[ \"X-Requested-With\" ] = \"XMLHttpRequest\";\n\t\t\t\t}\n\n\t\t\t\t// Set headers\n\t\t\t\tfor ( i in headers ) {\n\t\t\t\t\txhr.setRequestHeader( i, headers[ i ] );\n\t\t\t\t}\n\n\t\t\t\t// Callback\n\t\t\t\tcallback = function( type ) {\n\t\t\t\t\treturn function() {\n\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\tcallback = errorCallback = xhr.onload =\n\t\t\t\t\t\t\t\txhr.onerror = xhr.onabort = xhr.ontimeout =\n\t\t\t\t\t\t\t\t\txhr.onreadystatechange = null;\n\n\t\t\t\t\t\t\tif ( type === \"abort\" ) {\n\t\t\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t\t\t} else if ( type === \"error\" ) {\n\n\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t// On a manual native abort, IE9 throws\n\t\t\t\t\t\t\t\t// errors on any property access that is not readyState\n\t\t\t\t\t\t\t\tif ( typeof xhr.status !== \"number\" ) {\n\t\t\t\t\t\t\t\t\tcomplete( 0, \"error\" );\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tcomplete(\n\n\t\t\t\t\t\t\t\t\t\t// File: protocol always yields status 0; see trac-8605, trac-14207\n\t\t\t\t\t\t\t\t\t\txhr.status,\n\t\t\t\t\t\t\t\t\t\txhr.statusText\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcomplete(\n\t\t\t\t\t\t\t\t\txhrSuccessStatus[ xhr.status ] || xhr.status,\n\t\t\t\t\t\t\t\t\txhr.statusText,\n\n\t\t\t\t\t\t\t\t\t// Support: IE <=9 only\n\t\t\t\t\t\t\t\t\t// IE9 has no XHR2 but throws on binary (trac-11426)\n\t\t\t\t\t\t\t\t\t// For XHR2 non-text, let the caller handle it (gh-2498)\n\t\t\t\t\t\t\t\t\t( xhr.responseType || \"text\" ) !== \"text\"  ||\n\t\t\t\t\t\t\t\t\ttypeof xhr.responseText !== \"string\" ?\n\t\t\t\t\t\t\t\t\t\t{ binary: xhr.response } :\n\t\t\t\t\t\t\t\t\t\t{ text: xhr.responseText },\n\t\t\t\t\t\t\t\t\txhr.getAllResponseHeaders()\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t};\n\n\t\t\t\t// Listen to events\n\t\t\t\txhr.onload = callback();\n\t\t\t\terrorCallback = xhr.onerror = xhr.ontimeout = callback( \"error\" );\n\n\t\t\t\t// Support: IE 9 only\n\t\t\t\t// Use onreadystatechange to replace onabort\n\t\t\t\t// to handle uncaught aborts\n\t\t\t\tif ( xhr.onabort !== undefined ) {\n\t\t\t\t\txhr.onabort = errorCallback;\n\t\t\t\t} else {\n\t\t\t\t\txhr.onreadystatechange = function() {\n\n\t\t\t\t\t\t// Check readyState before timeout as it changes\n\t\t\t\t\t\tif ( xhr.readyState === 4 ) {\n\n\t\t\t\t\t\t\t// Allow onerror to be called first,\n\t\t\t\t\t\t\t// but that will not handle a native abort\n\t\t\t\t\t\t\t// Also, save errorCallback to a variable\n\t\t\t\t\t\t\t// as xhr.onerror cannot be accessed\n\t\t\t\t\t\t\twindow.setTimeout( function() {\n\t\t\t\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\t\t\t\terrorCallback();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Create the abort callback\n\t\t\t\tcallback = callback( \"abort\" );\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Do send the request (this may raise an exception)\n\t\t\t\t\txhr.send( options.hasContent && options.data || null );\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t// trac-14683: Only rethrow if this hasn't been notified as an error yet\n\t\t\t\t\tif ( callback ) {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n\tif ( s.crossDomain ) {\n\t\ts.contents.script = false;\n\t}\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /\\b(?:java|ecma)script\\b/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and crossDomain\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain or forced-by-attrs requests\n\tif ( s.crossDomain || s.scriptAttrs ) {\n\t\tvar script, callback;\n\t\treturn {\n\t\t\tsend: function( _, complete ) {\n\t\t\t\tscript = jQuery( \"<script>\" )\n\t\t\t\t\t.attr( s.scriptAttrs || {} )\n\t\t\t\t\t.prop( { charset: s.scriptCharset, src: s.url } )\n\t\t\t\t\t.on( \"load error\", callback = function( evt ) {\n\t\t\t\t\t\tscript.remove();\n\t\t\t\t\t\tcallback = null;\n\t\t\t\t\t\tif ( evt ) {\n\t\t\t\t\t\t\tcomplete( evt.type === \"error\" ? 404 : 200, evt.type );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\tdocument.head.appendChild( script[ 0 ] );\n\t\t\t},\n\t\t\tabort: function() {\n\t\t\t\tif ( callback ) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n\n\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce.guid++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n\n\n\n// Support: Safari 8 only\n// In Safari 8 documents created via document.implementation.createHTMLDocument\n// collapse sibling forms: the second one becomes a child of the first one.\n// Because of that, this security measure has to be disabled in Safari 8.\n// https://bugs.webkit.org/show_bug.cgi?id=137337\nsupport.createHTMLDocument = ( function() {\n\tvar body = document.implementation.createHTMLDocument( \"\" ).body;\n\tbody.innerHTML = \"<form></form><form></form>\";\n\treturn body.childNodes.length === 2;\n} )();\n\n\n// Argument \"data\" should be string of html\n// context (optional): If specified, the fragment will be created in this context,\n// defaults to document\n// keepScripts (optional): If true, will include scripts passed in the html string\njQuery.parseHTML = function( data, context, keepScripts ) {\n\tif ( typeof data !== \"string\" ) {\n\t\treturn [];\n\t}\n\tif ( typeof context === \"boolean\" ) {\n\t\tkeepScripts = context;\n\t\tcontext = false;\n\t}\n\n\tvar base, parsed, scripts;\n\n\tif ( !context ) {\n\n\t\t// Stop scripts or inline event handlers from being executed immediately\n\t\t// by using document.implementation\n\t\tif ( support.createHTMLDocument ) {\n\t\t\tcontext = document.implementation.createHTMLDocument( \"\" );\n\n\t\t\t// Set the base href for the created document\n\t\t\t// so any parsed elements with URLs\n\t\t\t// are based on the document's URL (gh-2965)\n\t\t\tbase = context.createElement( \"base\" );\n\t\t\tbase.href = document.location.href;\n\t\t\tcontext.head.appendChild( base );\n\t\t} else {\n\t\t\tcontext = document;\n\t\t}\n\t}\n\n\tparsed = rsingleTag.exec( data );\n\tscripts = !keepScripts && [];\n\n\t// Single tag\n\tif ( parsed ) {\n\t\treturn [ context.createElement( parsed[ 1 ] ) ];\n\t}\n\n\tparsed = buildFragment( [ data ], context, scripts );\n\n\tif ( scripts && scripts.length ) {\n\t\tjQuery( scripts ).remove();\n\t}\n\n\treturn jQuery.merge( [], parsed.childNodes );\n};\n\n\n/**\n * Load a url into a page\n */\njQuery.fn.load = function( url, params, callback ) {\n\tvar selector, type, response,\n\t\tself = this,\n\t\toff = url.indexOf( \" \" );\n\n\tif ( off > -1 ) {\n\t\tselector = stripAndCollapse( url.slice( off ) );\n\t\turl = url.slice( 0, off );\n\t}\n\n\t// If it's a function\n\tif ( isFunction( params ) ) {\n\n\t\t// We assume that it's the callback\n\t\tcallback = params;\n\t\tparams = undefined;\n\n\t// Otherwise, build a param string\n\t} else if ( params && typeof params === \"object\" ) {\n\t\ttype = \"POST\";\n\t}\n\n\t// If we have elements to modify, make the request\n\tif ( self.length > 0 ) {\n\t\tjQuery.ajax( {\n\t\t\turl: url,\n\n\t\t\t// If \"type\" variable is undefined, then \"GET\" method will be used.\n\t\t\t// Make value of this field explicit since\n\t\t\t// user can override it through ajaxSetup method\n\t\t\ttype: type || \"GET\",\n\t\t\tdataType: \"html\",\n\t\t\tdata: params\n\t\t} ).done( function( responseText ) {\n\n\t\t\t// Save response for use in complete callback\n\t\t\tresponse = arguments;\n\n\t\t\tself.html( selector ?\n\n\t\t\t\t// If a selector was specified, locate the right elements in a dummy div\n\t\t\t\t// Exclude scripts to avoid IE 'Permission Denied' errors\n\t\t\t\tjQuery( \"<div>\" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :\n\n\t\t\t\t// Otherwise use the full result\n\t\t\t\tresponseText );\n\n\t\t// If the request succeeds, this function gets \"data\", \"status\", \"jqXHR\"\n\t\t// but they are ignored because response was set above.\n\t\t// If it fails, this function gets \"jqXHR\", \"status\", \"error\"\n\t\t} ).always( callback && function( jqXHR, status ) {\n\t\t\tself.each( function() {\n\t\t\t\tcallback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );\n\t\t\t} );\n\t\t} );\n\t}\n\n\treturn this;\n};\n\n\n\n\njQuery.expr.pseudos.animated = function( elem ) {\n\treturn jQuery.grep( jQuery.timers, function( fn ) {\n\t\treturn elem === fn.elem;\n\t} ).length;\n};\n\n\n\n\njQuery.offset = {\n\tsetOffset: function( elem, options, i ) {\n\t\tvar curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,\n\t\t\tposition = jQuery.css( elem, \"position\" ),\n\t\t\tcurElem = jQuery( elem ),\n\t\t\tprops = {};\n\n\t\t// Set position first, in-case top/left are set even on static elem\n\t\tif ( position === \"static\" ) {\n\t\t\telem.style.position = \"relative\";\n\t\t}\n\n\t\tcurOffset = curElem.offset();\n\t\tcurCSSTop = jQuery.css( elem, \"top\" );\n\t\tcurCSSLeft = jQuery.css( elem, \"left\" );\n\t\tcalculatePosition = ( position === \"absolute\" || position === \"fixed\" ) &&\n\t\t\t( curCSSTop + curCSSLeft ).indexOf( \"auto\" ) > -1;\n\n\t\t// Need to be able to calculate position if either\n\t\t// top or left is auto and position is either absolute or fixed\n\t\tif ( calculatePosition ) {\n\t\t\tcurPosition = curElem.position();\n\t\t\tcurTop = curPosition.top;\n\t\t\tcurLeft = curPosition.left;\n\n\t\t} else {\n\t\t\tcurTop = parseFloat( curCSSTop ) || 0;\n\t\t\tcurLeft = parseFloat( curCSSLeft ) || 0;\n\t\t}\n\n\t\tif ( isFunction( options ) ) {\n\n\t\t\t// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)\n\t\t\toptions = options.call( elem, i, jQuery.extend( {}, curOffset ) );\n\t\t}\n\n\t\tif ( options.top != null ) {\n\t\t\tprops.top = ( options.top - curOffset.top ) + curTop;\n\t\t}\n\t\tif ( options.left != null ) {\n\t\t\tprops.left = ( options.left - curOffset.left ) + curLeft;\n\t\t}\n\n\t\tif ( \"using\" in options ) {\n\t\t\toptions.using.call( elem, props );\n\n\t\t} else {\n\t\t\tcurElem.css( props );\n\t\t}\n\t}\n};\n\njQuery.fn.extend( {\n\n\t// offset() relates an element's border box to the document origin\n\toffset: function( options ) {\n\n\t\t// Preserve chaining for setter\n\t\tif ( arguments.length ) {\n\t\t\treturn options === undefined ?\n\t\t\t\tthis :\n\t\t\t\tthis.each( function( i ) {\n\t\t\t\t\tjQuery.offset.setOffset( this, options, i );\n\t\t\t\t} );\n\t\t}\n\n\t\tvar rect, win,\n\t\t\telem = this[ 0 ];\n\n\t\tif ( !elem ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Return zeros for disconnected and hidden (display: none) elements (gh-2310)\n\t\t// Support: IE <=11 only\n\t\t// Running getBoundingClientRect on a\n\t\t// disconnected node in IE throws an error\n\t\tif ( !elem.getClientRects().length ) {\n\t\t\treturn { top: 0, left: 0 };\n\t\t}\n\n\t\t// Get document-relative position by adding viewport scroll to viewport-relative gBCR\n\t\trect = elem.getBoundingClientRect();\n\t\twin = elem.ownerDocument.defaultView;\n\t\treturn {\n\t\t\ttop: rect.top + win.pageYOffset,\n\t\t\tleft: rect.left + win.pageXOffset\n\t\t};\n\t},\n\n\t// position() relates an element's margin box to its offset parent's padding box\n\t// This corresponds to the behavior of CSS absolute positioning\n\tposition: function() {\n\t\tif ( !this[ 0 ] ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar offsetParent, offset, doc,\n\t\t\telem = this[ 0 ],\n\t\t\tparentOffset = { top: 0, left: 0 };\n\n\t\t// position:fixed elements are offset from the viewport, which itself always has zero offset\n\t\tif ( jQuery.css( elem, \"position\" ) === \"fixed\" ) {\n\n\t\t\t// Assume position:fixed implies availability of getBoundingClientRect\n\t\t\toffset = elem.getBoundingClientRect();\n\n\t\t} else {\n\t\t\toffset = this.offset();\n\n\t\t\t// Account for the *real* offset parent, which can be the document or its root element\n\t\t\t// when a statically positioned element is identified\n\t\t\tdoc = elem.ownerDocument;\n\t\t\toffsetParent = elem.offsetParent || doc.documentElement;\n\t\t\twhile ( offsetParent &&\n\t\t\t\t( offsetParent === doc.body || offsetParent === doc.documentElement ) &&\n\t\t\t\tjQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\n\t\t\t\toffsetParent = offsetParent.parentNode;\n\t\t\t}\n\t\t\tif ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {\n\n\t\t\t\t// Incorporate borders into its offset, since they are outside its content origin\n\t\t\t\tparentOffset = jQuery( offsetParent ).offset();\n\t\t\t\tparentOffset.top += jQuery.css( offsetParent, \"borderTopWidth\", true );\n\t\t\t\tparentOffset.left += jQuery.css( offsetParent, \"borderLeftWidth\", true );\n\t\t\t}\n\t\t}\n\n\t\t// Subtract parent offsets and element margins\n\t\treturn {\n\t\t\ttop: offset.top - parentOffset.top - jQuery.css( elem, \"marginTop\", true ),\n\t\t\tleft: offset.left - parentOffset.left - jQuery.css( elem, \"marginLeft\", true )\n\t\t};\n\t},\n\n\t// This method will return documentElement in the following cases:\n\t// 1) For the element inside the iframe without offsetParent, this method will return\n\t//    documentElement of the parent window\n\t// 2) For the hidden or detached element\n\t// 3) For body or html element, i.e. in case of the html node - it will return itself\n\t//\n\t// but those exceptions were never presented as a real life use-cases\n\t// and might be considered as more preferable results.\n\t//\n\t// This logic, however, is not guaranteed and can change at any point in the future\n\toffsetParent: function() {\n\t\treturn this.map( function() {\n\t\t\tvar offsetParent = this.offsetParent;\n\n\t\t\twhile ( offsetParent && jQuery.css( offsetParent, \"position\" ) === \"static\" ) {\n\t\t\t\toffsetParent = offsetParent.offsetParent;\n\t\t\t}\n\n\t\t\treturn offsetParent || documentElement;\n\t\t} );\n\t}\n} );\n\n// Create scrollLeft and scrollTop methods\njQuery.each( { scrollLeft: \"pageXOffset\", scrollTop: \"pageYOffset\" }, function( method, prop ) {\n\tvar top = \"pageYOffset\" === prop;\n\n\tjQuery.fn[ method ] = function( val ) {\n\t\treturn access( this, function( elem, method, val ) {\n\n\t\t\t// Coalesce documents and windows\n\t\t\tvar win;\n\t\t\tif ( isWindow( elem ) ) {\n\t\t\t\twin = elem;\n\t\t\t} else if ( elem.nodeType === 9 ) {\n\t\t\t\twin = elem.defaultView;\n\t\t\t}\n\n\t\t\tif ( val === undefined ) {\n\t\t\t\treturn win ? win[ prop ] : elem[ method ];\n\t\t\t}\n\n\t\t\tif ( win ) {\n\t\t\t\twin.scrollTo(\n\t\t\t\t\t!top ? val : win.pageXOffset,\n\t\t\t\t\ttop ? val : win.pageYOffset\n\t\t\t\t);\n\n\t\t\t} else {\n\t\t\t\telem[ method ] = val;\n\t\t\t}\n\t\t}, method, val, arguments.length );\n\t};\n} );\n\n// Support: Safari <=7 - 9.1, Chrome <=37 - 49\n// Add the top/left cssHooks using jQuery.fn.position\n// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084\n// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347\n// getComputedStyle returns percent when specified for top/left/bottom/right;\n// rather than make the css module depend on the offset module, just check for it here\njQuery.each( [ \"top\", \"left\" ], function( _i, prop ) {\n\tjQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,\n\t\tfunction( elem, computed ) {\n\t\t\tif ( computed ) {\n\t\t\t\tcomputed = curCSS( elem, prop );\n\n\t\t\t\t// If curCSS returns percentage, fallback to offset\n\t\t\t\treturn rnumnonpx.test( computed ) ?\n\t\t\t\t\tjQuery( elem ).position()[ prop ] + \"px\" :\n\t\t\t\t\tcomputed;\n\t\t\t}\n\t\t}\n\t);\n} );\n\n\n// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods\njQuery.each( { Height: \"height\", Width: \"width\" }, function( name, type ) {\n\tjQuery.each( {\n\t\tpadding: \"inner\" + name,\n\t\tcontent: type,\n\t\t\"\": \"outer\" + name\n\t}, function( defaultExtra, funcName ) {\n\n\t\t// Margin is only for outerHeight, outerWidth\n\t\tjQuery.fn[ funcName ] = function( margin, value ) {\n\t\t\tvar chainable = arguments.length && ( defaultExtra || typeof margin !== \"boolean\" ),\n\t\t\t\textra = defaultExtra || ( margin === true || value === true ? \"margin\" : \"border\" );\n\n\t\t\treturn access( this, function( elem, type, value ) {\n\t\t\t\tvar doc;\n\n\t\t\t\tif ( isWindow( elem ) ) {\n\n\t\t\t\t\t// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)\n\t\t\t\t\treturn funcName.indexOf( \"outer\" ) === 0 ?\n\t\t\t\t\t\telem[ \"inner\" + name ] :\n\t\t\t\t\t\telem.document.documentElement[ \"client\" + name ];\n\t\t\t\t}\n\n\t\t\t\t// Get document width or height\n\t\t\t\tif ( elem.nodeType === 9 ) {\n\t\t\t\t\tdoc = elem.documentElement;\n\n\t\t\t\t\t// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],\n\t\t\t\t\t// whichever is greatest\n\t\t\t\t\treturn Math.max(\n\t\t\t\t\t\telem.body[ \"scroll\" + name ], doc[ \"scroll\" + name ],\n\t\t\t\t\t\telem.body[ \"offset\" + name ], doc[ \"offset\" + name ],\n\t\t\t\t\t\tdoc[ \"client\" + name ]\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn value === undefined ?\n\n\t\t\t\t\t// Get width or height on the element, requesting but not forcing parseFloat\n\t\t\t\t\tjQuery.css( elem, type, extra ) :\n\n\t\t\t\t\t// Set width or height on the element\n\t\t\t\t\tjQuery.style( elem, type, value, extra );\n\t\t\t}, type, chainable ? margin : undefined, chainable );\n\t\t};\n\t} );\n} );\n\n\njQuery.each( [\n\t\"ajaxStart\",\n\t\"ajaxStop\",\n\t\"ajaxComplete\",\n\t\"ajaxError\",\n\t\"ajaxSuccess\",\n\t\"ajaxSend\"\n], function( _i, type ) {\n\tjQuery.fn[ type ] = function( fn ) {\n\t\treturn this.on( type, fn );\n\t};\n} );\n\n\n\n\njQuery.fn.extend( {\n\n\tbind: function( types, data, fn ) {\n\t\treturn this.on( types, null, data, fn );\n\t},\n\tunbind: function( types, fn ) {\n\t\treturn this.off( types, null, fn );\n\t},\n\n\tdelegate: function( selector, types, data, fn ) {\n\t\treturn this.on( types, selector, data, fn );\n\t},\n\tundelegate: function( selector, types, fn ) {\n\n\t\t// ( namespace ) or ( selector, types [, fn] )\n\t\treturn arguments.length === 1 ?\n\t\t\tthis.off( selector, \"**\" ) :\n\t\t\tthis.off( types, selector || \"**\", fn );\n\t},\n\n\thover: function( fnOver, fnOut ) {\n\t\treturn this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );\n\t}\n} );\n\njQuery.each(\n\t( \"blur focus focusin focusout resize scroll click dblclick \" +\n\t\"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave \" +\n\t\"change select submit keydown keypress keyup contextmenu\" ).split( \" \" ),\n\tfunction( _i, name ) {\n\n\t\t// Handle event binding\n\t\tjQuery.fn[ name ] = function( data, fn ) {\n\t\t\treturn arguments.length > 0 ?\n\t\t\t\tthis.on( name, null, data, fn ) :\n\t\t\t\tthis.trigger( name );\n\t\t};\n\t}\n);\n\n\n\n\n// Support: Android <=4.0 only\n// Make sure we trim BOM and NBSP\n// Require that the \"whitespace run\" starts from a non-whitespace\n// to avoid O(N^2) behavior when the engine would try matching \"\\s+$\" at each space position.\nvar rtrim = /^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;\n\n// Bind a function to a context, optionally partially applying any\n// arguments.\n// jQuery.proxy is deprecated to promote standards (specifically Function#bind)\n// However, it is not slated for removal any time soon\njQuery.proxy = function( fn, context ) {\n\tvar tmp, args, proxy;\n\n\tif ( typeof context === \"string\" ) {\n\t\ttmp = fn[ context ];\n\t\tcontext = fn;\n\t\tfn = tmp;\n\t}\n\n\t// Quick check to determine if target is callable, in the spec\n\t// this throws a TypeError, but we will just return undefined.\n\tif ( !isFunction( fn ) ) {\n\t\treturn undefined;\n\t}\n\n\t// Simulated bind\n\targs = slice.call( arguments, 2 );\n\tproxy = function() {\n\t\treturn fn.apply( context || this, args.concat( slice.call( arguments ) ) );\n\t};\n\n\t// Set the guid of unique handler to the same of original handler, so it can be removed\n\tproxy.guid = fn.guid = fn.guid || jQuery.guid++;\n\n\treturn proxy;\n};\n\njQuery.holdReady = function( hold ) {\n\tif ( hold ) {\n\t\tjQuery.readyWait++;\n\t} else {\n\t\tjQuery.ready( true );\n\t}\n};\njQuery.isArray = Array.isArray;\njQuery.parseJSON = JSON.parse;\njQuery.nodeName = nodeName;\njQuery.isFunction = isFunction;\njQuery.isWindow = isWindow;\njQuery.camelCase = camelCase;\njQuery.type = toType;\n\njQuery.now = Date.now;\n\njQuery.isNumeric = function( obj ) {\n\n\t// As of jQuery 3.0, isNumeric is limited to\n\t// strings and numbers (primitives or objects)\n\t// that can be coerced to finite numbers (gh-2662)\n\tvar type = jQuery.type( obj );\n\treturn ( type === \"number\" || type === \"string\" ) &&\n\n\t\t// parseFloat NaNs numeric-cast false positives (\"\")\n\t\t// ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n\t\t// subtraction forces infinities to NaN\n\t\t!isNaN( obj - parseFloat( obj ) );\n};\n\njQuery.trim = function( text ) {\n\treturn text == null ?\n\t\t\"\" :\n\t\t( text + \"\" ).replace( rtrim, \"$1\" );\n};\n\n\n\n// Register as a named AMD module, since jQuery can be concatenated with other\n// files that may use define, but not via a proper concatenation script that\n// understands anonymous AMD modules. A named AMD is safest and most robust\n// way to register. Lowercase jquery is used because AMD module names are\n// derived from file names, and jQuery is normally delivered in a lowercase\n// file name. Do this after creating the global so that if an AMD module wants\n// to call noConflict to hide this version of jQuery, it will work.\n\n// Note that for maximum portability, libraries that are not jQuery should\n// declare themselves as anonymous modules, and avoid setting a global if an\n// AMD loader is present. jQuery is a special case. For more information, see\n// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon\n\nif ( true ) {\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {\n\t\treturn jQuery;\n\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n}\n\n\n\n\nvar\n\n\t// Map over jQuery in case of overwrite\n\t_jQuery = window.jQuery,\n\n\t// Map over the $ in case of overwrite\n\t_$ = window.$;\n\njQuery.noConflict = function( deep ) {\n\tif ( window.$ === jQuery ) {\n\t\twindow.$ = _$;\n\t}\n\n\tif ( deep && window.jQuery === jQuery ) {\n\t\twindow.jQuery = _jQuery;\n\t}\n\n\treturn jQuery;\n};\n\n// Expose jQuery and $ identifiers, even in AMD\n// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)\n// and CommonJS for browser emulators (trac-13566)\nif ( typeof noGlobal === \"undefined\" ) {\n\twindow.jQuery = window.$ = jQuery;\n}\n\n\n\n\nreturn jQuery;\n} );\n\n\n//# sourceURL=webpack://ocaduillustration/./node_modules/jquery/dist/jquery.js?");

/***/ }),

/***/ "./node_modules/matter-attractors/build/matter-attractors.js":
/*!*******************************************************************!*\
  !*** ./node_modules/matter-attractors/build/matter-attractors.js ***!
  \*******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/*!\n * matter-attractors 0.1.6 by Liam Brummitt 2017-05-15\n * https://github.com/liabru/matter-attractors\n * License MIT\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! matter-js */ \"./node_modules/matter-js/build/matter.js\"));\n\telse {}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_0__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_766__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_766__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_766__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_766__.c = installedModules;\n\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__nested_webpack_require_766__.i = function(value) { return value; };\n\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_766__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_766__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_766__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_766__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_766__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_766__.p = \"/libs\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_766__(__nested_webpack_require_766__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_0__;\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __nested_webpack_require_3195__) {\n\n\"use strict\";\n\n\nvar Matter = __nested_webpack_require_3195__(0);\n\n/**\n * An attractors plugin for matter.js.\n * See the readme for usage and examples.\n * @module MatterAttractors\n */\nvar MatterAttractors = {\n  // plugin meta\n  name: 'matter-attractors', // PLUGIN_NAME\n  version: '0.1.4', // PLUGIN_VERSION\n  for: 'matter-js@^0.12.0',\n\n  // installs the plugin where `base` is `Matter`\n  // you should not need to call this directly.\n  install: function install(base) {\n    base.after('Body.create', function () {\n      MatterAttractors.Body.init(this);\n    });\n\n    base.before('Engine.update', function (engine) {\n      MatterAttractors.Engine.update(engine);\n    });\n  },\n\n  Body: {\n    /**\n     * Initialises the `body` to support attractors.\n     * This is called automatically by the plugin.\n     * @function MatterAttractors.Body.init\n     * @param {Matter.Body} body The body to init.\n     * @returns {void} No return value.\n     */\n    init: function init(body) {\n      body.plugin.attractors = body.plugin.attractors || [];\n    }\n  },\n\n  Engine: {\n    /**\n     * Applies all attractors for all bodies in the `engine`.\n     * This is called automatically by the plugin.\n     * @function MatterAttractors.Engine.update\n     * @param {Matter.Engine} engine The engine to update.\n     * @returns {void} No return value.\n     */\n    update: function update(engine) {\n      var world = engine.world,\n          bodies = Matter.Composite.allBodies(world);\n\n      for (var i = 0; i < bodies.length; i += 1) {\n        var bodyA = bodies[i],\n            attractors = bodyA.plugin.attractors;\n\n        if (attractors && attractors.length > 0) {\n          for (var j = i + 1; j < bodies.length; j += 1) {\n            var bodyB = bodies[j];\n\n            for (var k = 0; k < attractors.length; k += 1) {\n              var attractor = attractors[k],\n                  forceVector = attractor;\n\n              if (Matter.Common.isFunction(attractor)) {\n                forceVector = attractor(bodyA, bodyB);\n              }\n\n              if (forceVector) {\n                Matter.Body.applyForce(bodyB, bodyB.position, forceVector);\n              }\n            }\n          }\n        }\n      }\n    }\n  },\n\n  /**\n   * Defines some useful common attractor functions that can be used \n   * by pushing them to your body's `body.plugin.attractors` array.\n   * @namespace MatterAttractors.Attractors\n   * @property {number} gravityConstant The gravitational constant used by the gravity attractor.\n   */\n  Attractors: {\n    gravityConstant: 0.001,\n\n    /**\n     * An attractor function that applies Newton's law of gravitation.\n     * Use this by pushing `MatterAttractors.Attractors.gravity` to your body's `body.plugin.attractors` array.\n     * The gravitational constant defaults to `0.001` which you can change \n     * at `MatterAttractors.Attractors.gravityConstant`.\n     * @function MatterAttractors.Attractors.gravity\n     * @param {Matter.Body} bodyA The first body.\n     * @param {Matter.Body} bodyB The second body.\n     * @returns {void} No return value.\n     */\n    gravity: function gravity(bodyA, bodyB) {\n      // use Newton's law of gravitation\n      var bToA = Matter.Vector.sub(bodyB.position, bodyA.position),\n          distanceSq = Matter.Vector.magnitudeSquared(bToA) || 0.0001,\n          normal = Matter.Vector.normalise(bToA),\n          magnitude = -MatterAttractors.Attractors.gravityConstant * (bodyA.mass * bodyB.mass / distanceSq),\n          force = Matter.Vector.mult(normal, magnitude);\n\n      // to apply forces to both bodies\n      Matter.Body.applyForce(bodyA, bodyA.position, Matter.Vector.neg(force));\n      Matter.Body.applyForce(bodyB, bodyB.position, force);\n    }\n  }\n};\n\nMatter.Plugin.register(MatterAttractors);\n\nmodule.exports = MatterAttractors;\n\n/**\n * @namespace Matter.Body\n * @see http://brm.io/matter-js/docs/classes/Body.html\n */\n\n/**\n * This plugin adds a new property `body.plugin.attractors` to instances of `Matter.Body`.  \n * This is an array of callback functions that will be called automatically\n * for every pair of bodies, on every engine update.\n * @property {Function[]} body.plugin.attractors\n * @memberof Matter.Body\n */\n\n/**\n * An attractor function calculates the force to be applied\n * to `bodyB`, it should either:\n * - return the force vector to be applied to `bodyB`\n * - or apply the force to the body(s) itself\n * @callback AttractorFunction\n * @param {Matter.Body} bodyA\n * @param {Matter.Body} bodyB\n * @returns {Vector|undefined} a force vector (optional)\n */\n\n/***/ })\n/******/ ]);\n});\n\n//# sourceURL=webpack://ocaduillustration/./node_modules/matter-attractors/build/matter-attractors.js?");

/***/ }),

/***/ "./node_modules/matter-js/build/matter.js":
/*!************************************************!*\
  !*** ./node_modules/matter-js/build/matter.js ***!
  \************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("/*!\n * matter-js 0.19.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse {}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_1787__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_1787__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_1787__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_1787__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_1787__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_1787__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__nested_webpack_require_1787__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__nested_webpack_require_1787__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __nested_webpack_require_1787__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__nested_webpack_require_1787__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_1787__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_1787__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_1787__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_1787__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_1787__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_1787__(__nested_webpack_require_1787__.s = 20);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Common` module contains utility functions that are common to all modules.\n*\n* @class Common\n*/\n\nvar Common = {};\n\nmodule.exports = Common;\n\n(function() {\n\n    Common._baseDelta = 1000 / 60;\n    Common._nextId = 0;\n    Common._seed = 0;\n    Common._nowStartTime = +(new Date());\n    Common._warnedOnce = {};\n    Common._decomp = null;\n    \n    /**\n     * Extends the object in the first argument using the object in the second argument.\n     * @method extend\n     * @param {} obj\n     * @param {boolean} deep\n     * @return {} obj extended\n     */\n    Common.extend = function(obj, deep) {\n        var argsStart,\n            args,\n            deepClone;\n\n        if (typeof deep === 'boolean') {\n            argsStart = 2;\n            deepClone = deep;\n        } else {\n            argsStart = 1;\n            deepClone = true;\n        }\n\n        for (var i = argsStart; i < arguments.length; i++) {\n            var source = arguments[i];\n\n            if (source) {\n                for (var prop in source) {\n                    if (deepClone && source[prop] && source[prop].constructor === Object) {\n                        if (!obj[prop] || obj[prop].constructor === Object) {\n                            obj[prop] = obj[prop] || {};\n                            Common.extend(obj[prop], deepClone, source[prop]);\n                        } else {\n                            obj[prop] = source[prop];\n                        }\n                    } else {\n                        obj[prop] = source[prop];\n                    }\n                }\n            }\n        }\n        \n        return obj;\n    };\n\n    /**\n     * Creates a new clone of the object, if deep is true references will also be cloned.\n     * @method clone\n     * @param {} obj\n     * @param {bool} deep\n     * @return {} obj cloned\n     */\n    Common.clone = function(obj, deep) {\n        return Common.extend({}, deep, obj);\n    };\n\n    /**\n     * Returns the list of keys for the given object.\n     * @method keys\n     * @param {} obj\n     * @return {string[]} keys\n     */\n    Common.keys = function(obj) {\n        if (Object.keys)\n            return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj)\n            keys.push(key);\n        return keys;\n    };\n\n    /**\n     * Returns the list of values for the given object.\n     * @method values\n     * @param {} obj\n     * @return {array} Array of the objects property values\n     */\n    Common.values = function(obj) {\n        var values = [];\n        \n        if (Object.keys) {\n            var keys = Object.keys(obj);\n            for (var i = 0; i < keys.length; i++) {\n                values.push(obj[keys[i]]);\n            }\n            return values;\n        }\n        \n        // avoid hasOwnProperty for performance\n        for (var key in obj)\n            values.push(obj[key]);\n        return values;\n    };\n\n    /**\n     * Gets a value from `base` relative to the `path` string.\n     * @method get\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} The object at the given path\n     */\n    Common.get = function(obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n\n        for (var i = 0; i < path.length; i += 1) {\n            obj = obj[path[i]];\n        }\n\n        return obj;\n    };\n\n    /**\n     * Sets a value on `base` relative to the given `path` string.\n     * @method set\n     * @param {} obj The base object\n     * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n     * @param {} val The value to set\n     * @param {number} [begin] Path slice begin\n     * @param {number} [end] Path slice end\n     * @return {} Pass through `val` for chaining\n     */\n    Common.set = function(obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n    };\n\n    /**\n     * Shuffles the given array in-place.\n     * The function uses a seeded random generator.\n     * @method shuffle\n     * @param {array} array\n     * @return {array} array shuffled randomly\n     */\n    Common.shuffle = function(array) {\n        for (var i = array.length - 1; i > 0; i--) {\n            var j = Math.floor(Common.random() * (i + 1));\n            var temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n        return array;\n    };\n\n    /**\n     * Randomly chooses a value from a list with equal probability.\n     * The function uses a seeded random generator.\n     * @method choose\n     * @param {array} choices\n     * @return {object} A random choice object from the array\n     */\n    Common.choose = function(choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n    };\n\n    /**\n     * Returns true if the object is a HTMLElement, otherwise false.\n     * @method isElement\n     * @param {object} obj\n     * @return {boolean} True if the object is a HTMLElement, otherwise false\n     */\n    Common.isElement = function(obj) {\n        if (typeof HTMLElement !== 'undefined') {\n            return obj instanceof HTMLElement;\n        }\n\n        return !!(obj && obj.nodeType && obj.nodeName);\n    };\n\n    /**\n     * Returns true if the object is an array.\n     * @method isArray\n     * @param {object} obj\n     * @return {boolean} True if the object is an array, otherwise false\n     */\n    Common.isArray = function(obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n    };\n\n    /**\n     * Returns true if the object is a function.\n     * @method isFunction\n     * @param {object} obj\n     * @return {boolean} True if the object is a function, otherwise false\n     */\n    Common.isFunction = function(obj) {\n        return typeof obj === \"function\";\n    };\n\n    /**\n     * Returns true if the object is a plain object.\n     * @method isPlainObject\n     * @param {object} obj\n     * @return {boolean} True if the object is a plain object, otherwise false\n     */\n    Common.isPlainObject = function(obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n    };\n\n    /**\n     * Returns true if the object is a string.\n     * @method isString\n     * @param {object} obj\n     * @return {boolean} True if the object is a string, otherwise false\n     */\n    Common.isString = function(obj) {\n        return toString.call(obj) === '[object String]';\n    };\n    \n    /**\n     * Returns the given value clamped between a minimum and maximum value.\n     * @method clamp\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} The value clamped between min and max inclusive\n     */\n    Common.clamp = function(value, min, max) {\n        if (value < min)\n            return min;\n        if (value > max)\n            return max;\n        return value;\n    };\n    \n    /**\n     * Returns the sign of the given value.\n     * @method sign\n     * @param {number} value\n     * @return {number} -1 if negative, +1 if 0 or positive\n     */\n    Common.sign = function(value) {\n        return value < 0 ? -1 : 1;\n    };\n    \n    /**\n     * Returns the current timestamp since the time origin (e.g. from page load).\n     * The result is in milliseconds and will use high-resolution timing if available.\n     * @method now\n     * @return {number} the current timestamp in milliseconds\n     */\n    Common.now = function() {\n        if (typeof window !== 'undefined' && window.performance) {\n            if (window.performance.now) {\n                return window.performance.now();\n            } else if (window.performance.webkitNow) {\n                return window.performance.webkitNow();\n            }\n        }\n\n        if (Date.now) {\n            return Date.now();\n        }\n\n        return (new Date()) - Common._nowStartTime;\n    };\n    \n    /**\n     * Returns a random value between a minimum and a maximum value inclusive.\n     * The function uses a seeded random generator.\n     * @method random\n     * @param {number} min\n     * @param {number} max\n     * @return {number} A random number between min and max inclusive\n     */\n    Common.random = function(min, max) {\n        min = (typeof min !== \"undefined\") ? min : 0;\n        max = (typeof max !== \"undefined\") ? max : 1;\n        return min + _seededRandom() * (max - min);\n    };\n\n    var _seededRandom = function() {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n    };\n\n    /**\n     * Converts a CSS hex colour string into an integer.\n     * @method colorToNumber\n     * @param {string} colorString\n     * @return {number} An integer representing the CSS hex string\n     */\n    Common.colorToNumber = function(colorString) {\n        colorString = colorString.replace('#','');\n\n        if (colorString.length == 3) {\n            colorString = colorString.charAt(0) + colorString.charAt(0)\n                        + colorString.charAt(1) + colorString.charAt(1)\n                        + colorString.charAt(2) + colorString.charAt(2);\n        }\n\n        return parseInt(colorString, 16);\n    };\n\n    /**\n     * The console logging level to use, where each level includes all levels above and excludes the levels below.\n     * The default level is 'debug' which shows all console messages.  \n     *\n     * Possible level values are:\n     * - 0 = None\n     * - 1 = Debug\n     * - 2 = Info\n     * - 3 = Warn\n     * - 4 = Error\n     * @static\n     * @property logLevel\n     * @type {Number}\n     * @default 1\n     */\n    Common.logLevel = 1;\n\n    /**\n     * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method log\n     * @param ...objs {} The objects to log.\n     */\n    Common.log = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method info\n     * @param ...objs {} The objects to log.\n     */\n    Common.info = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n            console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n     * The message will be prefixed with 'matter-js' to make it easily identifiable.\n     * @method warn\n     * @param ...objs {} The objects to log.\n     */\n    Common.warn = function() {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n            console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n    };\n\n    /**\n     * Uses `Common.warn` to log the given message one time only.\n     * @method warnOnce\n     * @param ...objs {} The objects to log.\n     */\n    Common.warnOnce = function() {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n\n        if (!Common._warnedOnce[message]) {\n            Common.warn(message);\n            Common._warnedOnce[message] = true;\n        }\n    };\n\n    /**\n     * Shows a deprecated console warning when the function on the given object is called.\n     * The target function will be replaced with a new function that first shows the warning\n     * and then calls the original function.\n     * @method deprecated\n     * @param {object} obj The object or module\n     * @param {string} name The property name of the function on obj\n     * @param {string} warning The one-time message to show if the function is called\n     */\n    Common.deprecated = function(obj, prop, warning) {\n        obj[prop] = Common.chain(function() {\n            Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n    };\n\n    /**\n     * Returns the next unique sequential ID.\n     * @method nextId\n     * @return {Number} Unique sequential ID\n     */\n    Common.nextId = function() {\n        return Common._nextId++;\n    };\n\n    /**\n     * A cross browser compatible indexOf implementation.\n     * @method indexOf\n     * @param {array} haystack\n     * @param {object} needle\n     * @return {number} The position of needle in haystack, otherwise -1.\n     */\n    Common.indexOf = function(haystack, needle) {\n        if (haystack.indexOf)\n            return haystack.indexOf(needle);\n\n        for (var i = 0; i < haystack.length; i++) {\n            if (haystack[i] === needle)\n                return i;\n        }\n\n        return -1;\n    };\n\n    /**\n     * A cross browser compatible array map implementation.\n     * @method map\n     * @param {array} list\n     * @param {function} func\n     * @return {array} Values from list transformed by func.\n     */\n    Common.map = function(list, func) {\n        if (list.map) {\n            return list.map(func);\n        }\n\n        var mapped = [];\n\n        for (var i = 0; i < list.length; i += 1) {\n            mapped.push(func(list[i]));\n        }\n\n        return mapped;\n    };\n\n    /**\n     * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n     * Circular dependencies are allowed.\n     * @method topologicalSort\n     * @param {object} graph\n     * @return {array} Partially ordered set of vertices in topological order.\n     */\n    Common.topologicalSort = function(graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n            visited = [],\n            temp = [];\n\n        for (var node in graph) {\n            if (!visited[node] && !temp[node]) {\n                Common._topologicalSort(node, visited, temp, graph, result);\n            }\n        }\n\n        return result;\n    };\n\n    Common._topologicalSort = function(node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n\n        for (var i = 0; i < neighbors.length; i += 1) {\n            var neighbor = neighbors[i];\n\n            if (temp[neighbor]) {\n                // skip circular dependencies\n                continue;\n            }\n\n            if (!visited[neighbor]) {\n                Common._topologicalSort(neighbor, visited, temp, graph, result);\n            }\n        }\n\n        temp[node] = false;\n        visited[node] = true;\n\n        result.push(node);\n    };\n\n    /**\n     * Takes _n_ functions as arguments and returns a new function that calls them in order.\n     * The arguments applied when calling the new function will also be applied to every function passed.\n     * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n     * Therefore if a passed function does not return a value, the previously returned value is maintained.\n     * After all passed functions have been called the new function returns the last returned value (if any).\n     * If any of the passed functions are a chain, then the chain will be flattened.\n     * @method chain\n     * @param ...funcs {function} The functions to chain.\n     * @return {function} A new function that calls the passed functions in order.\n     */\n    Common.chain = function() {\n        var funcs = [];\n\n        for (var i = 0; i < arguments.length; i += 1) {\n            var func = arguments[i];\n\n            if (func._chained) {\n                // flatten already chained functions\n                funcs.push.apply(funcs, func._chained);\n            } else {\n                funcs.push(func);\n            }\n        }\n\n        var chain = function() {\n            // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n            var lastResult,\n                args = new Array(arguments.length);\n\n            for (var i = 0, l = arguments.length; i < l; i++) {\n                args[i] = arguments[i];\n            }\n\n            for (i = 0; i < funcs.length; i += 1) {\n                var result = funcs[i].apply(lastResult, args);\n\n                if (typeof result !== 'undefined') {\n                    lastResult = result;\n                }\n            }\n\n            return lastResult;\n        };\n\n        chain._chained = funcs;\n\n        return chain;\n    };\n\n    /**\n     * Chains a function to excute before the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathBefore\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain before the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathBefore = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            func,\n            Common.get(base, path)\n        ));\n    };\n\n    /**\n     * Chains a function to excute after the original function on the given `path` relative to `base`.\n     * See also docs for `Common.chain`.\n     * @method chainPathAfter\n     * @param {} base The base object\n     * @param {string} path The path relative to `base`\n     * @param {function} func The function to chain after the original\n     * @return {function} The chained function that replaced the original\n     */\n    Common.chainPathAfter = function(base, path, func) {\n        return Common.set(base, path, Common.chain(\n            Common.get(base, path),\n            func\n        ));\n    };\n\n    /**\n     * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n     * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n     * @method setDecomp\n     * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n     */\n    Common.setDecomp = function(decomp) {\n        Common._decomp = decomp;\n    };\n\n    /**\n     * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n     * otherwise returns the global `decomp` if set.\n     * @method getDecomp\n     * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n     */\n    Common.getDecomp = function() {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n\n        try {\n            // otherwise from window global\n            if (!decomp && typeof window !== 'undefined') {\n                decomp = window.decomp;\n            }\n    \n            // otherwise from node global\n            if (!decomp && typeof __webpack_require__.g !== 'undefined') {\n                decomp = __webpack_require__.g.decomp;\n            }\n        } catch (e) {\n            // decomp not available\n            decomp = null;\n        }\n\n        return decomp;\n    };\n})();\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n*\n* @class Bounds\n*/\n\nvar Bounds = {};\n\nmodule.exports = Bounds;\n\n(function() {\n\n    /**\n     * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n     * @method create\n     * @param {vertices} vertices\n     * @return {bounds} A new bounds object\n     */\n    Bounds.create = function(vertices) {\n        var bounds = { \n            min: { x: 0, y: 0 }, \n            max: { x: 0, y: 0 }\n        };\n\n        if (vertices)\n            Bounds.update(bounds, vertices);\n        \n        return bounds;\n    };\n\n    /**\n     * Updates bounds using the given vertices and extends the bounds given a velocity.\n     * @method update\n     * @param {bounds} bounds\n     * @param {vertices} vertices\n     * @param {vector} velocity\n     */\n    Bounds.update = function(bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n\n        for (var i = 0; i < vertices.length; i++) {\n            var vertex = vertices[i];\n            if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n            if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n            if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n            if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        \n        if (velocity) {\n            if (velocity.x > 0) {\n                bounds.max.x += velocity.x;\n            } else {\n                bounds.min.x += velocity.x;\n            }\n            \n            if (velocity.y > 0) {\n                bounds.max.y += velocity.y;\n            } else {\n                bounds.min.y += velocity.y;\n            }\n        }\n    };\n\n    /**\n     * Returns true if the bounds contains the given point.\n     * @method contains\n     * @param {bounds} bounds\n     * @param {vector} point\n     * @return {boolean} True if the bounds contain the point, otherwise false\n     */\n    Bounds.contains = function(bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x \n               && point.y >= bounds.min.y && point.y <= bounds.max.y;\n    };\n\n    /**\n     * Returns true if the two bounds intersect.\n     * @method overlaps\n     * @param {bounds} boundsA\n     * @param {bounds} boundsB\n     * @return {boolean} True if the bounds overlap, otherwise false\n     */\n    Bounds.overlaps = function(boundsA, boundsB) {\n        return (boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x\n                && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y);\n    };\n\n    /**\n     * Translates the bounds by the given vector.\n     * @method translate\n     * @param {bounds} bounds\n     * @param {vector} vector\n     */\n    Bounds.translate = function(bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n    };\n\n    /**\n     * Shifts the bounds to the given position.\n     * @method shift\n     * @param {bounds} bounds\n     * @param {vector} position\n     */\n    Bounds.shift = function(bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n            deltaY = bounds.max.y - bounds.min.y;\n            \n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n    };\n    \n})();\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Vector` module contains methods for creating and manipulating vectors.\n* Vectors are the basis of all the geometry related operations in the engine.\n* A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vector\n*/\n\n// TODO: consider params for reusing vector objects\n\nvar Vector = {};\n\nmodule.exports = Vector;\n\n(function() {\n\n    /**\n     * Creates a new vector.\n     * @method create\n     * @param {number} x\n     * @param {number} y\n     * @return {vector} A new vector\n     */\n    Vector.create = function(x, y) {\n        return { x: x || 0, y: y || 0 };\n    };\n\n    /**\n     * Returns a new vector with `x` and `y` copied from the given `vector`.\n     * @method clone\n     * @param {vector} vector\n     * @return {vector} A new cloned vector\n     */\n    Vector.clone = function(vector) {\n        return { x: vector.x, y: vector.y };\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector.\n     * @method magnitude\n     * @param {vector} vector\n     * @return {number} The magnitude of the vector\n     */\n    Vector.magnitude = function(vector) {\n        return Math.sqrt((vector.x * vector.x) + (vector.y * vector.y));\n    };\n\n    /**\n     * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n     * @method magnitudeSquared\n     * @param {vector} vector\n     * @return {number} The squared magnitude of the vector\n     */\n    Vector.magnitudeSquared = function(vector) {\n        return (vector.x * vector.x) + (vector.y * vector.y);\n    };\n\n    /**\n     * Rotates the vector about (0, 0) by specified angle.\n     * @method rotate\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} [output]\n     * @return {vector} The vector rotated about (0, 0)\n     */\n    Vector.rotate = function(vector, angle, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Rotates the vector about a specified point by specified angle.\n     * @method rotateAbout\n     * @param {vector} vector\n     * @param {number} angle\n     * @param {vector} point\n     * @param {vector} [output]\n     * @return {vector} A new vector rotated about the point\n     */\n    Vector.rotateAbout = function(vector, angle, point, output) {\n        var cos = Math.cos(angle), sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n    };\n\n    /**\n     * Normalises a vector (such that its magnitude is `1`).\n     * @method normalise\n     * @param {vector} vector\n     * @return {vector} A new vector normalised\n     */\n    Vector.normalise = function(vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0)\n            return { x: 0, y: 0 };\n        return { x: vector.x / magnitude, y: vector.y / magnitude };\n    };\n\n    /**\n     * Returns the dot-product of two vectors.\n     * @method dot\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The dot product of the two vectors\n     */\n    Vector.dot = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.x) + (vectorA.y * vectorB.y);\n    };\n\n    /**\n     * Returns the cross-product of two vectors.\n     * @method cross\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The cross product of the two vectors\n     */\n    Vector.cross = function(vectorA, vectorB) {\n        return (vectorA.x * vectorB.y) - (vectorA.y * vectorB.x);\n    };\n\n    /**\n     * Returns the cross-product of three vectors.\n     * @method cross3\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} vectorC\n     * @return {number} The cross product of the three vectors\n     */\n    Vector.cross3 = function(vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n    };\n\n    /**\n     * Adds the two vectors.\n     * @method add\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB added\n     */\n    Vector.add = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n    };\n\n    /**\n     * Subtracts the two vectors.\n     * @method sub\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @param {vector} [output]\n     * @return {vector} A new vector of vectorA and vectorB subtracted\n     */\n    Vector.sub = function(vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n    };\n\n    /**\n     * Multiplies a vector and a scalar.\n     * @method mult\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector multiplied by scalar\n     */\n    Vector.mult = function(vector, scalar) {\n        return { x: vector.x * scalar, y: vector.y * scalar };\n    };\n\n    /**\n     * Divides a vector and a scalar.\n     * @method div\n     * @param {vector} vector\n     * @param {number} scalar\n     * @return {vector} A new vector divided by scalar\n     */\n    Vector.div = function(vector, scalar) {\n        return { x: vector.x / scalar, y: vector.y / scalar };\n    };\n\n    /**\n     * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n     * @method perp\n     * @param {vector} vector\n     * @param {bool} [negate=false]\n     * @return {vector} The perpendicular vector\n     */\n    Vector.perp = function(vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return { x: negate * -vector.y, y: negate * vector.x };\n    };\n\n    /**\n     * Negates both components of a vector such that it points in the opposite direction.\n     * @method neg\n     * @param {vector} vector\n     * @return {vector} The negated vector\n     */\n    Vector.neg = function(vector) {\n        return { x: -vector.x, y: -vector.y };\n    };\n\n    /**\n     * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n     * @method angle\n     * @param {vector} vectorA\n     * @param {vector} vectorB\n     * @return {number} The angle in radians\n     */\n    Vector.angle = function(vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n    };\n\n    /**\n     * Temporary vector pool (not thread-safe).\n     * @property _temp\n     * @type {vector[]}\n     * @private\n     */\n    Vector._temp = [\n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create(), \n        Vector.create(), Vector.create()\n    ];\n\n})();\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __nested_webpack_require_35421__) {\n\n/**\n* The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n* A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n* A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Vertices\n*/\n\nvar Vertices = {};\n\nmodule.exports = Vertices;\n\nvar Vector = __nested_webpack_require_35421__(2);\nvar Common = __nested_webpack_require_35421__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of `Matter.Body` compatible vertices.\n     * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n     *\n     *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n     *\n     * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n     * but with some additional references required for efficient collision detection routines.\n     *\n     * Vertices must be specified in clockwise order.\n     *\n     * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n     *\n     * @method create\n     * @param {vector[]} points\n     * @param {body} body\n     */\n    Vertices.create = function(points, body) {\n        var vertices = [];\n\n        for (var i = 0; i < points.length; i++) {\n            var point = points[i],\n                vertex = {\n                    x: point.x,\n                    y: point.y,\n                    index: i,\n                    body: body,\n                    isInternal: false\n                };\n\n            vertices.push(vertex);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n     * into a `Matter.Vertices` object for the given `Matter.Body`.\n     * For parsing SVG paths, see `Svg.pathToVertices`.\n     * @method fromPath\n     * @param {string} path\n     * @param {body} body\n     * @return {vertices} vertices\n     */\n    Vertices.fromPath = function(path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n            points = [];\n\n        path.replace(pathPattern, function(match, x, y) {\n            points.push({ x: parseFloat(x), y: parseFloat(y) });\n        });\n\n        return Vertices.create(points, body);\n    };\n\n    /**\n     * Returns the centre (centroid) of the set of vertices.\n     * @method centre\n     * @param {vertices} vertices\n     * @return {vector} The centre point\n     */\n    Vertices.centre = function(vertices) {\n        var area = Vertices.area(vertices, true),\n            centre = { x: 0, y: 0 },\n            cross,\n            temp,\n            j;\n\n        for (var i = 0; i < vertices.length; i++) {\n            j = (i + 1) % vertices.length;\n            cross = Vector.cross(vertices[i], vertices[j]);\n            temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n            centre = Vector.add(centre, temp);\n        }\n\n        return Vector.div(centre, 6 * area);\n    };\n\n    /**\n     * Returns the average (mean) of the set of vertices.\n     * @method mean\n     * @param {vertices} vertices\n     * @return {vector} The average point\n     */\n    Vertices.mean = function(vertices) {\n        var average = { x: 0, y: 0 };\n\n        for (var i = 0; i < vertices.length; i++) {\n            average.x += vertices[i].x;\n            average.y += vertices[i].y;\n        }\n\n        return Vector.div(average, vertices.length);\n    };\n\n    /**\n     * Returns the area of the set of vertices.\n     * @method area\n     * @param {vertices} vertices\n     * @param {bool} signed\n     * @return {number} The area\n     */\n    Vertices.area = function(vertices, signed) {\n        var area = 0,\n            j = vertices.length - 1;\n\n        for (var i = 0; i < vertices.length; i++) {\n            area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n            j = i;\n        }\n\n        if (signed)\n            return area / 2;\n\n        return Math.abs(area) / 2;\n    };\n\n    /**\n     * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n     * @method inertia\n     * @param {vertices} vertices\n     * @param {number} mass\n     * @return {number} The polygon's moment of inertia\n     */\n    Vertices.inertia = function(vertices, mass) {\n        var numerator = 0,\n            denominator = 0,\n            v = vertices,\n            cross,\n            j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n            j = (n + 1) % v.length;\n            cross = Math.abs(Vector.cross(v[j], v[n]));\n            numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n            denominator += cross;\n        }\n\n        return (mass / 6) * (numerator / denominator);\n    };\n\n    /**\n     * Translates the set of vertices in-place.\n     * @method translate\n     * @param {vertices} vertices\n     * @param {vector} vector\n     * @param {number} scalar\n     */\n    Vertices.translate = function(vertices, vector, scalar) {\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\n\n        var verticesLength = vertices.length,\n            translateX = vector.x * scalar,\n            translateY = vector.y * scalar,\n            i;\n        \n        for (i = 0; i < verticesLength; i++) {\n            vertices[i].x += translateX;\n            vertices[i].y += translateY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Rotates the set of vertices in-place.\n     * @method rotate\n     * @param {vertices} vertices\n     * @param {number} angle\n     * @param {vector} point\n     */\n    Vertices.rotate = function(vertices, angle, point) {\n        if (angle === 0)\n            return;\n\n        var cos = Math.cos(angle),\n            sin = Math.sin(angle),\n            pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex,\n            dx,\n            dy,\n            i;\n\n        for (i = 0; i < verticesLength; i++) {\n            vertex = vertices[i];\n            dx = vertex.x - pointX;\n            dy = vertex.y - pointY;\n            vertex.x = pointX + (dx * cos - dy * sin);\n            vertex.y = pointY + (dx * sin + dy * cos);\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Returns `true` if the `point` is inside the set of `vertices`.\n     * @method contains\n     * @param {vertices} vertices\n     * @param {vector} point\n     * @return {boolean} True if the vertices contains point, otherwise false\n     */\n    Vertices.contains = function(vertices, point) {\n        var pointX = point.x,\n            pointY = point.y,\n            verticesLength = vertices.length,\n            vertex = vertices[verticesLength - 1],\n            nextVertex;\n\n        for (var i = 0; i < verticesLength; i++) {\n            nextVertex = vertices[i];\n\n            if ((pointX - vertex.x) * (nextVertex.y - vertex.y) \n                + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n                return false;\n            }\n\n            vertex = nextVertex;\n        }\n\n        return true;\n    };\n\n    /**\n     * Scales the vertices from a point (default is centre) in-place.\n     * @method scale\n     * @param {vertices} vertices\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     */\n    Vertices.scale = function(vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1)\n            return vertices;\n\n        point = point || Vertices.centre(vertices);\n\n        var vertex,\n            delta;\n\n        for (var i = 0; i < vertices.length; i++) {\n            vertex = vertices[i];\n            delta = Vector.sub(vertex, point);\n            vertices[i].x = point.x + delta.x * scaleX;\n            vertices[i].y = point.y + delta.y * scaleY;\n        }\n\n        return vertices;\n    };\n\n    /**\n     * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n     * The radius parameter is a single number or an array to specify the radius for each vertex.\n     * @method chamfer\n     * @param {vertices} vertices\n     * @param {number[]} radius\n     * @param {number} quality\n     * @param {number} qualityMin\n     * @param {number} qualityMax\n     */\n    Vertices.chamfer = function(vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n            radius = [radius];\n        } else {\n            radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = (typeof quality !== 'undefined') ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n\n        var newVertices = [];\n\n        for (var i = 0; i < vertices.length; i++) {\n            var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n                vertex = vertices[i],\n                nextVertex = vertices[(i + 1) % vertices.length],\n                currentRadius = radius[i < radius.length ? i : radius.length - 1];\n\n            if (currentRadius === 0) {\n                newVertices.push(vertex);\n                continue;\n            }\n\n            var prevNormal = Vector.normalise({ \n                x: vertex.y - prevVertex.y, \n                y: prevVertex.x - vertex.x\n            });\n\n            var nextNormal = Vector.normalise({ \n                x: nextVertex.y - vertex.y, \n                y: vertex.x - nextVertex.x\n            });\n\n            var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n                radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n                midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n                scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n\n            var precision = quality;\n\n            if (quality === -1) {\n                // automatically decide precision\n                precision = Math.pow(currentRadius, 0.32) * 1.75;\n            }\n\n            precision = Common.clamp(precision, qualityMin, qualityMax);\n\n            // use an even value for precision, more likely to reduce axes by using symmetry\n            if (precision % 2 === 1)\n                precision += 1;\n\n            var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n                theta = alpha / precision;\n\n            for (var j = 0; j < precision; j++) {\n                newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n            }\n        }\n\n        return newVertices;\n    };\n\n    /**\n     * Sorts the input vertices into clockwise order in place.\n     * @method clockwiseSort\n     * @param {vertices} vertices\n     * @return {vertices} vertices\n     */\n    Vertices.clockwiseSort = function(vertices) {\n        var centre = Vertices.mean(vertices);\n\n        vertices.sort(function(vertexA, vertexB) {\n            return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n\n        return vertices;\n    };\n\n    /**\n     * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n     * @method isConvex\n     * @param {vertices} vertices\n     * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n     */\n    Vertices.isConvex = function(vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n            n = vertices.length,\n            i,\n            j,\n            k,\n            z;\n\n        if (n < 3)\n            return null;\n\n        for (i = 0; i < n; i++) {\n            j = (i + 1) % n;\n            k = (i + 2) % n;\n            z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n            z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n\n            if (z < 0) {\n                flag |= 1;\n            } else if (z > 0) {\n                flag |= 2;\n            }\n\n            if (flag === 3) {\n                return false;\n            }\n        }\n\n        if (flag !== 0){\n            return true;\n        } else {\n            return null;\n        }\n    };\n\n    /**\n     * Returns the convex hull of the input vertices as a new array of points.\n     * @method hull\n     * @param {vertices} vertices\n     * @return [vertex] vertices\n     */\n    Vertices.hull = function(vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n            lower = [], \n            vertex,\n            i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function(vertexA, vertexB) {\n            var dx = vertexA.x - vertexB.x;\n            return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n            vertex = vertices[i];\n\n            while (lower.length >= 2 \n                   && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n                lower.pop();\n            }\n\n            lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n            vertex = vertices[i];\n\n            while (upper.length >= 2 \n                   && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n                upper.pop();\n            }\n\n            upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n\n        return upper.concat(lower);\n    };\n\n})();\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __nested_webpack_require_49544__) {\n\n/**\n* The `Matter.Body` module contains methods for creating and manipulating rigid bodies.\n* For creating bodies with common configurations such as rectangles, circles and other polygons see the module `Matter.Bodies`.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n\n* @class Body\n*/\n\nvar Body = {};\n\nmodule.exports = Body;\n\nvar Vertices = __nested_webpack_require_49544__(3);\nvar Vector = __nested_webpack_require_49544__(2);\nvar Sleeping = __nested_webpack_require_49544__(7);\nvar Common = __nested_webpack_require_49544__(0);\nvar Bounds = __nested_webpack_require_49544__(1);\nvar Axes = __nested_webpack_require_49544__(11);\n\n(function() {\n\n    Body._timeCorrection = true;\n    Body._inertiaScale = 4;\n    Body._nextCollidingGroupId = 1;\n    Body._nextNonCollidingGroupId = -1;\n    Body._nextCategory = 0x0001;\n    Body._baseDelta = 1000 / 60;\n\n    /**\n     * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * Vertices must be specified in clockwise order.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {body} body\n     */\n    Body.create = function(options) {\n        var defaults = {\n            id: Common.nextId(),\n            type: 'body',\n            label: 'Body',\n            parts: [],\n            plugin: {},\n            angle: 0,\n            vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n            position: { x: 0, y: 0 },\n            force: { x: 0, y: 0 },\n            torque: 0,\n            positionImpulse: { x: 0, y: 0 },\n            constraintImpulse: { x: 0, y: 0, angle: 0 },\n            totalContacts: 0,\n            speed: 0,\n            angularSpeed: 0,\n            velocity: { x: 0, y: 0 },\n            angularVelocity: 0,\n            isSensor: false,\n            isStatic: false,\n            isSleeping: false,\n            motion: 0,\n            sleepThreshold: 60,\n            density: 0.001,\n            restitution: 0,\n            friction: 0.1,\n            frictionStatic: 0.5,\n            frictionAir: 0.01,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            },\n            slop: 0.05,\n            timeScale: 1,\n            render: {\n                visible: true,\n                opacity: 1,\n                strokeStyle: null,\n                fillStyle: null,\n                lineWidth: null,\n                sprite: {\n                    xScale: 1,\n                    yScale: 1,\n                    xOffset: 0,\n                    yOffset: 0\n                }\n            },\n            events: null,\n            bounds: null,\n            chamfer: null,\n            circleRadius: 0,\n            positionPrev: null,\n            anglePrev: 0,\n            parent: null,\n            axes: null,\n            area: 0,\n            mass: 0,\n            inertia: 0,\n            deltaTime: 1000 / 60,\n            _original: null\n        };\n\n        var body = Common.extend(defaults, options);\n\n        _initProperties(body, options);\n\n        return body;\n    };\n\n    /**\n     * Returns the next unique group index for which bodies will collide.\n     * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n     * See `body.collisionFilter` for more information.\n     * @method nextGroup\n     * @param {bool} [isNonColliding=false]\n     * @return {Number} Unique group index\n     */\n    Body.nextGroup = function(isNonColliding) {\n        if (isNonColliding)\n            return Body._nextNonCollidingGroupId--;\n\n        return Body._nextCollidingGroupId++;\n    };\n\n    /**\n     * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n     * There are 32 available. See `body.collisionFilter` for more information.\n     * @method nextCategory\n     * @return {Number} Unique category bitfield\n     */\n    Body.nextCategory = function() {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n    };\n\n    /**\n     * Initialises body properties.\n     * @method _initProperties\n     * @private\n     * @param {body} body\n     * @param {} [options]\n     */\n    var _initProperties = function(body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n            bounds: body.bounds || Bounds.create(body.vertices),\n            positionPrev: body.positionPrev || Vector.clone(body.position),\n            anglePrev: body.anglePrev || body.angle,\n            vertices: body.vertices,\n            parts: body.parts || [body],\n            isStatic: body.isStatic,\n            isSleeping: body.isSleeping,\n            parent: body.parent || body\n        });\n\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n            axes: options.axes || body.axes,\n            area: options.area || body.area,\n            mass: options.mass || body.mass,\n            inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = (body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1'])),\n            defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n            defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n    };\n\n    /**\n     * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n     * Prefer to use the actual setter functions in performance critical situations.\n     * @method set\n     * @param {body} body\n     * @param {} settings A property name (or map of properties and values) to set on the body.\n     * @param {} value The value to set if `settings` is a single property name.\n     */\n    Body.set = function(body, settings, value) {\n        var property;\n\n        if (typeof settings === 'string') {\n            property = settings;\n            settings = {};\n            settings[property] = value;\n        }\n\n        for (property in settings) {\n            if (!Object.prototype.hasOwnProperty.call(settings, property))\n                continue;\n\n            value = settings[property];\n            switch (property) {\n\n            case 'isStatic':\n                Body.setStatic(body, value);\n                break;\n            case 'isSleeping':\n                Sleeping.set(body, value);\n                break;\n            case 'mass':\n                Body.setMass(body, value);\n                break;\n            case 'density':\n                Body.setDensity(body, value);\n                break;\n            case 'inertia':\n                Body.setInertia(body, value);\n                break;\n            case 'vertices':\n                Body.setVertices(body, value);\n                break;\n            case 'position':\n                Body.setPosition(body, value);\n                break;\n            case 'angle':\n                Body.setAngle(body, value);\n                break;\n            case 'velocity':\n                Body.setVelocity(body, value);\n                break;\n            case 'angularVelocity':\n                Body.setAngularVelocity(body, value);\n                break;\n            case 'speed':\n                Body.setSpeed(body, value);\n                break;\n            case 'angularSpeed':\n                Body.setAngularSpeed(body, value);\n                break;\n            case 'parts':\n                Body.setParts(body, value);\n                break;\n            case 'centre':\n                Body.setCentre(body, value);\n                break;\n            default:\n                body[property] = value;\n\n            }\n        }\n    };\n\n    /**\n     * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n     * @method setStatic\n     * @param {body} body\n     * @param {bool} isStatic\n     */\n    Body.setStatic = function(body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.isStatic = isStatic;\n\n            if (isStatic) {\n                part._original = {\n                    restitution: part.restitution,\n                    friction: part.friction,\n                    mass: part.mass,\n                    inertia: part.inertia,\n                    density: part.density,\n                    inverseMass: part.inverseMass,\n                    inverseInertia: part.inverseInertia\n                };\n\n                part.restitution = 0;\n                part.friction = 1;\n                part.mass = part.inertia = part.density = Infinity;\n                part.inverseMass = part.inverseInertia = 0;\n\n                part.positionPrev.x = part.position.x;\n                part.positionPrev.y = part.position.y;\n                part.anglePrev = part.angle;\n                part.angularVelocity = 0;\n                part.speed = 0;\n                part.angularSpeed = 0;\n                part.motion = 0;\n            } else if (part._original) {\n                part.restitution = part._original.restitution;\n                part.friction = part._original.friction;\n                part.mass = part._original.mass;\n                part.inertia = part._original.inertia;\n                part.density = part._original.density;\n                part.inverseMass = part._original.inverseMass;\n                part.inverseInertia = part._original.inverseInertia;\n\n                part._original = null;\n            }\n        }\n    };\n\n    /**\n     * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n     * @method setMass\n     * @param {body} body\n     * @param {number} mass\n     */\n    Body.setMass = function(body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n    };\n\n    /**\n     * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n     * @method setDensity\n     * @param {body} body\n     * @param {number} density\n     */\n    Body.setDensity = function(body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n    };\n\n    /**\n     * Sets the moment of inertia of the body. This is the second moment of area in two dimensions.\n     * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n     * @method setInertia\n     * @param {body} body\n     * @param {number} inertia\n     */\n    Body.setInertia = function(body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n    };\n\n    /**\n     * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n     * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n     * They are then automatically translated to world space based on `body.position`.\n     *\n     * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n     * Vertices must form a convex hull. Concave vertices must be decomposed into convex parts.\n     * \n     * @method setVertices\n     * @param {body} body\n     * @param {vector[]} vertices\n     */\n    Body.setVertices = function(body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n            body.vertices = vertices;\n        } else {\n            body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n    };\n\n    /**\n     * Sets the parts of the `body` and updates mass, inertia and centroid.\n     * Each part will have its parent set to `body`.\n     * By default the convex hull will be automatically computed and set on `body`, unless `autoHull` is set to `false.`\n     * Note that this method will ensure that the first part in `body.parts` will always be the `body`.\n     * @method setParts\n     * @param {body} body\n     * @param {body[]} parts\n     * @param {bool} [autoHull=true]\n     */\n    Body.setParts = function(body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n\n        for (i = 0; i < parts.length; i++) {\n            var part = parts[i];\n            if (part !== body) {\n                part.parent = body;\n                body.parts.push(part);\n            }\n        }\n\n        if (body.parts.length === 1)\n            return;\n\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n            var vertices = [];\n            for (i = 0; i < parts.length; i++) {\n                vertices = vertices.concat(parts[i].vertices);\n            }\n\n            Vertices.clockwiseSort(vertices);\n\n            var hull = Vertices.hull(vertices),\n                hullCentre = Vertices.centre(hull);\n\n            Body.setVertices(body, hull);\n            Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n    };\n\n    /**\n     * Set the centre of mass of the body. \n     * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n     * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n     * This is equal to moving `body.position` but not the `body.vertices`.\n     * Invalid if the `centre` falls outside the body's convex hull.\n     * @method setCentre\n     * @param {body} body\n     * @param {vector} centre\n     * @param {bool} relative\n     */\n    Body.setCentre = function(body, centre, relative) {\n        if (!relative) {\n            body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n            body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n            body.position.x = centre.x;\n            body.position.y = centre.y;\n        } else {\n            body.positionPrev.x += centre.x;\n            body.positionPrev.y += centre.y;\n            body.position.x += centre.x;\n            body.position.y += centre.y;\n        }\n    };\n\n    /**\n     * Sets the position of the body. By default velocity is unchanged.\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n     * @method setPosition\n     * @param {body} body\n     * @param {vector} position\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.setPosition = function(body, position, updateVelocity) {\n        var delta = Vector.sub(position, body.position);\n\n        if (updateVelocity) {\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n            body.velocity.x = delta.x;\n            body.velocity.y = delta.y;\n            body.speed = Vector.magnitude(delta);\n        } else {\n            body.positionPrev.x += delta.x;\n            body.positionPrev.y += delta.y;\n        }\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.position.x += delta.x;\n            part.position.y += delta.y;\n            Vertices.translate(part.vertices, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Sets the angle of the body. By default angular velocity is unchanged.\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n     * @method setAngle\n     * @param {body} body\n     * @param {number} angle\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.setAngle = function(body, angle, updateVelocity) {\n        var delta = angle - body.angle;\n        \n        if (updateVelocity) {\n            body.anglePrev = body.angle;\n            body.angularVelocity = delta;\n            body.angularSpeed = Math.abs(delta);\n        } else {\n            body.anglePrev += delta;\n        }\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n            part.angle += delta;\n            Vertices.rotate(part.vertices, delta, body.position);\n            Axes.rotate(part.axes, delta);\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n            if (i > 0) {\n                Vector.rotateAbout(part.position, delta, body.position, part.position);\n            }\n        }\n    };\n\n    /**\n     * Sets the current linear velocity of the body.  \n     * Affects body speed.\n     * @method setVelocity\n     * @param {body} body\n     * @param {vector} velocity\n     */\n    Body.setVelocity = function(body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.positionPrev.x = body.position.x - velocity.x * timeScale;\n        body.positionPrev.y = body.position.y - velocity.y * timeScale;\n        body.velocity.x = (body.position.x - body.positionPrev.x) / timeScale;\n        body.velocity.y = (body.position.y - body.positionPrev.y) / timeScale;\n        body.speed = Vector.magnitude(body.velocity);\n    };\n\n    /**\n     * Gets the current linear velocity of the body.\n     * @method getVelocity\n     * @param {body} body\n     * @return {vector} velocity\n     */\n    Body.getVelocity = function(body) {\n        var timeScale = Body._baseDelta / body.deltaTime;\n\n        return {\n            x: (body.position.x - body.positionPrev.x) * timeScale,\n            y: (body.position.y - body.positionPrev.y) * timeScale\n        };\n    };\n\n    /**\n     * Gets the current linear speed of the body.  \n     * Equivalent to the magnitude of its velocity.\n     * @method getSpeed\n     * @param {body} body\n     * @return {number} speed\n     */\n    Body.getSpeed = function(body) {\n        return Vector.magnitude(Body.getVelocity(body));\n    };\n\n    /**\n     * Sets the current linear speed of the body.  \n     * Direction is maintained. Affects body velocity.\n     * @method setSpeed\n     * @param {body} body\n     * @param {number} speed\n     */\n    Body.setSpeed = function(body, speed) {\n        Body.setVelocity(body, Vector.mult(Vector.normalise(Body.getVelocity(body)), speed));\n    };\n\n    /**\n     * Sets the current rotational velocity of the body.  \n     * Affects body angular speed.\n     * @method setAngularVelocity\n     * @param {body} body\n     * @param {number} velocity\n     */\n    Body.setAngularVelocity = function(body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.anglePrev = body.angle - velocity * timeScale;\n        body.angularVelocity = (body.angle - body.anglePrev) / timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Gets the current rotational velocity of the body.\n     * @method getAngularVelocity\n     * @param {body} body\n     * @return {number} angular velocity\n     */\n    Body.getAngularVelocity = function(body) {\n        return (body.angle - body.anglePrev) * Body._baseDelta / body.deltaTime;\n    };\n\n    /**\n     * Gets the current rotational speed of the body.  \n     * Equivalent to the magnitude of its angular velocity.\n     * @method getAngularSpeed\n     * @param {body} body\n     * @return {number} angular speed\n     */\n    Body.getAngularSpeed = function(body) {\n        return Math.abs(Body.getAngularVelocity(body));\n    };\n\n    /**\n     * Sets the current rotational speed of the body.  \n     * Direction is maintained. Affects body angular velocity.\n     * @method setAngularSpeed\n     * @param {body} body\n     * @param {number} speed\n     */\n    Body.setAngularSpeed = function(body, speed) {\n        Body.setAngularVelocity(body, Common.sign(Body.getAngularVelocity(body)) * speed);\n    };\n\n    /**\n     * Moves a body by a given vector relative to its current position. By default velocity is unchanged.\n     * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n     * @method translate\n     * @param {body} body\n     * @param {vector} translation\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.translate = function(body, translation, updateVelocity) {\n        Body.setPosition(body, Vector.add(body.position, translation), updateVelocity);\n    };\n\n    /**\n     * Rotates a body by a given angle relative to its current angle. By default angular velocity is unchanged.\n     * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n     * @method rotate\n     * @param {body} body\n     * @param {number} rotation\n     * @param {vector} [point]\n     * @param {boolean} [updateVelocity=false]\n     */\n    Body.rotate = function(body, rotation, point, updateVelocity) {\n        if (!point) {\n            Body.setAngle(body, body.angle + rotation, updateVelocity);\n        } else {\n            var cos = Math.cos(rotation),\n                sin = Math.sin(rotation),\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            }, updateVelocity);\n\n            Body.setAngle(body, body.angle + rotation, updateVelocity);\n        }\n    };\n\n    /**\n     * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n     * @method scale\n     * @param {body} body\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} [point]\n     */\n    Body.scale = function(body, scaleX, scaleY, point) {\n        var totalArea = 0,\n            totalInertia = 0;\n\n        point = point || body.position;\n\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            // scale vertices\n            Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n            // update properties\n            part.axes = Axes.fromVertices(part.vertices);\n            part.area = Vertices.area(part.vertices);\n            Body.setMass(part, body.density * part.area);\n\n            // update inertia (requires vertices to be at origin)\n            Vertices.translate(part.vertices, { x: -part.position.x, y: -part.position.y });\n            Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n            Vertices.translate(part.vertices, { x: part.position.x, y: part.position.y });\n\n            if (i > 0) {\n                totalArea += part.area;\n                totalInertia += part.inertia;\n            }\n\n            // scale position\n            part.position.x = point.x + (part.position.x - point.x) * scaleX;\n            part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n            // update bounds\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n            body.area = totalArea;\n\n            if (!body.isStatic) {\n                Body.setMass(body, body.density * totalArea);\n                Body.setInertia(body, totalInertia);\n            }\n        }\n\n        // handle circles\n        if (body.circleRadius) { \n            if (scaleX === scaleY) {\n                body.circleRadius *= scaleX;\n            } else {\n                // body is no longer a circle\n                body.circleRadius = null;\n            }\n        }\n    };\n\n    /**\n     * Performs an update by integrating the equations of motion on the `body`.\n     * This is applied every update by `Matter.Engine` automatically.\n     * @method update\n     * @param {body} body\n     * @param {number} [deltaTime=16.666]\n     */\n    Body.update = function(body, deltaTime) {\n        deltaTime = (typeof deltaTime !== 'undefined' ? deltaTime : (1000 / 60)) * body.timeScale;\n\n        var deltaTimeSquared = deltaTime * deltaTime,\n            correction = Body._timeCorrection ? deltaTime / (body.deltaTime || deltaTime) : 1;\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * (deltaTime / Common._baseDelta),\n            velocityPrevX = (body.position.x - body.positionPrev.x) * correction,\n            velocityPrevY = (body.position.y - body.positionPrev.y) * correction;\n\n        // update velocity with Verlet integration\n        body.velocity.x = (velocityPrevX * frictionAir) + (body.force.x / body.mass) * deltaTimeSquared;\n        body.velocity.y = (velocityPrevY * frictionAir) + (body.force.y / body.mass) * deltaTimeSquared;\n\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n        body.deltaTime = deltaTime;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = ((body.angle - body.anglePrev) * frictionAir * correction) + (body.torque / body.inertia) * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n            var part = body.parts[i];\n\n            Vertices.translate(part.vertices, body.velocity);\n            \n            if (i > 0) {\n                part.position.x += body.velocity.x;\n                part.position.y += body.velocity.y;\n            }\n\n            if (body.angularVelocity !== 0) {\n                Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n                Axes.rotate(part.axes, body.angularVelocity);\n                if (i > 0) {\n                    Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n                }\n            }\n\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n    };\n\n    /**\n     * Updates properties `body.velocity`, `body.speed`, `body.angularVelocity` and `body.angularSpeed` which are normalised in relation to `Body._baseDelta`.\n     * @method updateVelocities\n     * @param {body} body\n     */\n    Body.updateVelocities = function(body) {\n        var timeScale = Body._baseDelta / body.deltaTime,\n            bodyVelocity = body.velocity;\n\n        bodyVelocity.x = (body.position.x - body.positionPrev.x) * timeScale;\n        bodyVelocity.y = (body.position.y - body.positionPrev.y) * timeScale;\n        body.speed = Math.sqrt((bodyVelocity.x * bodyVelocity.x) + (bodyVelocity.y * bodyVelocity.y));\n\n        body.angularVelocity = (body.angle - body.anglePrev) * timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n    };\n\n    /**\n     * Applies the `force` to the `body` from the force origin `position` in world-space, over a single timestep, including applying any resulting angular torque.\n     * \n     * Forces are useful for effects like gravity, wind or rocket thrust, but can be difficult in practice when precise control is needed. In these cases see `Body.setVelocity` and `Body.setPosition` as an alternative.\n     * \n     * The force from this function is only applied once for the duration of a single timestep, in other words the duration depends directly on the current engine update `delta` and the rate of calls to this function.\n     * \n     * Therefore to account for time, you should apply the force constantly over as many engine updates as equivalent to the intended duration.\n     * \n     * If all or part of the force duration is some fraction of a timestep, first multiply the force by `duration / timestep`.\n     * \n     * The force origin `position` in world-space must also be specified. Passing `body.position` will result in zero angular effect as the force origin would be at the centre of mass.\n     * \n     * The `body` will take time to accelerate under a force, the resulting effect depends on duration of the force, the body mass and other forces on the body including friction combined.\n     * @method applyForce\n     * @param {body} body\n     * @param {vector} position The force origin in world-space. Pass `body.position` to avoid angular torque.\n     * @param {vector} force\n     */\n    Body.applyForce = function(body, position, force) {\n        var offset = { x: position.x - body.position.x, y: position.y - body.position.y };\n        body.force.x += force.x;\n        body.force.y += force.y;\n        body.torque += offset.x * force.y - offset.y * force.x;\n    };\n\n    /**\n     * Returns the sums of the properties of all compound parts of the parent body.\n     * @method _totalProperties\n     * @private\n     * @param {body} body\n     * @return {}\n     */\n    Body._totalProperties = function(body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n            mass: 0,\n            area: 0,\n            inertia: 0,\n            centre: { x: 0, y: 0 }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n            var part = body.parts[i],\n                mass = part.mass !== Infinity ? part.mass : 1;\n\n            properties.mass += mass;\n            properties.area += part.area;\n            properties.inertia += part.inertia;\n            properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n\n        properties.centre = Vector.div(properties.centre, properties.mass);\n\n        return properties;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a body starts sleeping (where `this` is the body).\n    *\n    * @event sleepStart\n    * @this {body} The body that has started sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a body ends sleeping (where `this` is the body).\n    *\n    * @event sleepEnd\n    * @this {body} The body that has ended sleeping\n    * @param {} event An event object\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * _Read only_. Set by `Body.create`.\n     * \n     * A `String` denoting the type of object.\n     *\n     * @readOnly\n     * @property type\n     * @type string\n     * @default \"body\"\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Body\"\n     */\n\n    /**\n     * _Read only_. Use `Body.setParts` to set. \n     * \n     * An array of bodies that make up this body. \n     * The first body in the array must always be a self reference to the current body instance.\n     * All bodies in the `parts` array together form a single rigid compound body.\n     * Parts are allowed to overlap, have gaps or holes or even form concave bodies.\n     * Parts themselves should never be added to a `World`, only the parent body should be.\n     * Use `Body.setParts` when setting parts to ensure correct updates of all properties.\n     *\n     * @readOnly\n     * @property parts\n     * @type body[]\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * _Read only_. Updated by `Body.setParts`.\n     * \n     * A reference to the body that this is a part of. See `body.parts`.\n     * This is a self reference if the body is not a part of another body.\n     *\n     * @readOnly\n     * @property parent\n     * @type body\n     */\n\n    /**\n     * A `Number` specifying the angle of the body, in radians.\n     *\n     * @property angle\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setVertices` or `Body.setParts` to set. See also `Bodies.fromVertices`.\n     * \n     * An array of `Vector` objects that specify the convex hull of the rigid body.\n     * These should be provided about the origin `(0, 0)`. E.g.\n     *\n     * `[{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]`\n     * \n     * Vertices must always be convex, in clockwise order and must not contain any duplicate points.\n     * \n     * Concave vertices should be decomposed into convex `parts`, see `Bodies.fromVertices` and `Body.setParts`.\n     *\n     * When set the vertices are translated such that `body.position` is at the centre of mass.\n     * Many other body properties are automatically calculated from these vertices when set including `density`, `area` and `inertia`.\n     * \n     * The module `Matter.Vertices` contains useful methods for working with vertices.\n     *\n     * @readOnly\n     * @property vertices\n     * @type vector[]\n     */\n\n    /**\n     * _Read only_. Use `Body.setPosition` to set. \n     * \n     * A `Vector` that specifies the current world-space position of the body.\n     * \n     * @readOnly\n     * @property position\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that accumulates the total force applied to the body for a single update.\n     * Force is zeroed after every `Engine.update`, so constant forces should be applied for every update they are needed. See also `Body.applyForce`.\n     * \n     * @property force\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that accumulates the total torque (turning force) applied to the body for a single update. See also `Body.applyForce`.\n     * Torque is zeroed after every `Engine.update`, so constant torques should be applied for every update they are needed.\n     *\n     * Torques result in angular acceleration on every update, which depends on body inertia and the engine update delta.\n     * \n     * @property torque\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setSpeed` to set. \n     * \n     * See `Body.getSpeed` for details.\n     * \n     * Equivalent to the magnitude of `body.velocity` (always positive).\n     * \n     * @readOnly\n     * @property speed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setVelocity` to set. \n     * \n     * See `Body.getVelocity` for details.\n     * \n     * Equivalent to the magnitude of `body.angularVelocity` (always positive).\n     * \n     * @readOnly\n     * @property velocity\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * _Read only_. Use `Body.setAngularSpeed` to set. \n     * \n     * See `Body.getAngularSpeed` for details.\n     * \n     * \n     * @readOnly\n     * @property angularSpeed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setAngularVelocity` to set. \n     * \n     * See `Body.getAngularVelocity` for details.\n     * \n     *\n     * @readOnly\n     * @property angularVelocity\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * _Read only_. Use `Body.setStatic` to set. \n     * \n     * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n     *\n     * @readOnly\n     * @property isStatic\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n     *\n     * @property isSensor\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * _Read only_. Use `Sleeping.set` to set. \n     * \n     * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n     *\n     * @readOnly\n     * @property isSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * _Read only_. Calculated during engine update only when sleeping is enabled.\n     * \n     * A `Number` that loosely measures the amount of movement a body currently has.\n     *\n     * Derived from `body.speed^2 + body.angularSpeed^2`. See `Sleeping.update`.\n     * \n     * @readOnly\n     * @property motion\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the length of time during which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n     * \n     * @property sleepThreshold\n     * @type number\n     * @default 60\n     */\n\n    /**\n     * _Read only_. Use `Body.setDensity` to set. \n     * \n     * A `Number` that defines the density of the body (mass per unit area).\n     * \n     * Mass will also be updated when set.\n     *\n     * @readOnly\n     * @property density\n     * @type number\n     * @default 0.001\n     */\n\n    /**\n     * _Read only_. Use `Body.setMass` to set. \n     * \n     * A `Number` that defines the mass of the body.\n     * \n     * Density will also be updated when set.\n     * \n     * @readOnly\n     * @property mass\n     * @type number\n     */\n\n    /**\n     * _Read only_. Use `Body.setMass` to set. \n     * \n     * A `Number` that defines the inverse mass of the body (`1 / mass`).\n     *\n     * @readOnly\n     * @property inverseMass\n     * @type number\n     */\n\n    /**\n     * _Read only_. Automatically calculated when vertices, mass or density are set or set through `Body.setInertia`.\n     * \n     * A `Number` that defines the moment of inertia of the body. This is the second moment of area in two dimensions.\n     * \n     * Can be manually set to `Infinity` to prevent rotation of the body. See `Body.setInertia`.\n     * \n     * @readOnly\n     * @property inertia\n     * @type number\n     */\n\n    /**\n     * _Read only_. Automatically calculated when vertices, mass or density are set or calculated by `Body.setInertia`.\n     * \n     * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n     * \n     * @readOnly\n     * @property inverseInertia\n     * @type number\n     */\n\n    /**\n     * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n     * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n     * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n     *\n     * `Math.max(bodyA.restitution, bodyB.restitution)`\n     *\n     * @property restitution\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n     * A value of `0` means that the body may slide indefinitely.\n     * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n     *\n     * The effects of the value may be non-linear. \n     * High values may be unstable depending on the body.\n     * The engine uses a Coulomb friction model including static and kinetic friction.\n     * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n     *\n     * `Math.min(bodyA.friction, bodyB.friction)`\n     *\n     * @property friction\n     * @type number\n     * @default 0.1\n     */\n\n    /**\n     * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n     * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n     * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n     * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n     *\n     * @property frictionStatic\n     * @type number\n     * @default 0.5\n     */\n\n    /**\n     * A `Number` that defines the air friction of the body (air resistance). \n     * A value of `0` means the body will never slow as it moves through space.\n     * The higher the value, the faster a body slows when moving through space.\n     * The effects of the value are non-linear. \n     *\n     * @property frictionAir\n     * @type number\n     * @default 0.01\n     */\n\n    /**\n     * An `Object` that specifies the collision filtering properties of this body.\n     *\n     * Collisions between two bodies will obey the following rules:\n     * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n     *   they will always collide if the value is positive, and they will never collide\n     *   if the value is negative.\n     * - If the two bodies have different values of `collisionFilter.group` or if one\n     *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n     *\n     * Each body belongs to a collision category, given by `collisionFilter.category`. This\n     * value is used as a bit field and the category should have only one bit set, meaning that\n     * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n     * different collision categories available.\n     *\n     * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n     * the categories it collides with (the value is the bitwise AND value of all these categories).\n     *\n     * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n     * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n     * are both true.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n    /**\n     * An Integer `Number`, that specifies the collision group this body belongs to.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.group\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * A bit field that specifies the collision category this body belongs to.\n     * The category value should have only one bit set, for example `0x0001`.\n     * This means there are up to 32 unique collision categories available.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.category\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * A bit mask that specifies the collision categories this body may collide with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter.mask\n     * @type object\n     * @default -1\n     */\n\n    /**\n     * A `Number` that specifies a thin boundary around the body where it is allowed to slightly sink into other bodies.\n     * \n     * This is required for proper collision response, including friction and restitution effects.\n     * \n     * The default should generally suffice in most cases. You may need to decrease this value for very small bodies that are nearing the default value in scale.\n     *\n     * @property slop\n     * @type number\n     * @default 0.05\n     */\n\n    /**\n     * A `Number` that specifies per-body time scaling.\n     *\n     * @property timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * _Read only_. Updated during engine update.\n     * \n     * A `Number` that records the last delta time value used to update this body.\n     * Used to calculate speed and velocity.\n     *\n     * @readOnly\n     * @property deltaTime\n     * @type number\n     * @default 1000 / 60\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the body should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * Sets the opacity to use when rendering.\n     *\n     * @property render.opacity\n     * @type number\n     * @default 1\n    */\n\n    /**\n     * An `Object` that defines the sprite properties to use when rendering, if any.\n     *\n     * @property render.sprite\n     * @type object\n     */\n\n    /**\n     * An `String` that defines the path to the image to use as the sprite texture, if any.\n     *\n     * @property render.sprite.texture\n     * @type string\n     */\n     \n    /**\n     * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n     *\n     * @property render.sprite.xScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n     *\n     * @property render.sprite.yScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n      * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n      *\n      * @property render.sprite.xOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n      * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n      *\n      * @property render.sprite.yOffset\n      * @type number\n      * @default 0\n      */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.fillStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * _Read only_. Calculated automatically when vertices are set.\n     * \n     * An array of unique axis vectors (edge normals) used for collision detection.\n     * These are automatically calculated when vertices are set.\n     * They are constantly updated by `Body.update` during the simulation.\n     *\n     * @readOnly\n     * @property axes\n     * @type vector[]\n     */\n     \n    /**\n     * _Read only_. Calculated automatically when vertices are set.\n     * \n     * A `Number` that measures the area of the body's convex hull.\n     * \n     * @readOnly\n     * @property area\n     * @type string\n     * @default \n     */\n\n    /**\n     * A `Bounds` object that defines the AABB region for the body.\n     * It is automatically calculated when vertices are set and constantly updated by `Body.update` during simulation.\n     * \n     * @property bounds\n     * @type bounds\n     */\n\n})();\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __nested_webpack_require_99052__) {\n\n/**\n* The `Matter.Events` module contains methods to fire and listen to events on other objects.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Events\n*/\n\nvar Events = {};\n\nmodule.exports = Events;\n\nvar Common = __nested_webpack_require_99052__(0);\n\n(function() {\n\n    /**\n     * Subscribes a callback function to the given object's `eventName`.\n     * @method on\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.on = function(object, eventNames, callback) {\n        var names = eventNames.split(' '),\n            name;\n\n        for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            object.events = object.events || {};\n            object.events[name] = object.events[name] || [];\n            object.events[name].push(callback);\n        }\n\n        return callback;\n    };\n\n    /**\n     * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n     * @method off\n     * @param {} object\n     * @param {string} eventNames\n     * @param {function} callback\n     */\n    Events.off = function(object, eventNames, callback) {\n        if (!eventNames) {\n            object.events = {};\n            return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n            callback = eventNames;\n            eventNames = Common.keys(object.events).join(' ');\n        }\n\n        var names = eventNames.split(' ');\n\n        for (var i = 0; i < names.length; i++) {\n            var callbacks = object.events[names[i]],\n                newCallbacks = [];\n\n            if (callback && callbacks) {\n                for (var j = 0; j < callbacks.length; j++) {\n                    if (callbacks[j] !== callback)\n                        newCallbacks.push(callbacks[j]);\n                }\n            }\n\n            object.events[names[i]] = newCallbacks;\n        }\n    };\n\n    /**\n     * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n     * @method trigger\n     * @param {} object\n     * @param {string} eventNames\n     * @param {} event\n     */\n    Events.trigger = function(object, eventNames, event) {\n        var names,\n            name,\n            callbacks,\n            eventClone;\n\n        var events = object.events;\n        \n        if (events && Common.keys(events).length > 0) {\n            if (!event)\n                event = {};\n\n            names = eventNames.split(' ');\n\n            for (var i = 0; i < names.length; i++) {\n                name = names[i];\n                callbacks = events[name];\n\n                if (callbacks) {\n                    eventClone = Common.clone(event, false);\n                    eventClone.name = name;\n                    eventClone.source = object;\n\n                    for (var j = 0; j < callbacks.length; j++) {\n                        callbacks[j].apply(object, [eventClone]);\n                    }\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __nested_webpack_require_102250__) {\n\n/**\n* A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n*\n* They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n* A composite could contain anything from a single body all the way up to a whole world.\n* \n* When making any changes to composites, use the included functions rather than changing their properties directly.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composite\n*/\n\nvar Composite = {};\n\nmodule.exports = Composite;\n\nvar Events = __nested_webpack_require_102250__(5);\nvar Common = __nested_webpack_require_102250__(0);\nvar Bounds = __nested_webpack_require_102250__(1);\nvar Body = __nested_webpack_require_102250__(4);\n\n(function() {\n\n    /**\n     * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properites section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} [options]\n     * @return {composite} A new composite\n     */\n    Composite.create = function(options) {\n        return Common.extend({ \n            id: Common.nextId(),\n            type: 'composite',\n            parent: null,\n            isModified: false,\n            bodies: [], \n            constraints: [], \n            composites: [],\n            label: 'Composite',\n            plugin: {},\n            cache: {\n                allBodies: null,\n                allConstraints: null,\n                allComposites: null\n            }\n        }, options);\n    };\n\n    /**\n     * Sets the composite's `isModified` flag. \n     * If `updateParents` is true, all parents will be set (default: false).\n     * If `updateChildren` is true, all children will be set (default: false).\n     * @private\n     * @method setModified\n     * @param {composite} composite\n     * @param {boolean} isModified\n     * @param {boolean} [updateParents=false]\n     * @param {boolean} [updateChildren=false]\n     */\n    Composite.setModified = function(composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n\n        if (isModified && composite.cache) {\n            composite.cache.allBodies = null;\n            composite.cache.allConstraints = null;\n            composite.cache.allComposites = null;\n        }\n\n        if (updateParents && composite.parent) {\n            Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n\n        if (updateChildren) {\n            for (var i = 0; i < composite.composites.length; i++) {\n                var childComposite = composite.composites[i];\n                Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n            }\n        }\n    };\n\n    /**\n     * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n     * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n     * @method add\n     * @param {composite} composite\n     * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n     * @return {composite} The original composite with the objects added\n     */\n    Composite.add = function(composite, object) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeAdd', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                // skip adding compound parts\n                if (obj.parent !== obj) {\n                    Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                    break;\n                }\n\n                Composite.addBody(composite, obj);\n                break;\n            case 'constraint':\n                Composite.addConstraint(composite, obj);\n                break;\n            case 'composite':\n                Composite.addComposite(composite, obj);\n                break;\n            case 'mouseConstraint':\n                Composite.addConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterAdd', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n     * Optionally searching its children recursively.\n     * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n     * @method remove\n     * @param {composite} composite\n     * @param {object|array} object\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the objects removed\n     */\n    Composite.remove = function(composite, object, deep) {\n        var objects = [].concat(object);\n\n        Events.trigger(composite, 'beforeRemove', { object: object });\n\n        for (var i = 0; i < objects.length; i++) {\n            var obj = objects[i];\n\n            switch (obj.type) {\n\n            case 'body':\n                Composite.removeBody(composite, obj, deep);\n                break;\n            case 'constraint':\n                Composite.removeConstraint(composite, obj, deep);\n                break;\n            case 'composite':\n                Composite.removeComposite(composite, obj, deep);\n                break;\n            case 'mouseConstraint':\n                Composite.removeConstraint(composite, obj.constraint);\n                break;\n\n            }\n        }\n\n        Events.trigger(composite, 'afterRemove', { object: object });\n\n        return composite;\n    };\n\n    /**\n     * Adds a composite to the given composite.\n     * @private\n     * @method addComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @return {composite} The original compositeA with the objects from compositeB added\n     */\n    Composite.addComposite = function(compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeComposite\n     * @param {composite} compositeA\n     * @param {composite} compositeB\n     * @param {boolean} [deep=false]\n     * @return {composite} The original compositeA with the composite removed\n     */\n    Composite.removeComposite = function(compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n            Composite.removeCompositeAt(compositeA, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < compositeA.composites.length; i++){\n                Composite.removeComposite(compositeA.composites[i], compositeB, true);\n            }\n        }\n\n        return compositeA;\n    };\n\n    /**\n     * Removes a composite from the given composite.\n     * @private\n     * @method removeCompositeAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the composite removed\n     */\n    Composite.removeCompositeAt = function(composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a body to the given composite.\n     * @private\n     * @method addBody\n     * @param {composite} composite\n     * @param {body} body\n     * @return {composite} The original composite with the body added\n     */\n    Composite.addBody = function(composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeBody\n     * @param {composite} composite\n     * @param {body} body\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBody = function(composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n            Composite.removeBodyAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeBody(composite.composites[i], body, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeBodyAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the body removed\n     */\n    Composite.removeBodyAt = function(composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Adds a constraint to the given composite.\n     * @private\n     * @method addConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @return {composite} The original composite with the constraint added\n     */\n    Composite.addConstraint = function(composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes a constraint from the given composite, and optionally searching its children recursively.\n     * @private\n     * @method removeConstraint\n     * @param {composite} composite\n     * @param {constraint} constraint\n     * @param {boolean} [deep=false]\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraint = function(composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n            Composite.removeConstraintAt(composite, position);\n        }\n\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.removeConstraint(composite.composites[i], constraint, true);\n            }\n        }\n\n        return composite;\n    };\n\n    /**\n     * Removes a body from the given composite.\n     * @private\n     * @method removeConstraintAt\n     * @param {composite} composite\n     * @param {number} position\n     * @return {composite} The original composite with the constraint removed\n     */\n    Composite.removeConstraintAt = function(composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n    };\n\n    /**\n     * Removes all bodies, constraints and composites from the given composite.\n     * Optionally clearing its children recursively.\n     * @method clear\n     * @param {composite} composite\n     * @param {boolean} keepStatic\n     * @param {boolean} [deep=false]\n     */\n    Composite.clear = function(composite, keepStatic, deep) {\n        if (deep) {\n            for (var i = 0; i < composite.composites.length; i++){\n                Composite.clear(composite.composites[i], keepStatic, true);\n            }\n        }\n        \n        if (keepStatic) {\n            composite.bodies = composite.bodies.filter(function(body) { return body.isStatic; });\n        } else {\n            composite.bodies.length = 0;\n        }\n\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n\n        Composite.setModified(composite, true, true, false);\n\n        return composite;\n    };\n\n    /**\n     * Returns all bodies in the given composite, including all bodies in its children, recursively.\n     * @method allBodies\n     * @param {composite} composite\n     * @return {body[]} All the bodies\n     */\n    Composite.allBodies = function(composite) {\n        if (composite.cache && composite.cache.allBodies) {\n            return composite.cache.allBodies;\n        }\n\n        var bodies = [].concat(composite.bodies);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allBodies = bodies;\n        }\n\n        return bodies;\n    };\n\n    /**\n     * Returns all constraints in the given composite, including all constraints in its children, recursively.\n     * @method allConstraints\n     * @param {composite} composite\n     * @return {constraint[]} All the constraints\n     */\n    Composite.allConstraints = function(composite) {\n        if (composite.cache && composite.cache.allConstraints) {\n            return composite.cache.allConstraints;\n        }\n\n        var constraints = [].concat(composite.constraints);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allConstraints = constraints;\n        }\n\n        return constraints;\n    };\n\n    /**\n     * Returns all composites in the given composite, including all composites in its children, recursively.\n     * @method allComposites\n     * @param {composite} composite\n     * @return {composite[]} All the composites\n     */\n    Composite.allComposites = function(composite) {\n        if (composite.cache && composite.cache.allComposites) {\n            return composite.cache.allComposites;\n        }\n\n        var composites = [].concat(composite.composites);\n\n        for (var i = 0; i < composite.composites.length; i++)\n            composites = composites.concat(Composite.allComposites(composite.composites[i]));\n\n        if (composite.cache) {\n            composite.cache.allComposites = composites;\n        }\n\n        return composites;\n    };\n\n    /**\n     * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n     * @method get\n     * @param {composite} composite\n     * @param {number} id\n     * @param {string} type\n     * @return {object} The requested object, if found\n     */\n    Composite.get = function(composite, id, type) {\n        var objects,\n            object;\n\n        switch (type) {\n        case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n        case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n        case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n\n        if (!objects)\n            return null;\n\n        object = objects.filter(function(object) { \n            return object.id.toString() === id.toString(); \n        });\n\n        return object.length === 0 ? null : object[0];\n    };\n\n    /**\n     * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n     * @method move\n     * @param {compositeA} compositeA\n     * @param {object[]} objects\n     * @param {compositeB} compositeB\n     * @return {composite} Returns compositeA\n     */\n    Composite.move = function(compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n    };\n\n    /**\n     * Assigns new ids for all objects in the composite, recursively.\n     * @method rebase\n     * @param {composite} composite\n     * @return {composite} Returns composite\n     */\n    Composite.rebase = function(composite) {\n        var objects = Composite.allBodies(composite)\n            .concat(Composite.allConstraints(composite))\n            .concat(Composite.allComposites(composite));\n\n        for (var i = 0; i < objects.length; i++) {\n            objects[i].id = Common.nextId();\n        }\n\n        return composite;\n    };\n\n    /**\n     * Translates all children in the composite by a given vector relative to their current positions, \n     * without imparting any velocity.\n     * @method translate\n     * @param {composite} composite\n     * @param {vector} translation\n     * @param {bool} [recursive=true]\n     */\n    Composite.translate = function(composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            Body.translate(bodies[i], translation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n     * @method rotate\n     * @param {composite} composite\n     * @param {number} rotation\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.rotate = function(composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + (dx * cos - dy * sin),\n                y: point.y + (dx * sin + dy * cos)\n            });\n\n            Body.rotate(body, rotation);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n     * @method scale\n     * @param {composite} composite\n     * @param {number} scaleX\n     * @param {number} scaleY\n     * @param {vector} point\n     * @param {bool} [recursive=true]\n     */\n    Composite.scale = function(composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                dx = body.position.x - point.x,\n                dy = body.position.y - point.y;\n                \n            Body.setPosition(body, {\n                x: point.x + dx * scaleX,\n                y: point.y + dy * scaleY\n            });\n\n            Body.scale(body, scaleX, scaleY);\n        }\n\n        return composite;\n    };\n\n    /**\n     * Returns the union of the bounds of all of the composite's bodies.\n     * @method bounds\n     * @param {composite} composite The composite.\n     * @returns {bounds} The composite bounds.\n     */\n    Composite.bounds = function(composite) {\n        var bodies = Composite.allBodies(composite),\n            vertices = [];\n\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i];\n            vertices.push(body.bounds.min, body.bounds.max);\n        }\n\n        return Bounds.create(vertices);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, before objects have been added.\n    *\n    * @event beforeAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.add` is made, after objects have been added.\n    *\n    * @event afterAdd\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, before objects have been removed.\n    *\n    * @event beforeRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when a call to `Composite.remove` is made, after objects have been removed.\n    *\n    * @event afterRemove\n    * @param {} event An event object\n    * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"composite\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage composites.\n     *\n     * @property label\n     * @type string\n     * @default \"Composite\"\n     */\n\n    /**\n     * A flag that specifies whether the composite has been modified during the current step.\n     * This is automatically managed when bodies, constraints or composites are added or removed.\n     *\n     * @property isModified\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n     *\n     * @property parent\n     * @type composite\n     * @default null\n     */\n\n    /**\n     * An array of `Body` that are _direct_ children of this composite.\n     * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n     *\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * An array of `Constraint` that are _direct_ children of this composite.\n     * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n     *\n     * @property constraints\n     * @type constraint[]\n     * @default []\n     */\n\n    /**\n     * An array of `Composite` that are _direct_ children of this composite.\n     * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n     * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n     *\n     * @property composites\n     * @type composite[]\n     * @default []\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An object used for storing cached results for performance reasons.\n     * This is used internally only and is automatically managed.\n     *\n     * @private\n     * @property cache\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __nested_webpack_require_125937__) {\n\n/**\n* The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n*\n* @class Sleeping\n*/\n\nvar Sleeping = {};\n\nmodule.exports = Sleeping;\n\nvar Body = __nested_webpack_require_125937__(4);\nvar Events = __nested_webpack_require_125937__(5);\nvar Common = __nested_webpack_require_125937__(0);\n\n(function() {\n\n    Sleeping._motionWakeThreshold = 0.18;\n    Sleeping._motionSleepThreshold = 0.08;\n    Sleeping._minBias = 0.9;\n\n    /**\n     * Puts bodies to sleep or wakes them up depending on their motion.\n     * @method update\n     * @param {body[]} bodies\n     * @param {number} delta\n     */\n    Sleeping.update = function(bodies, delta) {\n        var timeScale = delta / Common._baseDelta,\n            motionSleepThreshold = Sleeping._motionSleepThreshold;\n        \n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                speed = Body.getSpeed(body),\n                angularSpeed = Body.getAngularSpeed(body),\n                motion = speed * speed + angularSpeed * angularSpeed;\n\n            // wake up bodies if they have a force applied\n            if (body.force.x !== 0 || body.force.y !== 0) {\n                Sleeping.set(body, false);\n                continue;\n            }\n\n            var minMotion = Math.min(body.motion, motion),\n                maxMotion = Math.max(body.motion, motion);\n        \n            // biased average motion estimation between frames\n            body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n\n            if (body.sleepThreshold > 0 && body.motion < motionSleepThreshold) {\n                body.sleepCounter += 1;\n                \n                if (body.sleepCounter >= body.sleepThreshold / timeScale) {\n                    Sleeping.set(body, true);\n                }\n            } else if (body.sleepCounter > 0) {\n                body.sleepCounter -= 1;\n            }\n        }\n    };\n\n    /**\n     * Given a set of colliding pairs, wakes the sleeping bodies involved.\n     * @method afterCollisions\n     * @param {pair[]} pairs\n     */\n    Sleeping.afterCollisions = function(pairs) {\n        var motionSleepThreshold = Sleeping._motionSleepThreshold;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n            var pair = pairs[i];\n            \n            // don't wake inactive pairs\n            if (!pair.isActive)\n                continue;\n\n            var collision = pair.collision,\n                bodyA = collision.bodyA.parent, \n                bodyB = collision.bodyB.parent;\n        \n            // don't wake if at least one body is static\n            if ((bodyA.isSleeping && bodyB.isSleeping) || bodyA.isStatic || bodyB.isStatic)\n                continue;\n        \n            if (bodyA.isSleeping || bodyB.isSleeping) {\n                var sleepingBody = (bodyA.isSleeping && !bodyA.isStatic) ? bodyA : bodyB,\n                    movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n\n                if (!sleepingBody.isStatic && movingBody.motion > motionSleepThreshold) {\n                    Sleeping.set(sleepingBody, false);\n                }\n            }\n        }\n    };\n  \n    /**\n     * Set a body as sleeping or awake.\n     * @method set\n     * @param {body} body\n     * @param {boolean} isSleeping\n     */\n    Sleeping.set = function(body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n\n        if (isSleeping) {\n            body.isSleeping = true;\n            body.sleepCounter = body.sleepThreshold;\n\n            body.positionImpulse.x = 0;\n            body.positionImpulse.y = 0;\n\n            body.positionPrev.x = body.position.x;\n            body.positionPrev.y = body.position.y;\n\n            body.anglePrev = body.angle;\n            body.speed = 0;\n            body.angularSpeed = 0;\n            body.motion = 0;\n\n            if (!wasSleeping) {\n                Events.trigger(body, 'sleepStart');\n            }\n        } else {\n            body.isSleeping = false;\n            body.sleepCounter = 0;\n\n            if (wasSleeping) {\n                Events.trigger(body, 'sleepEnd');\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __nested_webpack_require_130181__) {\n\n/**\n* The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n*\n* For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n*\n* See `Matter.Engine` for collision events.\n*\n* @class Collision\n*/\n\nvar Collision = {};\n\nmodule.exports = Collision;\n\nvar Vertices = __nested_webpack_require_130181__(3);\nvar Pair = __nested_webpack_require_130181__(9);\n\n(function() {\n    var _supports = [];\n\n    var _overlapAB = {\n        overlap: 0,\n        axis: null\n    };\n\n    var _overlapBA = {\n        overlap: 0,\n        axis: null\n    };\n\n    /**\n     * Creates a new collision record.\n     * @method create\n     * @param {body} bodyA The first body part represented by the collision record\n     * @param {body} bodyB The second body part represented by the collision record\n     * @return {collision} A new collision record\n     */\n    Collision.create = function(bodyA, bodyB) {\n        return { \n            pair: null,\n            collided: false,\n            bodyA: bodyA,\n            bodyB: bodyB,\n            parentA: bodyA.parent,\n            parentB: bodyB.parent,\n            depth: 0,\n            normal: { x: 0, y: 0 },\n            tangent: { x: 0, y: 0 },\n            penetration: { x: 0, y: 0 },\n            supports: []\n        };\n    };\n\n    /**\n     * Detect collision between two bodies.\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n     * @return {collision|null} A collision record if detected, otherwise null\n     */\n    Collision.collides = function(bodyA, bodyB, pairs) {\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n\n        if (_overlapAB.overlap <= 0) {\n            return null;\n        }\n\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n\n        if (_overlapBA.overlap <= 0) {\n            return null;\n        }\n\n        // reuse collision records for gc efficiency\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n            collision;\n\n        if (!pair) {\n            collision = Collision.create(bodyA, bodyB);\n            collision.collided = true;\n            collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n            collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n            collision.parentA = collision.bodyA.parent;\n            collision.parentB = collision.bodyB.parent;\n        } else {\n            collision = pair.collision;\n        }\n\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n\n        var minOverlap;\n\n        if (_overlapAB.overlap < _overlapBA.overlap) {\n            minOverlap = _overlapAB;\n        } else {\n            minOverlap = _overlapBA;\n        }\n\n        var normal = collision.normal,\n            supports = collision.supports,\n            minAxis = minOverlap.axis,\n            minAxisX = minAxis.x,\n            minAxisY = minAxis.y;\n\n        // ensure normal is facing away from bodyA\n        if (minAxisX * (bodyB.position.x - bodyA.position.x) + minAxisY * (bodyB.position.y - bodyA.position.y) < 0) {\n            normal.x = minAxisX;\n            normal.y = minAxisY;\n        } else {\n            normal.x = -minAxisX;\n            normal.y = -minAxisY;\n        }\n        \n        collision.tangent.x = -normal.y;\n        collision.tangent.y = normal.x;\n\n        collision.depth = minOverlap.overlap;\n\n        collision.penetration.x = normal.x * collision.depth;\n        collision.penetration.y = normal.y * collision.depth;\n\n        // find support points, there is always either exactly one or two\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n            supportCount = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n            supports[supportCount++] = supportsB[1];\n        }\n\n        // find the supports from bodyA that are inside bodyB\n        if (supportCount < 2) {\n            var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n\n            if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n                supports[supportCount++] = supportsA[0];\n            }\n\n            if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n                supports[supportCount++] = supportsA[1];\n            }\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supportCount === 0) {\n            supports[supportCount++] = supportsB[0];\n        }\n\n        // update supports array size\n        supports.length = supportCount;\n\n        return collision;\n    };\n\n    /**\n     * Find the overlap between two sets of vertices.\n     * @method _overlapAxes\n     * @private\n     * @param {object} result\n     * @param {vertices} verticesA\n     * @param {vertices} verticesB\n     * @param {axes} axes\n     */\n    Collision._overlapAxes = function(result, verticesA, verticesB, axes) {\n        var verticesALength = verticesA.length,\n            verticesBLength = verticesB.length,\n            verticesAX = verticesA[0].x,\n            verticesAY = verticesA[0].y,\n            verticesBX = verticesB[0].x,\n            verticesBY = verticesB[0].y,\n            axesLength = axes.length,\n            overlapMin = Number.MAX_VALUE,\n            overlapAxisNumber = 0,\n            overlap,\n            overlapAB,\n            overlapBA,\n            dot,\n            i,\n            j;\n\n        for (i = 0; i < axesLength; i++) {\n            var axis = axes[i],\n                axisX = axis.x,\n                axisY = axis.y,\n                minA = verticesAX * axisX + verticesAY * axisY,\n                minB = verticesBX * axisX + verticesBY * axisY,\n                maxA = minA,\n                maxB = minB;\n            \n            for (j = 1; j < verticesALength; j += 1) {\n                dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n\n                if (dot > maxA) { \n                    maxA = dot;\n                } else if (dot < minA) { \n                    minA = dot;\n                }\n            }\n\n            for (j = 1; j < verticesBLength; j += 1) {\n                dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n\n                if (dot > maxB) { \n                    maxB = dot;\n                } else if (dot < minB) { \n                    minB = dot;\n                }\n            }\n\n            overlapAB = maxA - minB;\n            overlapBA = maxB - minA;\n            overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n\n            if (overlap < overlapMin) {\n                overlapMin = overlap;\n                overlapAxisNumber = i;\n\n                if (overlap <= 0) {\n                    // can not be intersecting\n                    break;\n                }\n            } \n        }\n\n        result.axis = axes[overlapAxisNumber];\n        result.overlap = overlapMin;\n    };\n\n    /**\n     * Projects vertices on an axis and returns an interval.\n     * @method _projectToAxis\n     * @private\n     * @param {} projection\n     * @param {} vertices\n     * @param {} axis\n     */\n    Collision._projectToAxis = function(projection, vertices, axis) {\n        var min = vertices[0].x * axis.x + vertices[0].y * axis.y,\n            max = min;\n\n        for (var i = 1; i < vertices.length; i += 1) {\n            var dot = vertices[i].x * axis.x + vertices[i].y * axis.y;\n\n            if (dot > max) { \n                max = dot; \n            } else if (dot < min) { \n                min = dot; \n            }\n        }\n\n        projection.min = min;\n        projection.max = max;\n    };\n\n    /**\n     * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n     * @method _findSupports\n     * @private\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @param {vector} normal\n     * @param {number} direction\n     * @return [vector]\n     */\n    Collision._findSupports = function(bodyA, bodyB, normal, direction) {\n        var vertices = bodyB.vertices,\n            verticesLength = vertices.length,\n            bodyAPositionX = bodyA.position.x,\n            bodyAPositionY = bodyA.position.y,\n            normalX = normal.x * direction,\n            normalY = normal.y * direction,\n            nearestDistance = Number.MAX_VALUE,\n            vertexA,\n            vertexB,\n            vertexC,\n            distance,\n            j;\n\n        // find deepest vertex relative to the axis\n        for (j = 0; j < verticesLength; j += 1) {\n            vertexB = vertices[j];\n            distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n\n            // convex hill-climbing\n            if (distance < nearestDistance) {\n                nearestDistance = distance;\n                vertexA = vertexB;\n            }\n        }\n\n        // measure next vertex\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n\n        // compare with previous vertex\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n            _supports[0] = vertexA;\n            _supports[1] = vertexB;\n\n            return _supports;\n        }\n\n        _supports[0] = vertexA;\n        _supports[1] = vertexC;\n\n        return _supports;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A reference to the pair using this collision record, if there is one.\n     *\n     * @property pair\n     * @type {pair|null}\n     * @default null\n     */\n\n    /**\n     * A flag that indicates if the bodies were colliding when the collision was last updated.\n     * \n     * @property collided\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * The first body part represented by the collision (see also `collision.parentA`).\n     * \n     * @property bodyA\n     * @type body\n     */\n\n    /**\n     * The second body part represented by the collision (see also `collision.parentB`).\n     * \n     * @property bodyB\n     * @type body\n     */\n\n    /**\n     * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n     * \n     * @property parentA\n     * @type body\n     */\n\n    /**\n     * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n     * \n     * @property parentB\n     * @type body\n     */\n\n    /**\n     * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n     *\n     * @readOnly\n     * @property depth\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n     *\n     * @property normal\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A normalised `Vector` that is the tangent direction to the collision normal.\n     *\n     * @property tangent\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that represents the direction and depth of the collision.\n     *\n     * @property penetration\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * An array of body vertices that represent the support points in the collision.\n     * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n     *\n     * @property supports\n     * @type vector[]\n     * @default []\n     */\n\n})();\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __nested_webpack_require_142084__) {\n\n/**\n* The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n*\n* @class Pair\n*/\n\nvar Pair = {};\n\nmodule.exports = Pair;\n\nvar Contact = __nested_webpack_require_142084__(16);\n\n(function() {\n    \n    /**\n     * Creates a pair.\n     * @method create\n     * @param {collision} collision\n     * @param {number} timestamp\n     * @return {pair} A new pair\n     */\n    Pair.create = function(collision, timestamp) {\n        var bodyA = collision.bodyA,\n            bodyB = collision.bodyB;\n\n        var pair = {\n            id: Pair.id(bodyA, bodyB),\n            bodyA: bodyA,\n            bodyB: bodyB,\n            collision: collision,\n            contacts: [],\n            activeContacts: [],\n            separation: 0,\n            isActive: true,\n            confirmedActive: true,\n            isSensor: bodyA.isSensor || bodyB.isSensor,\n            timeCreated: timestamp,\n            timeUpdated: timestamp,\n            inverseMass: 0,\n            friction: 0,\n            frictionStatic: 0,\n            restitution: 0,\n            slop: 0\n        };\n\n        Pair.update(pair, collision, timestamp);\n\n        return pair;\n    };\n\n    /**\n     * Updates a pair given a collision.\n     * @method update\n     * @param {pair} pair\n     * @param {collision} collision\n     * @param {number} timestamp\n     */\n    Pair.update = function(pair, collision, timestamp) {\n        var contacts = pair.contacts,\n            supports = collision.supports,\n            activeContacts = pair.activeContacts,\n            parentA = collision.parentA,\n            parentB = collision.parentB,\n            parentAVerticesLength = parentA.vertices.length;\n        \n        pair.isActive = true;\n        pair.timeUpdated = timestamp;\n        pair.collision = collision;\n        pair.separation = collision.depth;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n\n        collision.pair = pair;\n        activeContacts.length = 0;\n        \n        for (var i = 0; i < supports.length; i++) {\n            var support = supports[i],\n                contactId = support.body === parentA ? support.index : parentAVerticesLength + support.index,\n                contact = contacts[contactId];\n\n            if (contact) {\n                activeContacts.push(contact);\n            } else {\n                activeContacts.push(contacts[contactId] = Contact.create(support));\n            }\n        }\n    };\n    \n    /**\n     * Set a pair as active or inactive.\n     * @method setActive\n     * @param {pair} pair\n     * @param {bool} isActive\n     * @param {number} timestamp\n     */\n    Pair.setActive = function(pair, isActive, timestamp) {\n        if (isActive) {\n            pair.isActive = true;\n            pair.timeUpdated = timestamp;\n        } else {\n            pair.isActive = false;\n            pair.activeContacts.length = 0;\n        }\n    };\n\n    /**\n     * Get the id for the given pair.\n     * @method id\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {string} Unique pairId\n     */\n    Pair.id = function(bodyA, bodyB) {\n        if (bodyA.id < bodyB.id) {\n            return 'A' + bodyA.id + 'B' + bodyB.id;\n        } else {\n            return 'A' + bodyB.id + 'B' + bodyA.id;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __nested_webpack_require_145828__) {\n\n/**\n* The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n* Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n* The stiffness of constraints can be modified to create springs or elastic.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Constraint\n*/\n\nvar Constraint = {};\n\nmodule.exports = Constraint;\n\nvar Vertices = __nested_webpack_require_145828__(3);\nvar Vector = __nested_webpack_require_145828__(2);\nvar Sleeping = __nested_webpack_require_145828__(7);\nvar Bounds = __nested_webpack_require_145828__(1);\nvar Axes = __nested_webpack_require_145828__(11);\nvar Common = __nested_webpack_require_145828__(0);\n\n(function() {\n\n    Constraint._warming = 0.4;\n    Constraint._torqueDampen = 1;\n    Constraint._minLength = 0.000001;\n\n    /**\n     * Creates a new constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n     * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n     * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {} options\n     * @return {constraint} constraint\n     */\n    Constraint.create = function(options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA)\n            constraint.pointA = { x: 0, y: 0 };\n        if (constraint.bodyB && !constraint.pointB)\n            constraint.pointB = { x: 0, y: 0 };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n            initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n            length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n    \n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n            visible: true,\n            lineWidth: 2,\n            strokeStyle: '#ffffff',\n            type: 'line',\n            anchors: true\n        };\n\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n            render.type = 'pin';\n            render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n            render.type = 'spring';\n        }\n\n        constraint.render = Common.extend(render, constraint.render);\n\n        return constraint;\n    };\n\n    /**\n     * Prepares for solving by constraint warming.\n     * @private\n     * @method preSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.preSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            body.position.x += impulse.x;\n            body.position.y += impulse.y;\n            body.angle += impulse.angle;\n        }\n    };\n\n    /**\n     * Solves all constraints in a list of collisions.\n     * @private\n     * @method solveAll\n     * @param {constraint[]} constraints\n     * @param {number} delta\n     */\n    Constraint.solveAll = function(constraints, delta) {\n        var timeScale = Common.clamp(delta / Common._baseDelta, 0, 1);\n\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n            var constraint = constraints[i],\n                fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic),\n                fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (fixedA || fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n            constraint = constraints[i];\n            fixedA = !constraint.bodyA || (constraint.bodyA && constraint.bodyA.isStatic);\n            fixedB = !constraint.bodyB || (constraint.bodyB && constraint.bodyB.isStatic);\n\n            if (!fixedA && !fixedB) {\n                Constraint.solve(constraints[i], timeScale);\n            }\n        }\n    };\n\n    /**\n     * Solves a distance constraint with Gauss-Siedel method.\n     * @private\n     * @method solve\n     * @param {constraint} constraint\n     * @param {number} timeScale\n     */\n    Constraint.solve = function(constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            pointA = constraint.pointA,\n            pointB = constraint.pointB;\n\n        if (!bodyA && !bodyB)\n            return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n            Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n            constraint.angleA = bodyA.angle;\n        }\n        \n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n            Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n            constraint.angleB = bodyB.angle;\n        }\n\n        var pointAWorld = pointA,\n            pointBWorld = pointB;\n\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n\n        if (!pointAWorld || !pointBWorld)\n            return;\n\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n            currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n            currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n            isRigid = constraint.stiffness >= 1 || constraint.length === 0,\n            stiffness = isRigid ? constraint.stiffness * timeScale \n                : constraint.stiffness * timeScale * timeScale,\n            damping = constraint.damping * timeScale,\n            force = Vector.mult(delta, difference * stiffness),\n            massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n            inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n            resistanceTotal = massTotal + inertiaTotal,\n            torque,\n            share,\n            normal,\n            normalVelocity,\n            relativeVelocity;\n    \n        if (damping > 0) {\n            var zero = Vector.create();\n            normal = Vector.div(delta, currentLength);\n\n            relativeVelocity = Vector.sub(\n                bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero,\n                bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero\n            );\n\n            normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n\n        if (bodyA && !bodyA.isStatic) {\n            share = bodyA.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyA.constraintImpulse.x -= force.x * share;\n            bodyA.constraintImpulse.y -= force.y * share;\n\n            // apply forces\n            bodyA.position.x -= force.x * share;\n            bodyA.position.y -= force.y * share;\n\n            // apply damping\n            if (damping > 0) {\n                bodyA.positionPrev.x -= damping * normal.x * normalVelocity * share;\n                bodyA.positionPrev.y -= damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointA, force) / resistanceTotal) * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n            bodyA.constraintImpulse.angle -= torque;\n            bodyA.angle -= torque;\n        }\n\n        if (bodyB && !bodyB.isStatic) {\n            share = bodyB.inverseMass / massTotal;\n\n            // keep track of applied impulses for post solving\n            bodyB.constraintImpulse.x += force.x * share;\n            bodyB.constraintImpulse.y += force.y * share;\n            \n            // apply forces\n            bodyB.position.x += force.x * share;\n            bodyB.position.y += force.y * share;\n\n            // apply damping\n            if (damping > 0) {\n                bodyB.positionPrev.x += damping * normal.x * normalVelocity * share;\n                bodyB.positionPrev.y += damping * normal.y * normalVelocity * share;\n            }\n\n            // apply torque\n            torque = (Vector.cross(pointB, force) / resistanceTotal) * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n            bodyB.constraintImpulse.angle += torque;\n            bodyB.angle += torque;\n        }\n\n    };\n\n    /**\n     * Performs body updates required after solving constraints.\n     * @private\n     * @method postSolveAll\n     * @param {body[]} bodies\n     */\n    Constraint.postSolveAll = function(bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                impulse = body.constraintImpulse;\n\n            if (body.isStatic || (impulse.x === 0 && impulse.y === 0 && impulse.angle === 0)) {\n                continue;\n            }\n\n            Sleeping.set(body, false);\n\n            // update geometry and reset\n            for (var j = 0; j < body.parts.length; j++) {\n                var part = body.parts[j];\n                \n                Vertices.translate(part.vertices, impulse);\n\n                if (j > 0) {\n                    part.position.x += impulse.x;\n                    part.position.y += impulse.y;\n                }\n\n                if (impulse.angle !== 0) {\n                    Vertices.rotate(part.vertices, impulse.angle, body.position);\n                    Axes.rotate(part.axes, impulse.angle);\n                    if (j > 0) {\n                        Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n                    }\n                }\n\n                Bounds.update(part.bounds, part.vertices, body.velocity);\n            }\n\n            // dampen the cached impulse for warming next step\n            impulse.angle *= Constraint._warming;\n            impulse.x *= Constraint._warming;\n            impulse.y *= Constraint._warming;\n        }\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n     * @method pointAWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointAWorld = function(constraint) {\n        return {\n            x: (constraint.bodyA ? constraint.bodyA.position.x : 0) \n                + (constraint.pointA ? constraint.pointA.x : 0),\n            y: (constraint.bodyA ? constraint.bodyA.position.y : 0) \n                + (constraint.pointA ? constraint.pointA.y : 0)\n        };\n    };\n\n    /**\n     * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n     * @method pointBWorld\n     * @param {constraint} constraint\n     * @returns {vector} the world-space position\n     */\n    Constraint.pointBWorld = function(constraint) {\n        return {\n            x: (constraint.bodyB ? constraint.bodyB.position.x : 0) \n                + (constraint.pointB ? constraint.pointB.x : 0),\n            y: (constraint.bodyB ? constraint.bodyB.position.y : 0) \n                + (constraint.pointB ? constraint.pointB.y : 0)\n        };\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n     *\n     * @property id\n     * @type number\n     */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * An arbitrary `String` name to help the user identify and manage bodies.\n     *\n     * @property label\n     * @type string\n     * @default \"Constraint\"\n     */\n\n    /**\n     * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n     *\n     * @property render\n     * @type object\n     */\n\n    /**\n     * A flag that indicates if the constraint should be rendered.\n     *\n     * @property render.visible\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Number` that defines the line width to use when rendering the constraint outline.\n     * A value of `0` means no outline will be rendered.\n     *\n     * @property render.lineWidth\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A `String` that defines the stroke style to use when rendering the constraint outline.\n     * It is the same as when using a canvas, so it accepts CSS style property values.\n     *\n     * @property render.strokeStyle\n     * @type string\n     * @default a random colour\n     */\n\n    /**\n     * A `String` that defines the constraint rendering type. \n     * The possible values are 'line', 'pin', 'spring'.\n     * An appropriate render type will be automatically chosen unless one is given in options.\n     *\n     * @property render.type\n     * @type string\n     * @default 'line'\n     */\n\n    /**\n     * A `Boolean` that defines if the constraint's anchor points should be rendered.\n     *\n     * @property render.anchors\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * The first possible `Body` that this constraint is attached to.\n     *\n     * @property bodyA\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The second possible `Body` that this constraint is attached to.\n     *\n     * @property bodyB\n     * @type body\n     * @default null\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n     *\n     * @property pointA\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n     *\n     * @property pointB\n     * @type vector\n     * @default { x: 0, y: 0 }\n     */\n\n    /**\n     * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n     * A value of `1` means the constraint should be very stiff.\n     * A value of `0.2` means the constraint acts like a soft spring.\n     *\n     * @property stiffness\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the damping of the constraint, \n     * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n     * Damping will only be apparent when the constraint also has a very low `stiffness`.\n     * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n     * A value of `0` means the constraint will apply no damping.\n     *\n     * @property damping\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that specifies the target resting length of the constraint. \n     * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n     *\n     * @property length\n     * @type number\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n})();\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __nested_webpack_require_162575__) {\n\n/**\n* The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n*\n* @class Axes\n*/\n\nvar Axes = {};\n\nmodule.exports = Axes;\n\nvar Vector = __nested_webpack_require_162575__(2);\nvar Common = __nested_webpack_require_162575__(0);\n\n(function() {\n\n    /**\n     * Creates a new set of axes from the given vertices.\n     * @method fromVertices\n     * @param {vertices} vertices\n     * @return {axes} A new axes from the given vertices\n     */\n    Axes.fromVertices = function(vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n            var j = (i + 1) % vertices.length, \n                normal = Vector.normalise({ \n                    x: vertices[j].y - vertices[i].y, \n                    y: vertices[i].x - vertices[j].x\n                }),\n                gradient = (normal.y === 0) ? Infinity : (normal.x / normal.y);\n            \n            // limit precision\n            gradient = gradient.toFixed(3).toString();\n            axes[gradient] = normal;\n        }\n\n        return Common.values(axes);\n    };\n\n    /**\n     * Rotates a set of axes by the given angle.\n     * @method rotate\n     * @param {axes} axes\n     * @param {number} angle\n     */\n    Axes.rotate = function(axes, angle) {\n        if (angle === 0)\n            return;\n        \n        var cos = Math.cos(angle),\n            sin = Math.sin(angle);\n\n        for (var i = 0; i < axes.length; i++) {\n            var axis = axes[i],\n                xx;\n            xx = axis.x * cos - axis.y * sin;\n            axis.y = axis.x * sin + axis.y * cos;\n            axis.x = xx;\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __nested_webpack_require_164316__) {\n\n/**\n* The `Matter.Bodies` module contains factory methods for creating rigid body models \n* with commonly used body configurations (such as rectangles, circles and other polygons).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Bodies\n*/\n\n// TODO: true circle bodies\n\nvar Bodies = {};\n\nmodule.exports = Bodies;\n\nvar Vertices = __nested_webpack_require_164316__(3);\nvar Common = __nested_webpack_require_164316__(0);\nvar Body = __nested_webpack_require_164316__(4);\nvar Bounds = __nested_webpack_require_164316__(1);\nvar Vector = __nested_webpack_require_164316__(2);\n\n(function() {\n\n    /**\n     * Creates a new rigid body model with a rectangle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method rectangle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {object} [options]\n     * @return {body} A new rectangle body\n     */\n    Bodies.rectangle = function(x, y, width, height, options) {\n        options = options || {};\n\n        var rectangle = { \n            label: 'Rectangle Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, rectangle, options));\n    };\n    \n    /**\n     * Creates a new rigid body model with a trapezoid hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method trapezoid\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} slope\n     * @param {object} [options]\n     * @return {body} A new trapezoid body\n     */\n    Bodies.trapezoid = function(x, y, width, height, slope, options) {\n        options = options || {};\n\n        slope *= 0.5;\n        var roof = (1 - (slope * 2)) * width;\n        \n        var x1 = width * slope,\n            x2 = x1 + roof,\n            x3 = x2 + x1,\n            verticesPath;\n\n        if (slope < 0.5) {\n            verticesPath = 'L 0 0 L ' + x1 + ' ' + (-height) + ' L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        } else {\n            verticesPath = 'L 0 0 L ' + x2 + ' ' + (-height) + ' L ' + x3 + ' 0';\n        }\n\n        var trapezoid = { \n            label: 'Trapezoid Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(verticesPath)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, trapezoid, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a circle hull. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method circle\n     * @param {number} x\n     * @param {number} y\n     * @param {number} radius\n     * @param {object} [options]\n     * @param {number} [maxSides]\n     * @return {body} A new circle body\n     */\n    Bodies.circle = function(x, y, radius, options, maxSides) {\n        options = options || {};\n\n        var circle = {\n            label: 'Circle Body',\n            circleRadius: radius\n        };\n        \n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1)\n            sides += 1;\n\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n    };\n\n    /**\n     * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n     * The options parameter is an object that specifies any properties you wish to override the defaults.\n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method polygon\n     * @param {number} x\n     * @param {number} y\n     * @param {number} sides\n     * @param {number} radius\n     * @param {object} [options]\n     * @return {body} A new regular polygon body\n     */\n    Bodies.polygon = function(x, y, sides, radius, options) {\n        options = options || {};\n\n        if (sides < 3)\n            return Bodies.circle(x, y, radius, options);\n\n        var theta = 2 * Math.PI / sides,\n            path = '',\n            offset = theta * 0.5;\n\n        for (var i = 0; i < sides; i += 1) {\n            var angle = offset + (i * theta),\n                xx = Math.cos(angle) * radius,\n                yy = Math.sin(angle) * radius;\n\n            path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n\n        var polygon = { \n            label: 'Polygon Body',\n            position: { x: x, y: y },\n            vertices: Vertices.fromPath(path)\n        };\n\n        if (options.chamfer) {\n            var chamfer = options.chamfer;\n            polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, \n                chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n            delete options.chamfer;\n        }\n\n        return Body.create(Common.extend({}, polygon, options));\n    };\n\n    /**\n     * Utility to create a compound body based on set(s) of vertices.\n     * \n     * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n     * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n     * \n     * The resulting vertices are reorientated about their centre of mass,\n     * and offset such that `body.position` corresponds to this point.\n     * \n     * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n     * To later move the centre of mass see `Body.setCentre`.\n     * \n     * Note that automatic conconcave decomposition results are not always optimal. \n     * For best results, simplify the input vertices as much as possible first.\n     * By default this function applies some addtional simplification to help.\n     * \n     * Some outputs may also require further manual processing afterwards to be robust.\n     * In particular some parts may need to be overlapped to avoid collision gaps.\n     * Thin parts and sharp points should be avoided or removed where possible.\n     *\n     * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n     * \n     * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n     * @method fromVertices\n     * @param {number} x\n     * @param {number} y\n     * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n     * @param {object} [options] The body options.\n     * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n     * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n     * @param {number} [minimumArea=10] Threshold when removing small parts.\n     * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n     * @return {body}\n     */\n    Bodies.fromVertices = function(x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n            canDecomp,\n            body,\n            parts,\n            isConvex,\n            isConcave,\n            vertices,\n            i,\n            j,\n            k,\n            v,\n            z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n\n        options = options || {};\n        parts = [];\n\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n            vertexSets = [vertexSets];\n        }\n\n        for (v = 0; v < vertexSets.length; v += 1) {\n            vertices = vertexSets[v];\n            isConvex = Vertices.isConvex(vertices);\n            isConcave = !isConvex;\n\n            if (isConcave && !canDecomp) {\n                Common.warnOnce(\n                    'Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.'\n                );\n            }\n\n            if (isConvex || !canDecomp) {\n                if (isConvex) {\n                    vertices = Vertices.clockwiseSort(vertices);\n                } else {\n                    // fallback to convex hull when decomposition is not possible\n                    vertices = Vertices.hull(vertices);\n                }\n\n                parts.push({\n                    position: { x: x, y: y },\n                    vertices: vertices\n                });\n            } else {\n                // initialise a decomposition\n                var concave = vertices.map(function(vertex) {\n                    return [vertex.x, vertex.y];\n                });\n\n                // vertices are concave and simple, we can decompose into parts\n                decomp.makeCCW(concave);\n                if (removeCollinear !== false)\n                    decomp.removeCollinearPoints(concave, removeCollinear);\n                if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints)\n                    decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n                // use the quick decomposition algorithm (Bayazit)\n                var decomposed = decomp.quickDecomp(concave);\n\n                // for each decomposed chunk\n                for (i = 0; i < decomposed.length; i++) {\n                    var chunk = decomposed[i];\n\n                    // convert vertices into the correct structure\n                    var chunkVertices = chunk.map(function(vertices) {\n                        return {\n                            x: vertices[0],\n                            y: vertices[1]\n                        };\n                    });\n\n                    // skip small chunks\n                    if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea)\n                        continue;\n\n                    // create a compound part\n                    parts.push({\n                        position: Vertices.centre(chunkVertices),\n                        vertices: chunkVertices\n                    });\n                }\n            }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n            parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n            var coincident_max_dist = 5;\n\n            for (i = 0; i < parts.length; i++) {\n                var partA = parts[i];\n\n                for (j = i + 1; j < parts.length; j++) {\n                    var partB = parts[j];\n\n                    if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                        var pav = partA.vertices,\n                            pbv = partB.vertices;\n\n                        // iterate vertices of both parts\n                        for (k = 0; k < partA.vertices.length; k++) {\n                            for (z = 0; z < partB.vertices.length; z++) {\n                                // find distances between the vertices\n                                var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                                    db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                                // if both vertices are very close, consider the edge concident (internal)\n                                if (da < coincident_max_dist && db < coincident_max_dist) {\n                                    pav[k].isInternal = true;\n                                    pbv[z].isInternal = true;\n                                }\n                            }\n                        }\n\n                    }\n                }\n            }\n        }\n\n        if (parts.length > 1) {\n            // create the parent body to be returned, that contains generated compound parts\n            body = Body.create(Common.extend({ parts: parts.slice(0) }, options));\n\n            // offset such that body.position is at the centre off mass\n            Body.setPosition(body, { x: x, y: y });\n\n            return body;\n        } else {\n            return parts[0];\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __nested_webpack_require_178316__) {\n\n/**\n* The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n*\n* @class Detector\n*/\n\nvar Detector = {};\n\nmodule.exports = Detector;\n\nvar Common = __nested_webpack_require_178316__(0);\nvar Collision = __nested_webpack_require_178316__(8);\n\n(function() {\n\n    /**\n     * Creates a new collision detector.\n     * @method create\n     * @param {} options\n     * @return {detector} A new collision detector\n     */\n    Detector.create = function(options) {\n        var defaults = {\n            bodies: [],\n            pairs: null\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * Sets the list of bodies in the detector.\n     * @method setBodies\n     * @param {detector} detector\n     * @param {body[]} bodies\n     */\n    Detector.setBodies = function(detector, bodies) {\n        detector.bodies = bodies.slice(0);\n    };\n\n    /**\n     * Clears the detector including its list of bodies.\n     * @method clear\n     * @param {detector} detector\n     */\n    Detector.clear = function(detector) {\n        detector.bodies = [];\n    };\n\n    /**\n     * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n     * \n     * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n     * If a specific ordering is required then apply a sort to the resulting array.\n     * @method collisions\n     * @param {detector} detector\n     * @return {collision[]} collisions\n     */\n    Detector.collisions = function(detector) {\n        var collisions = [],\n            pairs = detector.pairs,\n            bodies = detector.bodies,\n            bodiesLength = bodies.length,\n            canCollide = Detector.canCollide,\n            collides = Collision.collides,\n            i,\n            j;\n\n        bodies.sort(Detector._compareBoundsX);\n\n        for (i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                boundsA = bodyA.bounds,\n                boundXMax = bodyA.bounds.max.x,\n                boundYMax = bodyA.bounds.max.y,\n                boundYMin = bodyA.bounds.min.y,\n                bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n                partsALength = bodyA.parts.length,\n                partsASingle = partsALength === 1;\n\n            for (j = i + 1; j < bodiesLength; j++) {\n                var bodyB = bodies[j],\n                    boundsB = bodyB.bounds;\n\n                if (boundsB.min.x > boundXMax) {\n                    break;\n                }\n\n                if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n                    continue;\n                }\n\n                if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n                    continue;\n                }\n\n                if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n                    continue;\n                }\n\n                var partsBLength = bodyB.parts.length;\n\n                if (partsASingle && partsBLength === 1) {\n                    var collision = collides(bodyA, bodyB, pairs);\n\n                    if (collision) {\n                        collisions.push(collision);\n                    }\n                } else {\n                    var partsAStart = partsALength > 1 ? 1 : 0,\n                        partsBStart = partsBLength > 1 ? 1 : 0;\n                    \n                    for (var k = partsAStart; k < partsALength; k++) {\n                        var partA = bodyA.parts[k],\n                            boundsA = partA.bounds;\n\n                        for (var z = partsBStart; z < partsBLength; z++) {\n                            var partB = bodyB.parts[z],\n                                boundsB = partB.bounds;\n\n                            if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x\n                                || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                                continue;\n                            }\n\n                            var collision = collides(partA, partB, pairs);\n\n                            if (collision) {\n                                collisions.push(collision);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns `true` if both supplied collision filters will allow a collision to occur.\n     * See `body.collisionFilter` for more information.\n     * @method canCollide\n     * @param {} filterA\n     * @param {} filterB\n     * @return {bool} `true` if collision can occur\n     */\n    Detector.canCollide = function(filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0)\n            return filterA.group > 0;\n\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n    };\n\n    /**\n     * The comparison function used in the broadphase algorithm.\n     * Returns the signed delta of the bodies bounds on the x-axis.\n     * @private\n     * @method _sortCompare\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {number} The signed delta used for sorting\n     */\n    Detector._compareBoundsX = function(bodyA, bodyB) {\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\n    };\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * The array of `Matter.Body` between which the detector finds collisions.\n     * \n     * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n     * @property bodies\n     * @type body[]\n     * @default []\n     */\n\n    /**\n     * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n     * @property pairs\n     * @type {pairs|null}\n     * @default null\n     */\n\n})();\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __nested_webpack_require_184361__) {\n\n/**\n* The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n*\n* @class Mouse\n*/\n\nvar Mouse = {};\n\nmodule.exports = Mouse;\n\nvar Common = __nested_webpack_require_184361__(0);\n\n(function() {\n\n    /**\n     * Creates a mouse input.\n     * @method create\n     * @param {HTMLElement} element\n     * @return {mouse} A new mouse\n     */\n    Mouse.create = function(element) {\n        var mouse = {};\n\n        if (!element) {\n            Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        \n        mouse.element = element || document.body;\n        mouse.absolute = { x: 0, y: 0 };\n        mouse.position = { x: 0, y: 0 };\n        mouse.mousedownPosition = { x: 0, y: 0 };\n        mouse.mouseupPosition = { x: 0, y: 0 };\n        mouse.offset = { x: 0, y: 0 };\n        mouse.scale = { x: 1, y: 1 };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n\n        mouse.sourceEvents = {\n            mousemove: null,\n            mousedown: null,\n            mouseup: null,\n            mousewheel: null\n        };\n        \n        mouse.mousemove = function(event) { \n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.sourceEvents.mousemove = event;\n        };\n        \n        mouse.mousedown = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                mouse.button = 0;\n                event.preventDefault();\n            } else {\n                mouse.button = event.button;\n            }\n\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mousedownPosition.x = mouse.position.x;\n            mouse.mousedownPosition.y = mouse.position.y;\n            mouse.sourceEvents.mousedown = event;\n        };\n        \n        mouse.mouseup = function(event) {\n            var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n                touches = event.changedTouches;\n\n            if (touches) {\n                event.preventDefault();\n            }\n            \n            mouse.button = -1;\n            mouse.absolute.x = position.x;\n            mouse.absolute.y = position.y;\n            mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n            mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n            mouse.mouseupPosition.x = mouse.position.x;\n            mouse.mouseupPosition.y = mouse.position.y;\n            mouse.sourceEvents.mouseup = event;\n        };\n\n        mouse.mousewheel = function(event) {\n            mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n            event.preventDefault();\n        };\n\n        Mouse.setElement(mouse, mouse.element);\n\n        return mouse;\n    };\n\n    /**\n     * Sets the element the mouse is bound to (and relative to).\n     * @method setElement\n     * @param {mouse} mouse\n     * @param {HTMLElement} element\n     */\n    Mouse.setElement = function(mouse, element) {\n        mouse.element = element;\n\n        element.addEventListener('mousemove', mouse.mousemove);\n        element.addEventListener('mousedown', mouse.mousedown);\n        element.addEventListener('mouseup', mouse.mouseup);\n        \n        element.addEventListener('mousewheel', mouse.mousewheel);\n        element.addEventListener('DOMMouseScroll', mouse.mousewheel);\n\n        element.addEventListener('touchmove', mouse.mousemove);\n        element.addEventListener('touchstart', mouse.mousedown);\n        element.addEventListener('touchend', mouse.mouseup);\n    };\n\n    /**\n     * Clears all captured source events.\n     * @method clearSourceEvents\n     * @param {mouse} mouse\n     */\n    Mouse.clearSourceEvents = function(mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n    };\n\n    /**\n     * Sets the mouse position offset.\n     * @method setOffset\n     * @param {mouse} mouse\n     * @param {vector} offset\n     */\n    Mouse.setOffset = function(mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n\n    /**\n     * Sets the mouse position scale.\n     * @method setScale\n     * @param {mouse} mouse\n     * @param {vector} scale\n     */\n    Mouse.setScale = function(mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n    };\n    \n    /**\n     * Gets the mouse position relative to an element given a screen pixel ratio.\n     * @method _getRelativeMousePosition\n     * @private\n     * @param {} event\n     * @param {} element\n     * @param {number} pixelRatio\n     * @return {}\n     */\n    Mouse._getRelativeMousePosition = function(event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n            rootNode = (document.documentElement || document.body.parentNode || document.body),\n            scrollX = (window.pageXOffset !== undefined) ? window.pageXOffset : rootNode.scrollLeft,\n            scrollY = (window.pageYOffset !== undefined) ? window.pageYOffset : rootNode.scrollTop,\n            touches = event.changedTouches,\n            x, y;\n        \n        if (touches) {\n            x = touches[0].pageX - elementBounds.left - scrollX;\n            y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n            x = event.pageX - elementBounds.left - scrollX;\n            y = event.pageY - elementBounds.top - scrollY;\n        }\n\n        return { \n            x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n            y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __nested_webpack_require_191365__) {\n\n/**\n* The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n*\n* @class Plugin\n*/\n\nvar Plugin = {};\n\nmodule.exports = Plugin;\n\nvar Common = __nested_webpack_require_191365__(0);\n\n(function() {\n\n    Plugin._registry = {};\n\n    /**\n     * Registers a plugin object so it can be resolved later by name.\n     * @method register\n     * @param plugin {} The plugin to register.\n     * @return {object} The plugin.\n     */\n    Plugin.register = function(plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n\n        if (plugin.name in Plugin._registry) {\n            var registered = Plugin._registry[plugin.name],\n                pluginVersion = Plugin.versionParse(plugin.version).number,\n                registeredVersion = Plugin.versionParse(registered.version).number;\n\n            if (pluginVersion > registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n                Plugin._registry[plugin.name] = plugin;\n            } else if (pluginVersion < registeredVersion) {\n                Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n            } else if (plugin !== registered) {\n                Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n            }\n        } else {\n            Plugin._registry[plugin.name] = plugin;\n        }\n\n        return plugin;\n    };\n\n    /**\n     * Resolves a dependency to a plugin object from the registry if it exists. \n     * The `dependency` may contain a version, but only the name matters when resolving.\n     * @method resolve\n     * @param dependency {string} The dependency.\n     * @return {object} The plugin if resolved, otherwise `undefined`.\n     */\n    Plugin.resolve = function(dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n    };\n\n    /**\n     * Returns a pretty printed plugin name and version.\n     * @method toString\n     * @param plugin {} The plugin.\n     * @return {string} Pretty printed plugin name and version.\n     */\n    Plugin.toString = function(plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n    };\n\n    /**\n     * Returns `true` if the object meets the minimum standard to be considered a plugin.\n     * This means it must define the following properties:\n     * - `name`\n     * - `version`\n     * - `install`\n     * @method isPlugin\n     * @param obj {} The obj to test.\n     * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n     */\n    Plugin.isPlugin = function(obj) {\n        return obj && obj.name && obj.version && obj.install;\n    };\n\n    /**\n     * Returns `true` if a plugin with the given `name` been installed on `module`.\n     * @method isUsed\n     * @param module {} The module.\n     * @param name {string} The plugin name.\n     * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n     */\n    Plugin.isUsed = function(module, name) {\n        return module.used.indexOf(name) > -1;\n    };\n\n    /**\n     * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n     * If `plugin.for` is not specified then it is assumed to be applicable.\n     * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n     * @method isFor\n     * @param plugin {} The plugin.\n     * @param module {} The module.\n     * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n     */\n    Plugin.isFor = function(plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || (module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range));\n    };\n\n    /**\n     * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n     * For installing plugins on `Matter` see the convenience function `Matter.use`.\n     * Plugins may be specified either by their name or a reference to the plugin object.\n     * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n     * Order is important, a topological sort is performed to find the best resulting order of installation.\n     * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n     * This function logs the resulting status of each dependency in the console, along with any warnings.\n     * - A green tick ✅ indicates a dependency was resolved and installed.\n     * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n     * - A red cross ❌ indicates a dependency could not be resolved.\n     * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n     * @method use\n     * @param module {} The module install plugins on.\n     * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n     */\n    Plugin.use = function(module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n\n        if (module.uses.length === 0) {\n            Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n            return;\n        }\n\n        var dependencies = Plugin.dependencies(module),\n            sortedDependencies = Common.topologicalSort(dependencies),\n            status = [];\n\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n            if (sortedDependencies[i] === module.name) {\n                continue;\n            }\n\n            var plugin = Plugin.resolve(sortedDependencies[i]);\n\n            if (!plugin) {\n                status.push('❌ ' + sortedDependencies[i]);\n                continue;\n            }\n\n            if (Plugin.isUsed(module, plugin.name)) {\n                continue;\n            }\n\n            if (!Plugin.isFor(plugin, module)) {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n                plugin._warned = true;\n            }\n\n            if (plugin.install) {\n                plugin.install(module);\n            } else {\n                Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n                plugin._warned = true;\n            }\n\n            if (plugin._warned) {\n                status.push('🔶 ' + Plugin.toString(plugin));\n                delete plugin._warned;\n            } else {\n                status.push('✅ ' + Plugin.toString(plugin));\n            }\n\n            module.used.push(plugin.name);\n        }\n\n        if (status.length > 0) {\n            Common.info(status.join('  '));\n        }\n    };\n\n    /**\n     * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n     * @method dependencies\n     * @param module {} The module.\n     * @return {object} A dependency graph.\n     */\n    Plugin.dependencies = function(module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n            name = parsedBase.name;\n\n        tracked = tracked || {};\n\n        if (name in tracked) {\n            return;\n        }\n\n        module = Plugin.resolve(module) || module;\n\n        tracked[name] = Common.map(module.uses || [], function(dependency) {\n            if (Plugin.isPlugin(dependency)) {\n                Plugin.register(dependency);\n            }\n\n            var parsed = Plugin.dependencyParse(dependency),\n                resolved = Plugin.resolve(dependency);\n\n            if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy',\n                    Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.'\n                );\n\n                resolved._warned = true;\n                module._warned = true;\n            } else if (!resolved) {\n                Common.warn(\n                    'Plugin.dependencies:', Plugin.toString(dependency), 'used by',\n                    Plugin.toString(parsedBase), 'could not be resolved.'\n                );\n\n                module._warned = true;\n            }\n\n            return parsed.name;\n        });\n\n        for (var i = 0; i < tracked[name].length; i += 1) {\n            Plugin.dependencies(tracked[name][i], tracked);\n        }\n\n        return tracked;\n    };\n\n    /**\n     * Parses a dependency string into its components.\n     * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * This function can also handle dependencies that are already resolved (e.g. a module object).\n     * @method dependencyParse\n     * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n     * @return {object} The dependency parsed into its components.\n     */\n    Plugin.dependencyParse = function(dependency) {\n        if (Common.isString(dependency)) {\n            var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n\n            if (!pattern.test(dependency)) {\n                Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n            }\n\n            return {\n                name: dependency.split('@')[0],\n                range: dependency.split('@')[1] || '*'\n            };\n        }\n\n        return {\n            name: dependency.name,\n            range: dependency.range || dependency.version\n        };\n    };\n\n    /**\n     * Parses a version string into its components.  \n     * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n     * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n     * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n     * Only the following range types are supported:\n     * - Tilde ranges e.g. `~1.2.3`\n     * - Caret ranges e.g. `^1.2.3`\n     * - Greater than ranges e.g. `>1.2.3`\n     * - Greater than or equal ranges e.g. `>=1.2.3`\n     * - Exact version e.g. `1.2.3`\n     * - Any version `*`\n     * @method versionParse\n     * @param range {string} The version string.\n     * @return {object} The version range parsed into its components.\n     */\n    Plugin.versionParse = function(range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n\n        if (!pattern.test(range)) {\n            Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n\n        return {\n            isRange: Boolean(parts[1] || parts[2]),\n            version: parts[3],\n            range: range,\n            operator: parts[1] || parts[2] || '',\n            major: major,\n            minor: minor,\n            patch: patch,\n            parts: [major, minor, patch],\n            prerelease: parts[7],\n            number: major * 1e8 + minor * 1e4 + patch\n        };\n    };\n\n    /**\n     * Returns `true` if `version` satisfies the given `range`.\n     * See documentation for `Plugin.versionParse` for a description of the format.\n     * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n     * @method versionSatisfies\n     * @param version {string} The version string.\n     * @param range {string} The range string.\n     * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n     */\n    Plugin.versionSatisfies = function(version, range) {\n        range = range || '*';\n\n        var r = Plugin.versionParse(range),\n            v = Plugin.versionParse(version);\n\n        if (r.isRange) {\n            if (r.operator === '*' || version === '*') {\n                return true;\n            }\n\n            if (r.operator === '>') {\n                return v.number > r.number;\n            }\n\n            if (r.operator === '>=') {\n                return v.number >= r.number;\n            }\n\n            if (r.operator === '~') {\n                return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n            }\n\n            if (r.operator === '^') {\n                if (r.major > 0) {\n                    return v.major === r.major && v.number >= r.number;\n                }\n\n                if (r.minor > 0) {\n                    return v.minor === r.minor && v.patch >= r.patch;\n                }\n\n                return v.patch === r.patch;\n            }\n        }\n\n        return version === range || version === '*';\n    };\n\n})();\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports) {\n\n/**\n* The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n*\n* @class Contact\n*/\n\nvar Contact = {};\n\nmodule.exports = Contact;\n\n(function() {\n\n    /**\n     * Creates a new contact.\n     * @method create\n     * @param {vertex} vertex\n     * @return {contact} A new contact\n     */\n    Contact.create = function(vertex) {\n        return {\n            vertex: vertex,\n            normalImpulse: 0,\n            tangentImpulse: 0\n        };\n    };\n\n})();\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __nested_webpack_require_205269__) {\n\n/**\n* The `Matter.Engine` module contains methods for creating and manipulating engines.\n* An engine is a controller that manages updating the simulation of the world.\n* See `Matter.Runner` for an optional game loop utility.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Engine\n*/\n\nvar Engine = {};\n\nmodule.exports = Engine;\n\nvar Sleeping = __nested_webpack_require_205269__(7);\nvar Resolver = __nested_webpack_require_205269__(18);\nvar Detector = __nested_webpack_require_205269__(13);\nvar Pairs = __nested_webpack_require_205269__(19);\nvar Events = __nested_webpack_require_205269__(5);\nvar Composite = __nested_webpack_require_205269__(6);\nvar Constraint = __nested_webpack_require_205269__(10);\nvar Common = __nested_webpack_require_205269__(0);\nvar Body = __nested_webpack_require_205269__(4);\n\n(function() {\n\n    /**\n     * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {engine} engine\n     */\n    Engine.create = function(options) {\n        options = options || {};\n\n        var defaults = {\n            positionIterations: 6,\n            velocityIterations: 4,\n            constraintIterations: 2,\n            enableSleeping: false,\n            events: [],\n            plugin: {},\n            gravity: {\n                x: 0,\n                y: 1,\n                scale: 0.001\n            },\n            timing: {\n                timestamp: 0,\n                timeScale: 1,\n                lastDelta: 0,\n                lastElapsed: 0\n            }\n        };\n\n        var engine = Common.extend(defaults, options);\n\n        engine.world = options.world || Composite.create({ label: 'World' });\n        engine.pairs = options.pairs || Pairs.create();\n        engine.detector = options.detector || Detector.create();\n\n        // for temporary back compatibility only\n        engine.grid = { buckets: [] };\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        \n        return engine;\n    };\n\n    /**\n     * Moves the simulation forward in time by `delta` milliseconds.\n     * Triggers `beforeUpdate` and `afterUpdate` events.\n     * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n     * @method update\n     * @param {engine} engine\n     * @param {number} [delta=16.666]\n     */\n    Engine.update = function(engine, delta) {\n        var startTime = Common.now();\n\n        var world = engine.world,\n            detector = engine.detector,\n            pairs = engine.pairs,\n            timing = engine.timing,\n            timestamp = timing.timestamp,\n            i;\n\n        delta = typeof delta !== 'undefined' ? delta : Common._baseDelta;\n        delta *= timing.timeScale;\n\n        // increment timestamp\n        timing.timestamp += delta;\n        timing.lastDelta = delta;\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp,\n            delta: delta\n        };\n\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get all bodies and all constraints in the world\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world);\n\n        // if the world has changed\n        if (world.isModified) {\n            // update the detector bodies\n            Detector.setBodies(detector, allBodies);\n\n            // reset all composite modified flags\n            Composite.setModified(world, false, false, true);\n        }\n\n        // update sleeping if enabled\n        if (engine.enableSleeping)\n            Sleeping.update(allBodies, delta);\n\n        // apply gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        if (delta > 0) {\n            Engine._bodiesUpdate(allBodies, delta);\n        }\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // find all collisions\n        detector.pairs = engine.pairs;\n        var collisions = Detector.collisions(detector);\n\n        // update collision pairs\n        Pairs.update(pairs, collisions, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping)\n            Sleeping.afterCollisions(pairs.list);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0)\n            Events.trigger(engine, 'collisionStart', { pairs: pairs.collisionStart });\n\n        // iteratively resolve position between collisions\n        var positionDamping = Common.clamp(20 / engine.positionIterations, 0, 1);\n        \n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n            Resolver.solvePosition(pairs.list, delta, positionDamping);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n            Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n            Resolver.solveVelocity(pairs.list, delta);\n        }\n\n        // update body speed and velocity properties\n        Engine._bodiesUpdateVelocities(allBodies);\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0)\n            Events.trigger(engine, 'collisionActive', { pairs: pairs.collisionActive });\n\n        if (pairs.collisionEnd.length > 0)\n            Events.trigger(engine, 'collisionEnd', { pairs: pairs.collisionEnd });\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n\n        return engine;\n    };\n    \n    /**\n     * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n     * @method merge\n     * @param {engine} engineA\n     * @param {engine} engineB\n     */\n    Engine.merge = function(engineA, engineB) {\n        Common.extend(engineA, engineB);\n        \n        if (engineB.world) {\n            engineA.world = engineB.world;\n\n            Engine.clear(engineA);\n\n            var bodies = Composite.allBodies(engineA.world);\n\n            for (var i = 0; i < bodies.length; i++) {\n                var body = bodies[i];\n                Sleeping.set(body, false);\n                body.id = Common.nextId();\n            }\n        }\n    };\n\n    /**\n     * Clears the engine pairs and detector.\n     * @method clear\n     * @param {engine} engine\n     */\n    Engine.clear = function(engine) {\n        Pairs.clear(engine.pairs);\n        Detector.clear(engine.detector);\n    };\n\n    /**\n     * Zeroes the `body.force` and `body.torque` force buffers.\n     * @method _bodiesClearForces\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesClearForces = function(bodies) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            // reset force buffers\n            body.force.x = 0;\n            body.force.y = 0;\n            body.torque = 0;\n        }\n    };\n\n    /**\n     * Applies gravitational acceleration to all `bodies`.\n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet.\n     * \n     * @method _bodiesApplyGravity\n     * @private\n     * @param {body[]} bodies\n     * @param {vector} gravity\n     */\n    Engine._bodiesApplyGravity = function(bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001,\n            bodiesLength = bodies.length;\n\n        if ((gravity.x === 0 && gravity.y === 0) || gravityScale === 0) {\n            return;\n        }\n        \n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            // add the resultant force of gravity\n            body.force.y += body.mass * gravity.y * gravityScale;\n            body.force.x += body.mass * gravity.x * gravityScale;\n        }\n    };\n\n    /**\n     * Applies `Body.update` to all given `bodies`.\n     * @method _bodiesUpdate\n     * @private\n     * @param {body[]} bodies\n     * @param {number} delta The amount of time elapsed between updates\n     */\n    Engine._bodiesUpdate = function(bodies, delta) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i];\n\n            if (body.isStatic || body.isSleeping)\n                continue;\n\n            Body.update(body, delta);\n        }\n    };\n\n    /**\n     * Applies `Body.updateVelocities` to all given `bodies`.\n     * @method _bodiesUpdateVelocities\n     * @private\n     * @param {body[]} bodies\n     */\n    Engine._bodiesUpdateVelocities = function(bodies) {\n        var bodiesLength = bodies.length;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            Body.updateVelocities(bodies[i]);\n        }\n    };\n\n    /**\n     * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n     * @deprecated use Matter.Runner.run(engine) instead\n     * @method run\n     * @param {engine} engine\n     */\n\n    /**\n    * Fired just before an update\n    *\n    * @event beforeUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update and all collision events\n    *\n    * @event afterUpdate\n    * @param {object} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n    *\n    * @event collisionStart\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n    *\n    * @event collisionActive\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n    *\n    * @event collisionEnd\n    * @param {object} event An event object\n    * @param {pair[]} event.pairs List of affected pairs\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {number} event.delta The delta time in milliseconds value used in the update\n    * @param {engine} event.source The source object of the event\n    * @param {string} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * An integer `Number` that specifies the number of position iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property positionIterations\n     * @type number\n     * @default 6\n     */\n\n    /**\n     * An integer `Number` that specifies the number of velocity iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     *\n     * @property velocityIterations\n     * @type number\n     * @default 4\n     */\n\n    /**\n     * An integer `Number` that specifies the number of constraint iterations to perform each update.\n     * The higher the value, the higher quality the simulation will be at the expense of performance.\n     * The default value of `2` is usually very adequate.\n     *\n     * @property constraintIterations\n     * @type number\n     * @default 2\n     */\n\n    /**\n     * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n     * Sleeping can improve stability and performance, but often at the expense of accuracy.\n     *\n     * @property enableSleeping\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * An `Object` containing properties regarding the timing systems of the engine. \n     *\n     * @property timing\n     * @type object\n     */\n\n    /**\n     * A `Number` that specifies the global scaling factor of time for all bodies.\n     * A value of `0` freezes the simulation.\n     * A value of `0.1` gives a slow-motion effect.\n     * A value of `1.2` gives a speed-up effect.\n     *\n     * @property timing.timeScale\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n     * It is incremented on every `Engine.update` by the given `delta` argument. \n     * \n     * @property timing.timestamp\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n     * It is updated by timing from the start of the last `Engine.update` call until it ends.\n     *\n     * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n     * \n     * @property timing.lastElapsed\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Number` that represents the `delta` value used in the last engine update.\n     * \n     * @property timing.lastDelta\n     * @type number\n     * @default 0\n     */\n\n    /**\n     * A `Matter.Detector` instance.\n     *\n     * @property detector\n     * @type detector\n     * @default a Matter.Detector instance\n     */\n\n    /**\n     * A `Matter.Grid` instance.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property grid\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * Replaced by and now alias for `engine.grid`.\n     *\n     * @deprecated replaced by `engine.detector`\n     * @property broadphase\n     * @type grid\n     * @default a Matter.Grid instance\n     */\n\n    /**\n     * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n     *\n     * @property world\n     * @type composite\n     * @default a Matter.Composite instance\n     */\n\n    /**\n     * An object reserved for storing plugin-specific properties.\n     *\n     * @property plugin\n     * @type {}\n     */\n\n    /**\n     * An optional gravitational acceleration applied to all bodies in `engine.world` on every update.\n     * \n     * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet. For gravity in other contexts, disable this and apply forces as needed.\n     * \n     * To disable set the `scale` component to `0`.\n     * \n     * This is split into three components for ease of use:  \n     * a normalised direction (`x` and `y`) and magnitude (`scale`).\n     *\n     * @property gravity\n     * @type object\n     */\n\n    /**\n     * The gravitational direction normal `x` component, to be multiplied by `gravity.scale`.\n     * \n     * @property gravity.x\n     * @type object\n     * @default 0\n     */\n\n    /**\n     * The gravitational direction normal `y` component, to be multiplied by `gravity.scale`.\n     *\n     * @property gravity.y\n     * @type object\n     * @default 1\n     */\n\n    /**\n     * The magnitude of the gravitational acceleration.\n     * \n     * @property gravity.scale\n     * @type object\n     * @default 0.001\n     */\n\n})();\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __nested_webpack_require_222656__) {\n\n/**\n* The `Matter.Resolver` module contains methods for resolving collision pairs.\n*\n* @class Resolver\n*/\n\nvar Resolver = {};\n\nmodule.exports = Resolver;\n\nvar Vertices = __nested_webpack_require_222656__(3);\nvar Common = __nested_webpack_require_222656__(0);\nvar Bounds = __nested_webpack_require_222656__(1);\n\n(function() {\n\n    Resolver._restingThresh = 2;\n    Resolver._restingThreshTangent = Math.sqrt(6);\n    Resolver._positionDampen = 0.9;\n    Resolver._positionWarming = 0.8;\n    Resolver._frictionNormalMultiplier = 5;\n    Resolver._frictionMaxStatic = Number.MAX_VALUE;\n\n    /**\n     * Prepare pairs for position solving.\n     * @method preSolvePosition\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolvePosition = function(pairs) {\n        var i,\n            pair,\n            activeCount,\n            pairsLength = pairs.length;\n\n        // find total contacts on each body\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive)\n                continue;\n            \n            activeCount = pair.activeContacts.length;\n            pair.collision.parentA.totalContacts += activeCount;\n            pair.collision.parentB.totalContacts += activeCount;\n        }\n    };\n\n    /**\n     * Find a solution for pair positions.\n     * @method solvePosition\n     * @param {pair[]} pairs\n     * @param {number} delta\n     * @param {number} [damping=1]\n     */\n    Resolver.solvePosition = function(pairs, delta, damping) {\n        var i,\n            pair,\n            collision,\n            bodyA,\n            bodyB,\n            normal,\n            contactShare,\n            positionImpulse,\n            positionDampen = Resolver._positionDampen * (damping || 1),\n            slopDampen = Common.clamp(delta / Common._baseDelta, 0, 1),\n            pairsLength = pairs.length;\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n\n            // get current separation between body edges involved in collision\n            pair.separation = \n                normal.x * (bodyB.positionImpulse.x + collision.penetration.x - bodyA.positionImpulse.x)\n                + normal.y * (bodyB.positionImpulse.y + collision.penetration.y - bodyA.positionImpulse.y);\n        }\n        \n        for (i = 0; i < pairsLength; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            collision = pair.collision;\n            bodyA = collision.parentA;\n            bodyB = collision.parentB;\n            normal = collision.normal;\n            positionImpulse = pair.separation - pair.slop * slopDampen;\n\n            if (bodyA.isStatic || bodyB.isStatic)\n                positionImpulse *= 2;\n            \n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                contactShare = positionDampen / bodyA.totalContacts;\n                bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n                bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n            }\n\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                contactShare = positionDampen / bodyB.totalContacts;\n                bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n                bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n            }\n        }\n    };\n\n    /**\n     * Apply position resolution.\n     * @method postSolvePosition\n     * @param {body[]} bodies\n     */\n    Resolver.postSolvePosition = function(bodies) {\n        var positionWarming = Resolver._positionWarming,\n            bodiesLength = bodies.length,\n            verticesTranslate = Vertices.translate,\n            boundsUpdate = Bounds.update;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var body = bodies[i],\n                positionImpulse = body.positionImpulse,\n                positionImpulseX = positionImpulse.x,\n                positionImpulseY = positionImpulse.y,\n                velocity = body.velocity;\n\n            // reset contact count\n            body.totalContacts = 0;\n\n            if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n                // update body geometry\n                for (var j = 0; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n                    verticesTranslate(part.vertices, positionImpulse);\n                    boundsUpdate(part.bounds, part.vertices, velocity);\n                    part.position.x += positionImpulseX;\n                    part.position.y += positionImpulseY;\n                }\n\n                // move the body without changing velocity\n                body.positionPrev.x += positionImpulseX;\n                body.positionPrev.y += positionImpulseY;\n\n                if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n                    // reset cached impulse if the body has velocity along it\n                    positionImpulse.x = 0;\n                    positionImpulse.y = 0;\n                } else {\n                    // warm the next iteration\n                    positionImpulse.x *= positionWarming;\n                    positionImpulse.y *= positionWarming;\n                }\n            }\n        }\n    };\n\n    /**\n     * Prepare pairs for velocity solving.\n     * @method preSolveVelocity\n     * @param {pair[]} pairs\n     */\n    Resolver.preSolveVelocity = function(pairs) {\n        var pairsLength = pairs.length,\n            i,\n            j;\n        \n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                normal = collision.normal,\n                tangent = collision.tangent;\n    \n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex,\n                    normalImpulse = contact.normalImpulse,\n                    tangentImpulse = contact.tangentImpulse;\n    \n                if (normalImpulse !== 0 || tangentImpulse !== 0) {\n                    // total impulse from contact\n                    var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                        impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n                    \n                    // apply impulse from contact\n                    if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                        bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                        bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                        bodyA.anglePrev += bodyA.inverseInertia * (\n                            (contactVertex.x - bodyA.position.x) * impulseY\n                            - (contactVertex.y - bodyA.position.y) * impulseX\n                        );\n                    }\n    \n                    if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                        bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                        bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                        bodyB.anglePrev -= bodyB.inverseInertia * (\n                            (contactVertex.x - bodyB.position.x) * impulseY \n                            - (contactVertex.y - bodyB.position.y) * impulseX\n                        );\n                    }\n                }\n            }\n        }\n    };\n\n    /**\n     * Find a solution for pair velocities.\n     * @method solveVelocity\n     * @param {pair[]} pairs\n     * @param {number} delta\n     */\n    Resolver.solveVelocity = function(pairs, delta) {\n        var timeScale = delta / Common._baseDelta,\n            timeScaleSquared = timeScale * timeScale,\n            timeScaleCubed = timeScaleSquared * timeScale,\n            restingThresh = -Resolver._restingThresh * timeScale,\n            restingThreshTangent = Resolver._restingThreshTangent,\n            frictionNormalMultiplier = Resolver._frictionNormalMultiplier * timeScale,\n            frictionMaxStatic = Resolver._frictionMaxStatic,\n            pairsLength = pairs.length,\n            tangentImpulse,\n            maxFriction,\n            i,\n            j;\n\n        for (i = 0; i < pairsLength; i++) {\n            var pair = pairs[i];\n            \n            if (!pair.isActive || pair.isSensor)\n                continue;\n            \n            var collision = pair.collision,\n                bodyA = collision.parentA,\n                bodyB = collision.parentB,\n                bodyAVelocity = bodyA.velocity,\n                bodyBVelocity = bodyB.velocity,\n                normalX = collision.normal.x,\n                normalY = collision.normal.y,\n                tangentX = collision.tangent.x,\n                tangentY = collision.tangent.y,\n                contacts = pair.activeContacts,\n                contactsLength = contacts.length,\n                contactShare = 1 / contactsLength,\n                inverseMassTotal = bodyA.inverseMass + bodyB.inverseMass,\n                friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier;\n\n            // update body velocities\n            bodyAVelocity.x = bodyA.position.x - bodyA.positionPrev.x;\n            bodyAVelocity.y = bodyA.position.y - bodyA.positionPrev.y;\n            bodyBVelocity.x = bodyB.position.x - bodyB.positionPrev.x;\n            bodyBVelocity.y = bodyB.position.y - bodyB.positionPrev.y;\n            bodyA.angularVelocity = bodyA.angle - bodyA.anglePrev;\n            bodyB.angularVelocity = bodyB.angle - bodyB.anglePrev;\n\n            // resolve each contact\n            for (j = 0; j < contactsLength; j++) {\n                var contact = contacts[j],\n                    contactVertex = contact.vertex;\n\n                var offsetAX = contactVertex.x - bodyA.position.x,\n                    offsetAY = contactVertex.y - bodyA.position.y,\n                    offsetBX = contactVertex.x - bodyB.position.x,\n                    offsetBY = contactVertex.y - bodyB.position.y;\n \n                var velocityPointAX = bodyAVelocity.x - offsetAY * bodyA.angularVelocity,\n                    velocityPointAY = bodyAVelocity.y + offsetAX * bodyA.angularVelocity,\n                    velocityPointBX = bodyBVelocity.x - offsetBY * bodyB.angularVelocity,\n                    velocityPointBY = bodyBVelocity.y + offsetBX * bodyB.angularVelocity;\n\n                var relativeVelocityX = velocityPointAX - velocityPointBX,\n                    relativeVelocityY = velocityPointAY - velocityPointBY;\n\n                var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n                    tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n\n                // coulomb friction\n                var normalOverlap = pair.separation + normalVelocity;\n                var normalForce = Math.min(normalOverlap, 1);\n                normalForce = normalOverlap < 0 ? 0 : normalForce;\n\n                var frictionLimit = normalForce * friction;\n\n                if (tangentVelocity < -frictionLimit || tangentVelocity > frictionLimit) {\n                    maxFriction = (tangentVelocity > 0 ? tangentVelocity : -tangentVelocity);\n                    tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleCubed;\n                    \n                    if (tangentImpulse < -maxFriction) {\n                        tangentImpulse = -maxFriction;\n                    } else if (tangentImpulse > maxFriction) {\n                        tangentImpulse = maxFriction;\n                    }\n                } else {\n                    tangentImpulse = tangentVelocity;\n                    maxFriction = frictionMaxStatic;\n                }\n\n                // account for mass, inertia and contact offset\n                var oAcN = offsetAX * normalY - offsetAY * normalX,\n                    oBcN = offsetBX * normalY - offsetBY * normalX,\n                    share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n\n                // raw impulses\n                var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n                tangentImpulse *= share;\n\n                // handle high velocity and resting collisions separately\n                if (normalVelocity < restingThresh) {\n                    // high normal velocity so clear cached contact normal impulse\n                    contact.normalImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // impulse constraint tends to 0\n                    var contactNormalImpulse = contact.normalImpulse;\n                    contact.normalImpulse += normalImpulse;\n                    if (contact.normalImpulse > 0) contact.normalImpulse = 0;\n                    normalImpulse = contact.normalImpulse - contactNormalImpulse;\n                }\n\n                // handle high velocity and resting collisions separately\n                if (tangentVelocity < -restingThreshTangent || tangentVelocity > restingThreshTangent) {\n                    // high tangent velocity so clear cached contact tangent impulse\n                    contact.tangentImpulse = 0;\n                } else {\n                    // solve resting collision constraints using Erin Catto's method (GDC08)\n                    // tangent impulse tends to -tangentSpeed or +tangentSpeed\n                    var contactTangentImpulse = contact.tangentImpulse;\n                    contact.tangentImpulse += tangentImpulse;\n                    if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n                    if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n                    tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n                }\n\n                // total impulse from contact\n                var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n                    impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n                \n                // apply impulse from contact\n                if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                    bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                    bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                    bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n                }\n\n                if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                    bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                    bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                    bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n                }\n            }\n        }\n    };\n\n})();\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __nested_webpack_require_238208__) {\n\n/**\n* The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n*\n* @class Pairs\n*/\n\nvar Pairs = {};\n\nmodule.exports = Pairs;\n\nvar Pair = __nested_webpack_require_238208__(9);\nvar Common = __nested_webpack_require_238208__(0);\n\n(function() {\n\n    /**\n     * Creates a new pairs structure.\n     * @method create\n     * @param {object} options\n     * @return {pairs} A new pairs structure\n     */\n    Pairs.create = function(options) {\n        return Common.extend({ \n            table: {},\n            list: [],\n            collisionStart: [],\n            collisionActive: [],\n            collisionEnd: []\n        }, options);\n    };\n\n    /**\n     * Updates pairs given a list of collisions.\n     * @method update\n     * @param {object} pairs\n     * @param {collision[]} collisions\n     * @param {number} timestamp\n     */\n    Pairs.update = function(pairs, collisions, timestamp) {\n        var pairsList = pairs.list,\n            pairsListLength = pairsList.length,\n            pairsTable = pairs.table,\n            collisionsLength = collisions.length,\n            collisionStart = pairs.collisionStart,\n            collisionEnd = pairs.collisionEnd,\n            collisionActive = pairs.collisionActive,\n            collision,\n            pairIndex,\n            pair,\n            i;\n\n        // clear collision state arrays, but maintain old reference\n        collisionStart.length = 0;\n        collisionEnd.length = 0;\n        collisionActive.length = 0;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pairsList[i].confirmedActive = false;\n        }\n\n        for (i = 0; i < collisionsLength; i++) {\n            collision = collisions[i];\n            pair = collision.pair;\n\n            if (pair) {\n                // pair already exists (but may or may not be active)\n                if (pair.isActive) {\n                    // pair exists and is active\n                    collisionActive.push(pair);\n                } else {\n                    // pair exists but was inactive, so a collision has just started again\n                    collisionStart.push(pair);\n                }\n\n                // update the pair\n                Pair.update(pair, collision, timestamp);\n                pair.confirmedActive = true;\n            } else {\n                // pair did not exist, create a new pair\n                pair = Pair.create(collision, timestamp);\n                pairsTable[pair.id] = pair;\n\n                // push the new pair\n                collisionStart.push(pair);\n                pairsList.push(pair);\n            }\n        }\n\n        // find pairs that are no longer active\n        var removePairIndex = [];\n        pairsListLength = pairsList.length;\n\n        for (i = 0; i < pairsListLength; i++) {\n            pair = pairsList[i];\n            \n            if (!pair.confirmedActive) {\n                Pair.setActive(pair, false, timestamp);\n                collisionEnd.push(pair);\n\n                if (!pair.collision.bodyA.isSleeping && !pair.collision.bodyB.isSleeping) {\n                    removePairIndex.push(i);\n                }\n            }\n        }\n\n        // remove inactive pairs\n        for (i = 0; i < removePairIndex.length; i++) {\n            pairIndex = removePairIndex[i] - i;\n            pair = pairsList[pairIndex];\n            pairsList.splice(pairIndex, 1);\n            delete pairsTable[pair.id];\n        }\n    };\n\n    /**\n     * Clears the given pairs structure.\n     * @method clear\n     * @param {pairs} pairs\n     * @return {pairs} pairs\n     */\n    Pairs.clear = function(pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n    };\n\n})();\n\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __nested_webpack_require_242061__) {\n\nvar Matter = module.exports = __nested_webpack_require_242061__(21);\r\n\r\nMatter.Axes = __nested_webpack_require_242061__(11);\r\nMatter.Bodies = __nested_webpack_require_242061__(12);\r\nMatter.Body = __nested_webpack_require_242061__(4);\r\nMatter.Bounds = __nested_webpack_require_242061__(1);\r\nMatter.Collision = __nested_webpack_require_242061__(8);\r\nMatter.Common = __nested_webpack_require_242061__(0);\r\nMatter.Composite = __nested_webpack_require_242061__(6);\r\nMatter.Composites = __nested_webpack_require_242061__(22);\r\nMatter.Constraint = __nested_webpack_require_242061__(10);\r\nMatter.Contact = __nested_webpack_require_242061__(16);\r\nMatter.Detector = __nested_webpack_require_242061__(13);\r\nMatter.Engine = __nested_webpack_require_242061__(17);\r\nMatter.Events = __nested_webpack_require_242061__(5);\r\nMatter.Grid = __nested_webpack_require_242061__(23);\r\nMatter.Mouse = __nested_webpack_require_242061__(14);\r\nMatter.MouseConstraint = __nested_webpack_require_242061__(24);\r\nMatter.Pair = __nested_webpack_require_242061__(9);\r\nMatter.Pairs = __nested_webpack_require_242061__(19);\r\nMatter.Plugin = __nested_webpack_require_242061__(15);\r\nMatter.Query = __nested_webpack_require_242061__(25);\r\nMatter.Render = __nested_webpack_require_242061__(26);\r\nMatter.Resolver = __nested_webpack_require_242061__(18);\r\nMatter.Runner = __nested_webpack_require_242061__(27);\r\nMatter.SAT = __nested_webpack_require_242061__(28);\r\nMatter.Sleeping = __nested_webpack_require_242061__(7);\r\nMatter.Svg = __nested_webpack_require_242061__(29);\r\nMatter.Vector = __nested_webpack_require_242061__(2);\r\nMatter.Vertices = __nested_webpack_require_242061__(3);\r\nMatter.World = __nested_webpack_require_242061__(30);\r\n\r\n// temporary back compatibility\r\nMatter.Engine.run = Matter.Runner.run;\r\nMatter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\r\n\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __nested_webpack_require_243597__) {\n\n/**\r\n* The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n*\r\n* @class Matter\r\n*/\r\n\r\nvar Matter = {};\r\n\r\nmodule.exports = Matter;\r\n\r\nvar Plugin = __nested_webpack_require_243597__(15);\r\nvar Common = __nested_webpack_require_243597__(0);\r\n\r\n(function() {\r\n\r\n    /**\r\n     * The library name.\r\n     * @property name\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.name = 'matter-js';\r\n\r\n    /**\r\n     * The library version.\r\n     * @property version\r\n     * @readOnly\r\n     * @type {String}\r\n     */\r\n    Matter.version =   true ? \"0.19.0\" : 0;\r\n\r\n    /**\r\n     * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n     * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n     * @property uses\r\n     * @type {Array}\r\n     */\r\n    Matter.uses = [];\r\n\r\n    /**\r\n     * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n     * @property used\r\n     * @readOnly\r\n     * @type {Array}\r\n     */\r\n    Matter.used = [];\r\n\r\n    /**\r\n     * Installs the given plugins on the `Matter` namespace.\r\n     * This is a short-hand for `Plugin.use`, see it for more information.\r\n     * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n     * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n     * @method use\r\n     * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n     */\r\n    Matter.use = function() {\r\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method before\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain before the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.before = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathBefore(Matter, path, func);\r\n    };\r\n\r\n    /**\r\n     * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n     * See also docs for `Common.chain`.\r\n     * @method after\r\n     * @param {string} path The path relative to `Matter`\r\n     * @param {function} func The function to chain after the original\r\n     * @return {function} The chained function that replaced the original\r\n     */\r\n    Matter.after = function(path, func) {\r\n        path = path.replace(/^Matter./, '');\r\n        return Common.chainPathAfter(Matter, path, func);\r\n    };\r\n\r\n})();\r\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __nested_webpack_require_246505__) {\n\n/**\n* The `Matter.Composites` module contains factory methods for creating composite bodies\n* with commonly used configurations (such as stacks and chains).\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Composites\n*/\n\nvar Composites = {};\n\nmodule.exports = Composites;\n\nvar Composite = __nested_webpack_require_246505__(6);\nvar Constraint = __nested_webpack_require_246505__(10);\nvar Common = __nested_webpack_require_246505__(0);\nvar Body = __nested_webpack_require_246505__(4);\nvar Bodies = __nested_webpack_require_246505__(12);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Create a new composite containing bodies created in the callback in a grid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method stack\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.stack = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({ label: 'Stack' }),\n            x = xx,\n            y = yy,\n            lastBody,\n            i = 0;\n\n        for (var row = 0; row < rows; row++) {\n            var maxHeight = 0;\n            \n            for (var column = 0; column < columns; column++) {\n                var body = callback(x, y, column, row, lastBody, i);\n                    \n                if (body) {\n                    var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                        bodyWidth = body.bounds.max.x - body.bounds.min.x; \n\n                    if (bodyHeight > maxHeight)\n                        maxHeight = bodyHeight;\n                    \n                    Body.translate(body, { x: bodyWidth * 0.5, y: bodyHeight * 0.5 });\n\n                    x = body.bounds.max.x + columnGap;\n\n                    Composite.addBody(stack, body);\n                    \n                    lastBody = body;\n                    i += 1;\n                } else {\n                    x += columnGap;\n                }\n            }\n            \n            y += maxHeight + rowGap;\n            x = xx;\n        }\n\n        return stack;\n    };\n    \n    /**\n     * Chains all bodies in the given composite together using constraints.\n     * @method chain\n     * @param {composite} composite\n     * @param {number} xOffsetA\n     * @param {number} yOffsetA\n     * @param {number} xOffsetB\n     * @param {number} yOffsetB\n     * @param {object} options\n     * @return {composite} A new composite containing objects chained together with constraints\n     */\n    Composites.chain = function(composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        \n        for (var i = 1; i < bodies.length; i++) {\n            var bodyA = bodies[i - 1],\n                bodyB = bodies[i],\n                bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n                bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x, \n                bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n                bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n        \n            var defaults = {\n                bodyA: bodyA,\n                pointA: { x: bodyAWidth * xOffsetA, y: bodyAHeight * yOffsetA },\n                bodyB: bodyB,\n                pointB: { x: bodyBWidth * xOffsetB, y: bodyBHeight * yOffsetB }\n            };\n            \n            var constraint = Common.extend(defaults, options);\n        \n            Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n\n        composite.label += ' Chain';\n        \n        return composite;\n    };\n\n    /**\n     * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n     * @method mesh\n     * @param {composite} composite\n     * @param {number} columns\n     * @param {number} rows\n     * @param {boolean} crossBrace\n     * @param {object} options\n     * @return {composite} The composite containing objects meshed together with constraints\n     */\n    Composites.mesh = function(composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n            row,\n            col,\n            bodyA,\n            bodyB,\n            bodyC;\n        \n        for (row = 0; row < rows; row++) {\n            for (col = 1; col < columns; col++) {\n                bodyA = bodies[(col - 1) + (row * columns)];\n                bodyB = bodies[col + (row * columns)];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n            }\n\n            if (row > 0) {\n                for (col = 0; col < columns; col++) {\n                    bodyA = bodies[col + ((row - 1) * columns)];\n                    bodyB = bodies[col + (row * columns)];\n                    Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyA, bodyB: bodyB }, options)));\n\n                    if (crossBrace && col > 0) {\n                        bodyC = bodies[(col - 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n\n                    if (crossBrace && col < columns - 1) {\n                        bodyC = bodies[(col + 1) + ((row - 1) * columns)];\n                        Composite.addConstraint(composite, Constraint.create(Common.extend({ bodyA: bodyC, bodyB: bodyB }, options)));\n                    }\n                }\n            }\n        }\n\n        composite.label += ' Mesh';\n        \n        return composite;\n    };\n    \n    /**\n     * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n     * This function uses the body's bounds to prevent overlaps.\n     * @method pyramid\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {function} callback\n     * @return {composite} A new composite containing objects created in the callback\n     */\n    Composites.pyramid = function(xx, yy, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y, column, row, lastBody, i) {\n            var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n                lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n            \n            if (row > actualRows)\n                return;\n            \n            // reverse row order\n            row = actualRows - row;\n            \n            var start = row,\n                end = columns - 1 - row;\n\n            if (column < start || column > end)\n                return;\n            \n            // retroactively fix the first body's position, since width was unknown\n            if (i === 1) {\n                Body.translate(lastBody, { x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth, y: 0 });\n            }\n\n            var xOffset = lastBody ? column * lastBodyWidth : 0;\n            \n            return callback(xx + xOffset + column * columnGap, y, column, row, lastBody, i);\n        });\n    };\n\n    /**\n     * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to newtonsCradle example\n     * @method newtonsCradle\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} number\n     * @param {number} size\n     * @param {number} length\n     * @return {composite} A new composite newtonsCradle body\n     */\n    Composites.newtonsCradle = function(xx, yy, number, size, length) {\n        var newtonsCradle = Composite.create({ label: 'Newtons Cradle' });\n\n        for (var i = 0; i < number; i++) {\n            var separation = 1.9,\n                circle = Bodies.circle(xx + i * (size * separation), yy + length, size, \n                    { inertia: Infinity, restitution: 1, friction: 0, frictionAir: 0.0001, slop: 1 }),\n                constraint = Constraint.create({ pointA: { x: xx + i * (size * separation), y: yy }, bodyB: circle });\n\n            Composite.addBody(newtonsCradle, circle);\n            Composite.addConstraint(newtonsCradle, constraint);\n        }\n\n        return newtonsCradle;\n    };\n\n    deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n    \n    /**\n     * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n     * @deprecated moved to car example\n     * @method car\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} width\n     * @param {number} height\n     * @param {number} wheelSize\n     * @return {composite} A new composite car body\n     */\n    Composites.car = function(xx, yy, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n            wheelBase = 20,\n            wheelAOffset = -width * 0.5 + wheelBase,\n            wheelBOffset = width * 0.5 - wheelBase,\n            wheelYOffset = 0;\n    \n        var car = Composite.create({ label: 'Car' }),\n            body = Bodies.rectangle(xx, yy, width, height, { \n                collisionFilter: {\n                    group: group\n                },\n                chamfer: {\n                    radius: height * 0.5\n                },\n                density: 0.0002\n            });\n    \n        var wheelA = Bodies.circle(xx + wheelAOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var wheelB = Bodies.circle(xx + wheelBOffset, yy + wheelYOffset, wheelSize, { \n            collisionFilter: {\n                group: group\n            },\n            friction: 0.8\n        });\n                    \n        var axelA = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelAOffset, y: wheelYOffset },\n            bodyA: wheelA,\n            stiffness: 1,\n            length: 0\n        });\n                        \n        var axelB = Constraint.create({\n            bodyB: body,\n            pointB: { x: wheelBOffset, y: wheelYOffset },\n            bodyA: wheelB,\n            stiffness: 1,\n            length: 0\n        });\n        \n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n\n        return car;\n    };\n\n    deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n    /**\n     * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n     * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n     * @deprecated moved to softBody and cloth examples\n     * @method softBody\n     * @param {number} xx\n     * @param {number} yy\n     * @param {number} columns\n     * @param {number} rows\n     * @param {number} columnGap\n     * @param {number} rowGap\n     * @param {boolean} crossBrace\n     * @param {number} particleRadius\n     * @param {} particleOptions\n     * @param {} constraintOptions\n     * @return {composite} A new composite softBody\n     */\n    Composites.softBody = function(xx, yy, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({ inertia: Infinity }, particleOptions);\n        constraintOptions = Common.extend({ stiffness: 0.2, render: { type: 'line', anchors: false } }, constraintOptions);\n\n        var softBody = Composites.stack(xx, yy, columns, rows, columnGap, rowGap, function(x, y) {\n            return Bodies.circle(x, y, particleRadius, particleOptions);\n        });\n\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n\n        softBody.label = 'Soft Body';\n\n        return softBody;\n    };\n\n    deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n})();\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __nested_webpack_require_259115__) {\n\n/**\n* This module has now been replaced by `Matter.Detector`.\n*\n* All usage should be migrated to `Matter.Detector` or another alternative.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n*\n* @class Grid\n* @deprecated\n*/\n\nvar Grid = {};\n\nmodule.exports = Grid;\n\nvar Pair = __nested_webpack_require_259115__(9);\nvar Common = __nested_webpack_require_259115__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Creates a new grid.\n     * @deprecated replaced by Matter.Detector\n     * @method create\n     * @param {} options\n     * @return {grid} A new grid\n     */\n    Grid.create = function(options) {\n        var defaults = {\n            buckets: {},\n            pairs: {},\n            pairsList: [],\n            bucketWidth: 48,\n            bucketHeight: 48\n        };\n\n        return Common.extend(defaults, options);\n    };\n\n    /**\n     * The width of a single grid bucket.\n     *\n     * @property bucketWidth\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * The height of a single grid bucket.\n     *\n     * @property bucketHeight\n     * @type number\n     * @default 48\n     */\n\n    /**\n     * Updates the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method update\n     * @param {grid} grid\n     * @param {body[]} bodies\n     * @param {engine} engine\n     * @param {boolean} forceUpdate\n     */\n    Grid.update = function(grid, bodies, engine, forceUpdate) {\n        var i, col, row,\n            world = engine.world,\n            buckets = grid.buckets,\n            bucket,\n            bucketId,\n            gridChanged = false;\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.isSleeping && !forceUpdate)\n                continue;\n\n            // temporary back compatibility bounds check\n            if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x\n                || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y))\n                continue;\n\n            var newRegion = Grid._getRegion(grid, body);\n\n            // if the body has changed grid region\n            if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n\n                if (!body.region || forceUpdate)\n                    body.region = newRegion;\n\n                var union = Grid._regionUnion(newRegion, body.region);\n\n                // update grid buckets affected by region change\n                // iterate over the union of both regions\n                for (col = union.startCol; col <= union.endCol; col++) {\n                    for (row = union.startRow; row <= union.endRow; row++) {\n                        bucketId = Grid._getBucketId(col, row);\n                        bucket = buckets[bucketId];\n\n                        var isInsideNewRegion = (col >= newRegion.startCol && col <= newRegion.endCol\n                                                && row >= newRegion.startRow && row <= newRegion.endRow);\n\n                        var isInsideOldRegion = (col >= body.region.startCol && col <= body.region.endCol\n                                                && row >= body.region.startRow && row <= body.region.endRow);\n\n                        // remove from old region buckets\n                        if (!isInsideNewRegion && isInsideOldRegion) {\n                            if (isInsideOldRegion) {\n                                if (bucket)\n                                    Grid._bucketRemoveBody(grid, bucket, body);\n                            }\n                        }\n\n                        // add to new region buckets\n                        if (body.region === newRegion || (isInsideNewRegion && !isInsideOldRegion) || forceUpdate) {\n                            if (!bucket)\n                                bucket = Grid._createBucket(buckets, bucketId);\n                            Grid._bucketAddBody(grid, bucket, body);\n                        }\n                    }\n                }\n\n                // set the new region\n                body.region = newRegion;\n\n                // flag changes so we can update pairs\n                gridChanged = true;\n            }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged)\n            grid.pairsList = Grid._createActivePairsList(grid);\n    };\n\n    deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');\n\n    /**\n     * Clears the grid.\n     * @deprecated replaced by Matter.Detector\n     * @method clear\n     * @param {grid} grid\n     */\n    Grid.clear = function(grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n    };\n\n    deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');\n\n    /**\n     * Finds the union of two regions.\n     * @method _regionUnion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} regionA\n     * @param {} regionB\n     * @return {} region\n     */\n    Grid._regionUnion = function(regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n            endCol = Math.max(regionA.endCol, regionB.endCol),\n            startRow = Math.min(regionA.startRow, regionB.startRow),\n            endRow = Math.max(regionA.endRow, regionB.endRow);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Gets the region a given body falls in for a given grid.\n     * @method _getRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} body\n     * @return {} region\n     */\n    Grid._getRegion = function(grid, body) {\n        var bounds = body.bounds,\n            startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n            endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n            startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n            endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n    };\n\n    /**\n     * Creates a region.\n     * @method _createRegion\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} startCol\n     * @param {} endCol\n     * @param {} startRow\n     * @param {} endRow\n     * @return {} region\n     */\n    Grid._createRegion = function(startCol, endCol, startRow, endRow) {\n        return { \n            id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n            startCol: startCol, \n            endCol: endCol, \n            startRow: startRow, \n            endRow: endRow \n        };\n    };\n\n    /**\n     * Gets the bucket id at the given position.\n     * @method _getBucketId\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} column\n     * @param {} row\n     * @return {string} bucket id\n     */\n    Grid._getBucketId = function(column, row) {\n        return 'C' + column + 'R' + row;\n    };\n\n    /**\n     * Creates a bucket.\n     * @method _createBucket\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} buckets\n     * @param {} bucketId\n     * @return {} bucket\n     */\n    Grid._createBucket = function(buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n    };\n\n    /**\n     * Adds a body to a bucket.\n     * @method _bucketAddBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketAddBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            bucketLength = bucket.length,\n            i;\n\n        // add new pairs\n        for (i = 0; i < bucketLength; i++) {\n            var bodyB = bucket[i];\n\n            if (body.id === bodyB.id || (body.isStatic && bodyB.isStatic))\n                continue;\n\n            // keep track of the number of buckets the pair exists in\n            // important for Grid.update to work\n            var id = pairId(body, bodyB),\n                pair = gridPairs[id];\n\n            if (pair) {\n                pair[2] += 1;\n            } else {\n                gridPairs[id] = [body, bodyB, 1];\n            }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n    };\n\n    /**\n     * Removes a body from a bucket.\n     * @method _bucketRemoveBody\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @param {} bucket\n     * @param {} body\n     */\n    Grid._bucketRemoveBody = function(grid, bucket, body) {\n        var gridPairs = grid.pairs,\n            pairId = Pair.id,\n            i;\n\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n\n        var bucketLength = bucket.length;\n\n        // update pair counts\n        for (i = 0; i < bucketLength; i++) {\n            // keep track of the number of buckets the pair exists in\n            // important for _createActivePairsList to work\n            var pair = gridPairs[pairId(body, bucket[i])];\n\n            if (pair)\n                pair[2] -= 1;\n        }\n    };\n\n    /**\n     * Generates a list of the active pairs in the grid.\n     * @method _createActivePairsList\n     * @deprecated replaced by Matter.Detector\n     * @private\n     * @param {} grid\n     * @return [] pairs\n     */\n    Grid._createActivePairsList = function(grid) {\n        var pair,\n            gridPairs = grid.pairs,\n            pairKeys = Common.keys(gridPairs),\n            pairKeysLength = pairKeys.length,\n            pairs = [],\n            k;\n\n        // iterate over grid.pairs\n        for (k = 0; k < pairKeysLength; k++) {\n            pair = gridPairs[pairKeys[k]];\n\n            // if pair exists in at least one bucket\n            // it is a pair that needs further collision testing so push it\n            if (pair[2] > 0) {\n                pairs.push(pair);\n            } else {\n                delete gridPairs[pairKeys[k]];\n            }\n        }\n\n        return pairs;\n    };\n    \n})();\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __nested_webpack_require_269445__) {\n\n/**\n* The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n* Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class MouseConstraint\n*/\n\nvar MouseConstraint = {};\n\nmodule.exports = MouseConstraint;\n\nvar Vertices = __nested_webpack_require_269445__(3);\nvar Sleeping = __nested_webpack_require_269445__(7);\nvar Mouse = __nested_webpack_require_269445__(14);\nvar Events = __nested_webpack_require_269445__(5);\nvar Detector = __nested_webpack_require_269445__(13);\nvar Constraint = __nested_webpack_require_269445__(10);\nvar Composite = __nested_webpack_require_269445__(6);\nvar Common = __nested_webpack_require_269445__(0);\nvar Bounds = __nested_webpack_require_269445__(1);\n\n(function() {\n\n    /**\n     * Creates a new mouse constraint.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {engine} engine\n     * @param {} options\n     * @return {MouseConstraint} A new MouseConstraint\n     */\n    MouseConstraint.create = function(engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n\n        if (!mouse) {\n            if (engine && engine.render && engine.render.canvas) {\n                mouse = Mouse.create(engine.render.canvas);\n            } else if (options && options.element) {\n                mouse = Mouse.create(options.element);\n            } else {\n                mouse = Mouse.create();\n                Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n            }\n        }\n\n        var constraint = Constraint.create({ \n            label: 'Mouse Constraint',\n            pointA: mouse.position,\n            pointB: { x: 0, y: 0 },\n            length: 0.01, \n            stiffness: 0.1,\n            angularStiffness: 1,\n            render: {\n                strokeStyle: '#90EE90',\n                lineWidth: 3\n            }\n        });\n\n        var defaults = {\n            type: 'mouseConstraint',\n            mouse: mouse,\n            element: null,\n            body: null,\n            constraint: constraint,\n            collisionFilter: {\n                category: 0x0001,\n                mask: 0xFFFFFFFF,\n                group: 0\n            }\n        };\n\n        var mouseConstraint = Common.extend(defaults, options);\n\n        Events.on(engine, 'beforeUpdate', function() {\n            var allBodies = Composite.allBodies(engine.world);\n            MouseConstraint.update(mouseConstraint, allBodies);\n            MouseConstraint._triggerEvents(mouseConstraint);\n        });\n\n        return mouseConstraint;\n    };\n\n    /**\n     * Updates the given mouse constraint.\n     * @private\n     * @method update\n     * @param {MouseConstraint} mouseConstraint\n     * @param {body[]} bodies\n     */\n    MouseConstraint.update = function(mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n            constraint = mouseConstraint.constraint,\n            body = mouseConstraint.body;\n\n        if (mouse.button === 0) {\n            if (!constraint.bodyB) {\n                for (var i = 0; i < bodies.length; i++) {\n                    body = bodies[i];\n                    if (Bounds.contains(body.bounds, mouse.position) \n                            && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                        for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                            var part = body.parts[j];\n                            if (Vertices.contains(part.vertices, mouse.position)) {\n                                constraint.pointA = mouse.position;\n                                constraint.bodyB = mouseConstraint.body = body;\n                                constraint.pointB = { x: mouse.position.x - body.position.x, y: mouse.position.y - body.position.y };\n                                constraint.angleB = body.angle;\n\n                                Sleeping.set(body, false);\n                                Events.trigger(mouseConstraint, 'startdrag', { mouse: mouse, body: body });\n\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Sleeping.set(constraint.bodyB, false);\n                constraint.pointA = mouse.position;\n            }\n        } else {\n            constraint.bodyB = mouseConstraint.body = null;\n            constraint.pointB = null;\n\n            if (body)\n                Events.trigger(mouseConstraint, 'enddrag', { mouse: mouse, body: body });\n        }\n    };\n\n    /**\n     * Triggers mouse constraint events.\n     * @method _triggerEvents\n     * @private\n     * @param {mouse} mouseConstraint\n     */\n    MouseConstraint._triggerEvents = function(mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n            mouseEvents = mouse.sourceEvents;\n\n        if (mouseEvents.mousemove)\n            Events.trigger(mouseConstraint, 'mousemove', { mouse: mouse });\n\n        if (mouseEvents.mousedown)\n            Events.trigger(mouseConstraint, 'mousedown', { mouse: mouse });\n\n        if (mouseEvents.mouseup)\n            Events.trigger(mouseConstraint, 'mouseup', { mouse: mouse });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired when the mouse has moved (or a touch moves) during the last step\n    *\n    * @event mousemove\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is down (or a touch has started) during the last step\n    *\n    * @event mousedown\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the mouse is up (or a touch has ended) during the last step\n    *\n    * @event mouseup\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user starts dragging a body\n    *\n    * @event startdrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired when the user ends dragging a body\n    *\n    * @event enddrag\n    * @param {} event An event object\n    * @param {mouse} event.mouse The engine's mouse instance\n    * @param {body} event.body The body that has stopped being dragged\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A `String` denoting the type of object.\n     *\n     * @property type\n     * @type string\n     * @default \"constraint\"\n     * @readOnly\n     */\n\n    /**\n     * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n     *\n     * @property mouse\n     * @type mouse\n     * @default mouse\n     */\n\n    /**\n     * The `Body` that is currently being moved by the user, or `null` if no body.\n     *\n     * @property body\n     * @type body\n     * @default null\n     */\n\n    /**\n     * The `Constraint` object that is used to move the body during interaction.\n     *\n     * @property constraint\n     * @type constraint\n     */\n\n    /**\n     * An `Object` that specifies the collision filter properties.\n     * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n     * See `body.collisionFilter` for more information.\n     *\n     * @property collisionFilter\n     * @type object\n     */\n\n})();\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __nested_webpack_require_277940__) {\n\n/**\n* The `Matter.Query` module contains methods for performing collision queries.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Query\n*/\n\nvar Query = {};\n\nmodule.exports = Query;\n\nvar Vector = __nested_webpack_require_277940__(2);\nvar Collision = __nested_webpack_require_277940__(8);\nvar Bounds = __nested_webpack_require_277940__(1);\nvar Bodies = __nested_webpack_require_277940__(12);\nvar Vertices = __nested_webpack_require_277940__(3);\n\n(function() {\n\n    /**\n     * Returns a list of collisions between `body` and `bodies`.\n     * @method collides\n     * @param {body} body\n     * @param {body[]} bodies\n     * @return {collision[]} Collisions\n     */\n    Query.collides = function(body, bodies) {\n        var collisions = [],\n            bodiesLength = bodies.length,\n            bounds = body.bounds,\n            collides = Collision.collides,\n            overlaps = Bounds.overlaps;\n\n        for (var i = 0; i < bodiesLength; i++) {\n            var bodyA = bodies[i],\n                partsALength = bodyA.parts.length,\n                partsAStart = partsALength === 1 ? 0 : 1;\n            \n            if (overlaps(bodyA.bounds, bounds)) {\n                for (var j = partsAStart; j < partsALength; j++) {\n                    var part = bodyA.parts[j];\n\n                    if (overlaps(part.bounds, bounds)) {\n                        var collision = collides(part, body);\n\n                        if (collision) {\n                            collisions.push(collision);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return collisions;\n    };\n\n    /**\n     * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n     * @method ray\n     * @param {body[]} bodies\n     * @param {vector} startPoint\n     * @param {vector} endPoint\n     * @param {number} [rayWidth]\n     * @return {collision[]} Collisions\n     */\n    Query.ray = function(bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n\n        var rayAngle = Vector.angle(startPoint, endPoint),\n            rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n            rayX = (endPoint.x + startPoint.x) * 0.5,\n            rayY = (endPoint.y + startPoint.y) * 0.5,\n            ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, { angle: rayAngle }),\n            collisions = Query.collides(ray, bodies);\n\n        for (var i = 0; i < collisions.length; i += 1) {\n            var collision = collisions[i];\n            collision.body = collision.bodyB = collision.bodyA;            \n        }\n\n        return collisions;\n    };\n\n    /**\n     * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n     * @method region\n     * @param {body[]} bodies\n     * @param {bounds} bounds\n     * @param {bool} [outside=false]\n     * @return {body[]} The bodies matching the query\n     */\n    Query.region = function(bodies, bounds, outside) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                overlaps = Bounds.overlaps(body.bounds, bounds);\n            if ((overlaps && !outside) || (!overlaps && outside))\n                result.push(body);\n        }\n\n        return result;\n    };\n\n    /**\n     * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n     * @method point\n     * @param {body[]} bodies\n     * @param {vector} point\n     * @return {body[]} The bodies matching the query\n     */\n    Query.point = function(bodies, point) {\n        var result = [];\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            \n            if (Bounds.contains(body.bounds, point)) {\n                for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n                    var part = body.parts[j];\n\n                    if (Bounds.contains(part.bounds, point)\n                        && Vertices.contains(part.vertices, point)) {\n                        result.push(body);\n                        break;\n                    }\n                }\n            }\n        }\n\n        return result;\n    };\n\n})();\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports, __nested_webpack_require_282315__) {\n\n/**\n* The `Matter.Render` module is a simple canvas based renderer for visualising instances of `Matter.Engine`.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n*\n* @class Render\n*/\n\nvar Render = {};\n\nmodule.exports = Render;\n\nvar Body = __nested_webpack_require_282315__(4);\nvar Common = __nested_webpack_require_282315__(0);\nvar Composite = __nested_webpack_require_282315__(6);\nvar Bounds = __nested_webpack_require_282315__(1);\nvar Events = __nested_webpack_require_282315__(5);\nvar Vector = __nested_webpack_require_282315__(2);\nvar Mouse = __nested_webpack_require_282315__(14);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame\n                                      || function(callback){ window.setTimeout(function() { callback(Common.now()); }, 1000 / 60); };\n\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame\n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    Render._goodFps = 30;\n    Render._goodDelta = 1000 / 60;\n\n    /**\n     * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * All properties have default values, and many are pre-calculated automatically based on other properties.\n     * See the properties section below for detailed information on what you can pass via the `options` object.\n     * @method create\n     * @param {object} [options]\n     * @return {render} A new renderer\n     */\n    Render.create = function(options) {\n        var defaults = {\n            engine: null,\n            element: null,\n            canvas: null,\n            mouse: null,\n            frameRequestId: null,\n            timing: {\n                historySize: 60,\n                delta: 0,\n                deltaHistory: [],\n                lastTime: 0,\n                lastTimestamp: 0,\n                lastElapsed: 0,\n                timestampElapsed: 0,\n                timestampElapsedHistory: [],\n                engineDeltaHistory: [],\n                engineElapsedHistory: [],\n                elapsedHistory: []\n            },\n            options: {\n                width: 800,\n                height: 600,\n                pixelRatio: 1,\n                background: '#14151f',\n                wireframeBackground: '#14151f',\n                hasBounds: !!options.bounds,\n                enabled: true,\n                wireframes: true,\n                showSleeping: true,\n                showDebug: false,\n                showStats: false,\n                showPerformance: false,\n                showBounds: false,\n                showVelocity: false,\n                showCollisions: false,\n                showSeparations: false,\n                showAxes: false,\n                showPositions: false,\n                showAngleIndicator: false,\n                showIds: false,\n                showVertexNumbers: false,\n                showConvexHulls: false,\n                showInternalEdges: false,\n                showMousePosition: false\n            }\n        };\n\n        var render = Common.extend(defaults, options);\n\n        if (render.canvas) {\n            render.canvas.width = render.options.width || render.canvas.width;\n            render.canvas.height = render.options.height || render.canvas.height;\n        }\n\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n\n        render.bounds = render.bounds || {\n            min: {\n                x: 0,\n                y: 0\n            },\n            max: {\n                x: render.canvas.width,\n                y: render.canvas.height\n            }\n        };\n\n        // for temporary back compatibility only\n        render.controller = Render;\n        render.options.showBroadphase = false;\n\n        if (render.options.pixelRatio !== 1) {\n            Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n\n        if (Common.isElement(render.element)) {\n            render.element.appendChild(render.canvas);\n        }\n\n        return render;\n    };\n\n    /**\n     * Continuously updates the render canvas on the `requestAnimationFrame` event.\n     * @method run\n     * @param {render} render\n     */\n    Render.run = function(render) {\n        (function loop(time){\n            render.frameRequestId = _requestAnimationFrame(loop);\n            \n            _updateTiming(render, time);\n\n            Render.world(render, time);\n\n            if (render.options.showStats || render.options.showDebug) {\n                Render.stats(render, render.context, time);\n            }\n\n            if (render.options.showPerformance || render.options.showDebug) {\n                Render.performance(render, render.context, time);\n            }\n        })();\n    };\n\n    /**\n     * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n     * @method stop\n     * @param {render} render\n     */\n    Render.stop = function(render) {\n        _cancelAnimationFrame(render.frameRequestId);\n    };\n\n    /**\n     * Sets the pixel ratio of the renderer and updates the canvas.\n     * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n     * @method setPixelRatio\n     * @param {render} render\n     * @param {number} pixelRatio\n     */\n    Render.setPixelRatio = function(render, pixelRatio) {\n        var options = render.options,\n            canvas = render.canvas;\n\n        if (pixelRatio === 'auto') {\n            pixelRatio = _getPixelRatio(canvas);\n        }\n\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n    };\n\n    /**\n     * Positions and sizes the viewport around the given object bounds.\n     * Objects must have at least one of the following properties:\n     * - `object.bounds`\n     * - `object.position`\n     * - `object.min` and `object.max`\n     * - `object.x` and `object.y`\n     * @method lookAt\n     * @param {render} render\n     * @param {object[]} objects\n     * @param {vector} [padding]\n     * @param {bool} [center=true]\n     */\n    Render.lookAt = function(render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n            x: 0,\n            y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n            min: { x: Infinity, y: Infinity },\n            max: { x: -Infinity, y: -Infinity }\n        };\n\n        for (var i = 0; i < objects.length; i += 1) {\n            var object = objects[i],\n                min = object.bounds ? object.bounds.min : (object.min || object.position || object),\n                max = object.bounds ? object.bounds.max : (object.max || object.position || object);\n\n            if (min && max) {\n                if (min.x < bounds.min.x)\n                    bounds.min.x = min.x;\n\n                if (max.x > bounds.max.x)\n                    bounds.max.x = max.x;\n\n                if (min.y < bounds.min.y)\n                    bounds.min.y = min.y;\n\n                if (max.y > bounds.max.y)\n                    bounds.max.y = max.y;\n            }\n        }\n\n        // find ratios\n        var width = (bounds.max.x - bounds.min.x) + 2 * padding.x,\n            height = (bounds.max.y - bounds.min.y) + 2 * padding.y,\n            viewHeight = render.canvas.height,\n            viewWidth = render.canvas.width,\n            outerRatio = viewWidth / viewHeight,\n            innerRatio = width / height,\n            scaleX = 1,\n            scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n            scaleY = innerRatio / outerRatio;\n        } else {\n            scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n            render.bounds.min.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.max.x += width * 0.5 - (width * scaleX) * 0.5;\n            render.bounds.min.y += height * 0.5 - (height * scaleY) * 0.5;\n            render.bounds.max.y += height * 0.5 - (height * scaleY) * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n                x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n                y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n            });\n\n            Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n    };\n\n    /**\n     * Applies viewport transforms based on `render.bounds` to a render context.\n     * @method startViewTransform\n     * @param {render} render\n     */\n    Render.startViewTransform = function(render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n\n        render.context.setTransform(\n            render.options.pixelRatio / boundsScaleX, 0, 0, \n            render.options.pixelRatio / boundsScaleY, 0, 0\n        );\n        \n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n    };\n\n    /**\n     * Resets all transforms on the render context.\n     * @method endViewTransform\n     * @param {render} render\n     */\n    Render.endViewTransform = function(render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n    };\n\n    /**\n     * Renders the given `engine`'s `Matter.World` object.\n     * This is the entry point for all rendering and should be called every time the scene changes.\n     * @method world\n     * @param {render} render\n     */\n    Render.world = function(render, time) {\n        var startTime = Common.now(),\n            engine = render.engine,\n            world = engine.world,\n            canvas = render.canvas,\n            context = render.context,\n            options = render.options,\n            timing = render.timing;\n\n        var allBodies = Composite.allBodies(world),\n            allConstraints = Composite.allConstraints(world),\n            background = options.wireframes ? options.wireframeBackground : options.background,\n            bodies = [],\n            constraints = [],\n            i;\n\n        var event = {\n            timestamp: engine.timing.timestamp\n        };\n\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background)\n            _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n            // filter out bodies that are not in view\n            for (i = 0; i < allBodies.length; i++) {\n                var body = allBodies[i];\n                if (Bounds.overlaps(body.bounds, render.bounds))\n                    bodies.push(body);\n            }\n\n            // filter out constraints that are not in view\n            for (i = 0; i < allConstraints.length; i++) {\n                var constraint = allConstraints[i],\n                    bodyA = constraint.bodyA,\n                    bodyB = constraint.bodyB,\n                    pointAWorld = constraint.pointA,\n                    pointBWorld = constraint.pointB;\n\n                if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n                if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n\n                if (!pointAWorld || !pointBWorld)\n                    continue;\n\n                if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld))\n                    constraints.push(constraint);\n            }\n\n            // transform the view\n            Render.startViewTransform(render);\n\n            // update mouse\n            if (render.mouse) {\n                Mouse.setScale(render.mouse, {\n                    x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n                    y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n                });\n\n                Mouse.setOffset(render.mouse, render.bounds.min);\n            }\n        } else {\n            constraints = allConstraints;\n            bodies = allBodies;\n\n            if (render.options.pixelRatio !== 1) {\n                render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n            }\n        }\n\n        if (!options.wireframes || (engine.enableSleeping && options.showSleeping)) {\n            // fully featured rendering of bodies\n            Render.bodies(render, bodies, context);\n        } else {\n            if (options.showConvexHulls)\n                Render.bodyConvexHulls(render, bodies, context);\n\n            // optimised method for wireframes only\n            Render.bodyWireframes(render, bodies, context);\n        }\n\n        if (options.showBounds)\n            Render.bodyBounds(render, bodies, context);\n\n        if (options.showAxes || options.showAngleIndicator)\n            Render.bodyAxes(render, bodies, context);\n\n        if (options.showPositions)\n            Render.bodyPositions(render, bodies, context);\n\n        if (options.showVelocity)\n            Render.bodyVelocity(render, bodies, context);\n\n        if (options.showIds)\n            Render.bodyIds(render, bodies, context);\n\n        if (options.showSeparations)\n            Render.separations(render, engine.pairs.list, context);\n\n        if (options.showCollisions)\n            Render.collisions(render, engine.pairs.list, context);\n\n        if (options.showVertexNumbers)\n            Render.vertexNumbers(render, bodies, context);\n\n        if (options.showMousePosition)\n            Render.mousePosition(render, render.mouse, context);\n\n        Render.constraints(constraints, context);\n\n        if (options.hasBounds) {\n            // revert view transforms\n            Render.endViewTransform(render);\n        }\n\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n    };\n\n    /**\n     * Renders statistics about the engine and world useful for debugging.\n     * @private\n     * @method stats\n     * @param {render} render\n     * @param {RenderingContext} context\n     * @param {Number} time\n     */\n    Render.stats = function(render, context, time) {\n        var engine = render.engine,\n            world = engine.world,\n            bodies = Composite.allBodies(world),\n            parts = 0,\n            width = 55,\n            height = 44,\n            x = 0,\n            y = 0;\n        \n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n            parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n            'Part': parts,\n            'Body': bodies.length,\n            'Cons': Composite.allConstraints(world).length,\n            'Comp': Composite.allComposites(world).length,\n            'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n            var section = sections[key];\n            // label\n            context.fillStyle = '#aaa';\n            context.fillText(key, x + width, y + 8);\n\n            // value\n            context.fillStyle = '#eee';\n            context.fillText(section, x + width, y + 26);\n\n            x += width;\n        }\n    };\n\n    /**\n     * Renders engine and render performance information.\n     * @private\n     * @method performance\n     * @param {render} render\n     * @param {RenderingContext} context\n     */\n    Render.performance = function(render, context) {\n        var engine = render.engine,\n            timing = render.timing,\n            deltaHistory = timing.deltaHistory,\n            elapsedHistory = timing.elapsedHistory,\n            timestampElapsedHistory = timing.timestampElapsedHistory,\n            engineDeltaHistory = timing.engineDeltaHistory,\n            engineElapsedHistory = timing.engineElapsedHistory,\n            lastEngineDelta = engine.timing.lastDelta;\n        \n        var deltaMean = _mean(deltaHistory),\n            elapsedMean = _mean(elapsedHistory),\n            engineDeltaMean = _mean(engineDeltaHistory),\n            engineElapsedMean = _mean(engineElapsedHistory),\n            timestampElapsedMean = _mean(timestampElapsedHistory),\n            rateMean = (timestampElapsedMean / deltaMean) || 0,\n            fps = (1000 / deltaMean) || 0;\n\n        var graphHeight = 4,\n            gap = 12,\n            width = 60,\n            height = 34,\n            x = 10,\n            y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 4 + width * 5 + 22, height);\n\n        // show FPS\n        Render.status(\n            context, x, y, width, graphHeight, deltaHistory.length, \n            Math.round(fps) + ' fps', \n            fps / Render._goodFps,\n            function(i) { return (deltaHistory[i] / deltaMean) - 1; }\n        );\n\n        // show engine delta\n        Render.status(\n            context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length,\n            lastEngineDelta.toFixed(2) + ' dt', \n            Render._goodDelta / lastEngineDelta,\n            function(i) { return (engineDeltaHistory[i] / engineDeltaMean) - 1; }\n        );\n\n        // show engine update time\n        Render.status(\n            context, x + (gap + width) * 2, y, width, graphHeight, engineElapsedHistory.length,\n            engineElapsedMean.toFixed(2) + ' ut', \n            1 - (engineElapsedMean / Render._goodFps),\n            function(i) { return (engineElapsedHistory[i] / engineElapsedMean) - 1; }\n        );\n\n        // show render time\n        Render.status(\n            context, x + (gap + width) * 3, y, width, graphHeight, elapsedHistory.length,\n            elapsedMean.toFixed(2) + ' rt', \n            1 - (elapsedMean / Render._goodFps),\n            function(i) { return (elapsedHistory[i] / elapsedMean) - 1; }\n        );\n\n        // show effective speed\n        Render.status(\n            context, x + (gap + width) * 4, y, width, graphHeight, timestampElapsedHistory.length, \n            rateMean.toFixed(2) + ' x', \n            rateMean * rateMean * rateMean,\n            function(i) { return (((timestampElapsedHistory[i] / deltaHistory[i]) / rateMean) || 0) - 1; }\n        );\n    };\n\n    /**\n     * Renders a label, indicator and a chart.\n     * @private\n     * @method status\n     * @param {RenderingContext} context\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} count\n     * @param {string} label\n     * @param {string} indicator\n     * @param {function} plotY\n     */\n    Render.status = function(context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n            context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n    };\n\n    /**\n     * Description\n     * @private\n     * @method constraints\n     * @param {constraint[]} constraints\n     * @param {RenderingContext} context\n     */\n    Render.constraints = function(constraints, context) {\n        var c = context;\n\n        for (var i = 0; i < constraints.length; i++) {\n            var constraint = constraints[i];\n\n            if (!constraint.render.visible || !constraint.pointA || !constraint.pointB)\n                continue;\n\n            var bodyA = constraint.bodyA,\n                bodyB = constraint.bodyB,\n                start,\n                end;\n\n            if (bodyA) {\n                start = Vector.add(bodyA.position, constraint.pointA);\n            } else {\n                start = constraint.pointA;\n            }\n\n            if (constraint.render.type === 'pin') {\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n            } else {\n                if (bodyB) {\n                    end = Vector.add(bodyB.position, constraint.pointB);\n                } else {\n                    end = constraint.pointB;\n                }\n\n                c.beginPath();\n                c.moveTo(start.x, start.y);\n\n                if (constraint.render.type === 'spring') {\n                    var delta = Vector.sub(end, start),\n                        normal = Vector.perp(Vector.normalise(delta)),\n                        coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                        offset;\n\n                    for (var j = 1; j < coils; j += 1) {\n                        offset = j % 2 === 0 ? 1 : -1;\n\n                        c.lineTo(\n                            start.x + delta.x * (j / coils) + normal.x * offset * 4,\n                            start.y + delta.y * (j / coils) + normal.y * offset * 4\n                        );\n                    }\n                }\n\n                c.lineTo(end.x, end.y);\n            }\n\n            if (constraint.render.lineWidth) {\n                c.lineWidth = constraint.render.lineWidth;\n                c.strokeStyle = constraint.render.strokeStyle;\n                c.stroke();\n            }\n\n            if (constraint.render.anchors) {\n                c.fillStyle = constraint.render.strokeStyle;\n                c.beginPath();\n                c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n                c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n                c.closePath();\n                c.fill();\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method bodies\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodies = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            showInternalEdges = options.showInternalEdges || !options.wireframes,\n            body,\n            part,\n            i,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                if (!part.render.visible)\n                    continue;\n\n                if (options.showSleeping && body.isSleeping) {\n                    c.globalAlpha = 0.5 * part.render.opacity;\n                } else if (part.render.opacity !== 1) {\n                    c.globalAlpha = part.render.opacity;\n                }\n\n                if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n                    // part sprite\n                    var sprite = part.render.sprite,\n                        texture = _getTexture(render, sprite.texture);\n\n                    c.translate(part.position.x, part.position.y);\n                    c.rotate(part.angle);\n\n                    c.drawImage(\n                        texture,\n                        texture.width * -sprite.xOffset * sprite.xScale,\n                        texture.height * -sprite.yOffset * sprite.yScale,\n                        texture.width * sprite.xScale,\n                        texture.height * sprite.yScale\n                    );\n\n                    // revert translation, hopefully faster than save / restore\n                    c.rotate(-part.angle);\n                    c.translate(-part.position.x, -part.position.y);\n                } else {\n                    // part polygon\n                    if (part.circleRadius) {\n                        c.beginPath();\n                        c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n                    } else {\n                        c.beginPath();\n                        c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                        for (var j = 1; j < part.vertices.length; j++) {\n                            if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                            } else {\n                                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                            }\n\n                            if (part.vertices[j].isInternal && !showInternalEdges) {\n                                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                            }\n                        }\n\n                        c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                        c.closePath();\n                    }\n\n                    if (!options.wireframes) {\n                        c.fillStyle = part.render.fillStyle;\n\n                        if (part.render.lineWidth) {\n                            c.lineWidth = part.render.lineWidth;\n                            c.strokeStyle = part.render.strokeStyle;\n                            c.stroke();\n                        }\n\n                        c.fill();\n                    } else {\n                        c.lineWidth = 1;\n                        c.strokeStyle = '#bbb';\n                        c.stroke();\n                    }\n                }\n\n                c.globalAlpha = 1;\n            }\n        }\n    };\n\n    /**\n     * Optimised method for drawing body wireframes in one pass\n     * @private\n     * @method bodyWireframes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyWireframes = function(render, bodies, context) {\n        var c = context,\n            showInternalEdges = render.options.showInternalEdges,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n\n                for (j = 1; j < part.vertices.length; j++) {\n                    if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                        c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                    } else {\n                        c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                    }\n\n                    if (part.vertices[j].isInternal && !showInternalEdges) {\n                        c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                    }\n                }\n\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n            }\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = '#bbb';\n        c.stroke();\n    };\n\n    /**\n     * Optimised method for drawing body convex hull wireframes in one pass\n     * @private\n     * @method bodyConvexHulls\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyConvexHulls = function(render, bodies, context) {\n        var c = context,\n            body,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible || body.parts.length === 1)\n                continue;\n\n            c.moveTo(body.vertices[0].x, body.vertices[0].y);\n\n            for (j = 1; j < body.vertices.length; j++) {\n                c.lineTo(body.vertices[j].x, body.vertices[j].y);\n            }\n\n            c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n    };\n\n    /**\n     * Renders body vertex numbers.\n     * @private\n     * @method vertexNumbers\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.vertexNumbers = function(render, bodies, context) {\n        var c = context,\n            i,\n            j,\n            k;\n\n        for (i = 0; i < bodies.length; i++) {\n            var parts = bodies[i].parts;\n            for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n                var part = parts[k];\n                for (j = 0; j < part.vertices.length; j++) {\n                    c.fillStyle = 'rgba(255,255,255,0.2)';\n                    c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n                }\n            }\n        }\n    };\n\n    /**\n     * Renders mouse position.\n     * @private\n     * @method mousePosition\n     * @param {render} render\n     * @param {mouse} mouse\n     * @param {RenderingContext} context\n     */\n    Render.mousePosition = function(render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n    };\n\n    /**\n     * Draws body bounds\n     * @private\n     * @method bodyBounds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyBounds = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (body.render.visible) {\n                var parts = bodies[i].parts;\n                for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    var part = parts[j];\n                    c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n            c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Draws body angle indicators and axes\n     * @private\n     * @method bodyAxes\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyAxes = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            part,\n            i,\n            j,\n            k;\n\n        c.beginPath();\n\n        for (i = 0; i < bodies.length; i++) {\n            var body = bodies[i],\n                parts = body.parts;\n\n            if (!body.render.visible)\n                continue;\n\n            if (options.showAxes) {\n                // render all axes\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        var axis = part.axes[k];\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n                    }\n                }\n            } else {\n                for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                    part = parts[j];\n                    for (k = 0; k < part.axes.length; k++) {\n                        // render a single axis indicator\n                        c.moveTo(part.position.x, part.position.y);\n                        c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length-1].x) / 2,\n                            (part.vertices[0].y + part.vertices[part.vertices.length-1].y) / 2);\n                    }\n                }\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'indianred';\n            c.lineWidth = 1;\n        } else {\n            c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n            c.globalCompositeOperation = 'overlay';\n            c.lineWidth = 2;\n        }\n\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n    };\n\n    /**\n     * Draws body positions\n     * @private\n     * @method bodyPositions\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyPositions = function(render, bodies, context) {\n        var c = context,\n            engine = render.engine,\n            options = render.options,\n            body,\n            part,\n            i,\n            k;\n\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            // handle compound parts\n            for (k = 0; k < body.parts.length; k++) {\n                part = body.parts[k];\n                c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'indianred';\n        } else {\n            c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n            body = bodies[i];\n            if (body.render.visible) {\n                c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n                c.closePath();\n            }\n        }\n\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n    };\n\n    /**\n     * Draws body velocity\n     * @private\n     * @method bodyVelocity\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyVelocity = function(render, bodies, context) {\n        var c = context;\n\n        c.beginPath();\n\n        for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n\n            if (!body.render.visible)\n                continue;\n\n            var velocity = Body.getVelocity(body);\n\n            c.moveTo(body.position.x, body.position.y);\n            c.lineTo(body.position.x + velocity.x, body.position.y + velocity.y);\n        }\n\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n    };\n\n    /**\n     * Draws body ids\n     * @private\n     * @method bodyIds\n     * @param {render} render\n     * @param {body[]} bodies\n     * @param {RenderingContext} context\n     */\n    Render.bodyIds = function(render, bodies, context) {\n        var c = context,\n            i,\n            j;\n\n        for (i = 0; i < bodies.length; i++) {\n            if (!bodies[i].render.visible)\n                continue;\n\n            var parts = bodies[i].parts;\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n                var part = parts[j];\n                c.font = \"12px Arial\";\n                c.fillStyle = 'rgba(255,255,255,0.5)';\n                c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n            }\n        }\n    };\n\n    /**\n     * Description\n     * @private\n     * @method collisions\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.collisions = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            for (j = 0; j < pair.activeContacts.length; j++) {\n                var contact = pair.activeContacts[j],\n                    vertex = contact.vertex;\n                c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n            }\n        }\n\n        if (options.wireframes) {\n            c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n            c.fillStyle = 'orange';\n        }\n        c.fill();\n\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n\n            if (pair.activeContacts.length > 0) {\n                var normalPosX = pair.activeContacts[0].vertex.x,\n                    normalPosY = pair.activeContacts[0].vertex.y;\n\n                if (pair.activeContacts.length === 2) {\n                    normalPosX = (pair.activeContacts[0].vertex.x + pair.activeContacts[1].vertex.x) / 2;\n                    normalPosY = (pair.activeContacts[0].vertex.y + pair.activeContacts[1].vertex.y) / 2;\n                }\n\n                if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n                    c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n                } else {\n                    c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n                }\n\n                c.lineTo(normalPosX, normalPosY);\n            }\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n\n        c.lineWidth = 1;\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method separations\n     * @param {render} render\n     * @param {pair[]} pairs\n     * @param {RenderingContext} context\n     */\n    Render.separations = function(render, pairs, context) {\n        var c = context,\n            options = render.options,\n            pair,\n            collision,\n            corrected,\n            bodyA,\n            bodyB,\n            i,\n            j;\n\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n            pair = pairs[i];\n\n            if (!pair.isActive)\n                continue;\n\n            collision = pair.collision;\n            bodyA = collision.bodyA;\n            bodyB = collision.bodyB;\n\n            var k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyB.isStatic) k = 0;\n\n            c.moveTo(bodyB.position.x, bodyB.position.y);\n            c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n\n            k = 1;\n\n            if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n            if (bodyA.isStatic) k = 0;\n\n            c.moveTo(bodyA.position.x, bodyA.position.y);\n            c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n\n        if (options.wireframes) {\n            c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n            c.strokeStyle = 'orange';\n        }\n        c.stroke();\n    };\n\n    /**\n     * Description\n     * @private\n     * @method inspector\n     * @param {inspector} inspector\n     * @param {RenderingContext} context\n     */\n    Render.inspector = function(inspector, context) {\n        var engine = inspector.engine,\n            selected = inspector.selected,\n            render = inspector.render,\n            options = render.options,\n            bounds;\n\n        if (options.hasBounds) {\n            var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n                boundsHeight = render.bounds.max.y - render.bounds.min.y,\n                boundsScaleX = boundsWidth / render.options.width,\n                boundsScaleY = boundsHeight / render.options.height;\n\n            context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n            context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n\n        for (var i = 0; i < selected.length; i++) {\n            var item = selected[i].data;\n\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.9)';\n            context.setLineDash([1,2]);\n\n            switch (item.type) {\n\n            case 'body':\n\n                // render body selections\n                bounds = item.bounds;\n                context.beginPath();\n                context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3),\n                    Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            case 'constraint':\n\n                // render constraint selections\n                var point = item.pointA;\n                if (item.bodyA)\n                    point = item.pointB;\n                context.beginPath();\n                context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n                context.closePath();\n                context.stroke();\n\n                break;\n\n            }\n\n            context.setLineDash([]);\n            context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n            context.translate(0.5, 0.5);\n            context.lineWidth = 1;\n            context.strokeStyle = 'rgba(255,165,0,0.6)';\n            context.fillStyle = 'rgba(255,165,0,0.1)';\n            bounds = inspector.selectBounds;\n            context.beginPath();\n            context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y),\n                Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n            context.closePath();\n            context.stroke();\n            context.fill();\n            context.translate(-0.5, -0.5);\n        }\n\n        if (options.hasBounds)\n            context.setTransform(1, 0, 0, 1, 0, 0);\n    };\n\n    /**\n     * Updates render timing.\n     * @method _updateTiming\n     * @private\n     * @param {render} render\n     * @param {number} time\n     */\n    var _updateTiming = function(render, time) {\n        var engine = render.engine,\n            timing = render.timing,\n            historySize = timing.historySize,\n            timestamp = engine.timing.timestamp;\n\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n    };\n\n    /**\n     * Returns the mean value of the given numbers.\n     * @method _mean\n     * @private\n     * @param {Number[]} values\n     * @return {Number} the mean of given values\n     */\n    var _mean = function(values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n            result += values[i];\n        }\n        return (result / values.length) || 0;\n    };\n\n    /**\n     * @method _createCanvas\n     * @private\n     * @param {} width\n     * @param {} height\n     * @return canvas\n     */\n    var _createCanvas = function(width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function() { return false; };\n        canvas.onselectstart = function() { return false; };\n        return canvas;\n    };\n\n    /**\n     * Gets the pixel ratio of the canvas.\n     * @method _getPixelRatio\n     * @private\n     * @param {HTMLElement} canvas\n     * @return {Number} pixel ratio\n     */\n    var _getPixelRatio = function(canvas) {\n        var context = canvas.getContext('2d'),\n            devicePixelRatio = window.devicePixelRatio || 1,\n            backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio\n                                      || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio\n                                      || context.backingStorePixelRatio || 1;\n\n        return devicePixelRatio / backingStorePixelRatio;\n    };\n\n    /**\n     * Gets the requested texture (an Image) via its path\n     * @method _getTexture\n     * @private\n     * @param {render} render\n     * @param {string} imagePath\n     * @return {Image} texture\n     */\n    var _getTexture = function(render, imagePath) {\n        var image = render.textures[imagePath];\n\n        if (image)\n            return image;\n\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n\n        return image;\n    };\n\n    /**\n     * Applies the background to the canvas using CSS.\n     * @method applyBackground\n     * @private\n     * @param {render} render\n     * @param {string} background\n     */\n    var _applyBackground = function(render, background) {\n        var cssBackground = background;\n\n        if (/(jpg|gif|png)$/.test(background))\n            cssBackground = 'url(' + background + ')';\n\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired before rendering\n    *\n    * @event beforeRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after rendering\n    *\n    * @event afterRender\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A back-reference to the `Matter.Render` module.\n     *\n     * @deprecated\n     * @property controller\n     * @type render\n     */\n\n    /**\n     * A reference to the `Matter.Engine` instance to be used.\n     *\n     * @property engine\n     * @type engine\n     */\n\n    /**\n     * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n     *\n     * @property element\n     * @type HTMLElement\n     * @default null\n     */\n\n    /**\n     * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n     *\n     * @property canvas\n     * @type HTMLCanvasElement\n     * @default null\n     */\n\n    /**\n     * A `Bounds` object that specifies the drawing view region.\n     * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n     * This allows for creating views that can pan or zoom around the scene.\n     * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n     *\n     * @property bounds\n     * @type bounds\n     */\n\n    /**\n     * The 2d rendering context from the `render.canvas` element.\n     *\n     * @property context\n     * @type CanvasRenderingContext2D\n     */\n\n    /**\n     * The sprite texture cache.\n     *\n     * @property textures\n     * @type {}\n     */\n\n    /**\n     * The mouse to render if `render.options.showMousePosition` is enabled.\n     *\n     * @property mouse\n     * @type mouse\n     * @default null\n     */\n\n    /**\n     * The configuration options of the renderer.\n     *\n     * @property options\n     * @type {}\n     */\n\n    /**\n     * The target width in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.width\n     * @type number\n     * @default 800\n     */\n\n    /**\n     * The target height in pixels of the `render.canvas` to be created.\n     * See also the `options.pixelRatio` property to change render quality.\n     *\n     * @property options.height\n     * @type number\n     * @default 600\n     */\n\n    /**\n     * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n     *\n     * @property options.pixelRatio\n     * @type number\n     * @default 1\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is disabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.background\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A CSS background color string to use when `render.options.wireframes` is enabled.\n     * This may be also set to `'transparent'` or equivalent.\n     *\n     * @property options.wireframeBackground\n     * @type string\n     * @default '#14151f'\n     */\n\n    /**\n     * A flag that specifies if `render.bounds` should be used when rendering.\n     *\n     * @property options.hasBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable all debug information overlays together.  \n     * This includes and has priority over the values of:\n     *\n     * - `render.options.showStats`\n     * - `render.options.showPerformance`\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the engine stats info overlay.  \n     * From left to right, the values shown are:\n     *\n     * - body parts total\n     * - body total\n     * - constraints total\n     * - composites total\n     * - collision pairs total\n     *\n     * @property options.showStats\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable performance charts.  \n     * From left to right, the values shown are:\n     *\n     * - average render frequency (e.g. 60 fps)\n     * - exact engine delta time used for last update (e.g. 16.66ms)\n     * - average engine execution duration (e.g. 5.00ms)\n     * - average render execution duration (e.g. 0.40ms)\n     * - average effective play speed (e.g. '1.00x' is 'real-time')\n     *\n     * Each value is recorded over a fixed sample of past frames (60 frames).\n     *\n     * A chart shown below each value indicates the variance from the average over the sample.\n     * The more stable or fixed the value is the flatter the chart will appear.\n     *\n     * @property options.showPerformance\n     * @type boolean\n     * @default false\n     */\n    \n    /**\n     * A flag to enable or disable rendering entirely.\n     *\n     * @property options.enabled\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n     *\n     * @property options.wireframes\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable sleeping bodies indicators.\n     *\n     * @property options.showSleeping\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A flag to enable or disable the debug information overlay.\n     *\n     * @property options.showDebug\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision broadphase debug overlay.\n     *\n     * @deprecated no longer implemented\n     * @property options.showBroadphase\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body bounds debug overlay.\n     *\n     * @property options.showBounds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body velocity debug overlay.\n     *\n     * @property options.showVelocity\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body collisions debug overlay.\n     *\n     * @property options.showCollisions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the collision resolver separations debug overlay.\n     *\n     * @property options.showSeparations\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body axes debug overlay.\n     *\n     * @property options.showAxes\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body positions debug overlay.\n     *\n     * @property options.showPositions\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body angle debug overlay.\n     *\n     * @property options.showAngleIndicator\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body and part ids debug overlay.\n     *\n     * @property options.showIds\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body vertex numbers debug overlay.\n     *\n     * @property options.showVertexNumbers\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body convex hulls debug overlay.\n     *\n     * @property options.showConvexHulls\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the body internal edges debug overlay.\n     *\n     * @property options.showInternalEdges\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A flag to enable or disable the mouse position debug overlay.\n     *\n     * @property options.showMousePosition\n     * @type boolean\n     * @default false\n     */\n\n})();\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __nested_webpack_require_339525__) {\n\n/**\n* The `Matter.Runner` module is an optional utility which provides a game loop, \n* that handles continuously updating a `Matter.Engine` for you within a browser.\n* It is intended for development and debugging purposes, but may also be suitable for simple games.\n* If you are using your own game loop instead, then you do not need the `Matter.Runner` module.\n* Instead just call `Engine.update(engine, delta)` in your own loop.\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Runner\n*/\n\nvar Runner = {};\n\nmodule.exports = Runner;\n\nvar Events = __nested_webpack_require_339525__(5);\nvar Engine = __nested_webpack_require_339525__(17);\nvar Common = __nested_webpack_require_339525__(0);\n\n(function() {\n\n    var _requestAnimationFrame,\n        _cancelAnimationFrame;\n\n    if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame\n                                      || window.mozRequestAnimationFrame || window.msRequestAnimationFrame;\n   \n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame \n                                      || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n    }\n\n    if (!_requestAnimationFrame) {\n        var _frameTimeout;\n\n        _requestAnimationFrame = function(callback){ \n            _frameTimeout = setTimeout(function() { \n                callback(Common.now()); \n            }, 1000 / 60);\n        };\n\n        _cancelAnimationFrame = function() {\n            clearTimeout(_frameTimeout);\n        };\n    }\n\n    /**\n     * Creates a new Runner. The options parameter is an object that specifies any properties you wish to override the defaults.\n     * @method create\n     * @param {} options\n     */\n    Runner.create = function(options) {\n        var defaults = {\n            fps: 60,\n            deltaSampleSize: 60,\n            counterTimestamp: 0,\n            frameCounter: 0,\n            deltaHistory: [],\n            timePrev: null,\n            frameRequestId: null,\n            isFixed: false,\n            enabled: true\n        };\n\n        var runner = Common.extend(defaults, options);\n\n        runner.delta = runner.delta || 1000 / runner.fps;\n        runner.deltaMin = runner.deltaMin || 1000 / runner.fps;\n        runner.deltaMax = runner.deltaMax || 1000 / (runner.fps * 0.5);\n        runner.fps = 1000 / runner.delta;\n\n        return runner;\n    };\n\n    /**\n     * Continuously ticks a `Matter.Engine` by calling `Runner.tick` on the `requestAnimationFrame` event.\n     * @method run\n     * @param {engine} engine\n     */\n    Runner.run = function(runner, engine) {\n        // create runner if engine is first argument\n        if (typeof runner.positionIterations !== 'undefined') {\n            engine = runner;\n            runner = Runner.create();\n        }\n\n        (function run(time){\n            runner.frameRequestId = _requestAnimationFrame(run);\n\n            if (time && runner.enabled) {\n                Runner.tick(runner, engine, time);\n            }\n        })();\n\n        return runner;\n    };\n\n    /**\n     * A game loop utility that updates the engine and renderer by one step (a 'tick').\n     * Features delta smoothing, time correction and fixed or dynamic timing.\n     * Consider just `Engine.update(engine, delta)` if you're using your own loop.\n     * @method tick\n     * @param {runner} runner\n     * @param {engine} engine\n     * @param {number} time\n     */\n    Runner.tick = function(runner, engine, time) {\n        var timing = engine.timing,\n            delta;\n\n        if (runner.isFixed) {\n            // fixed timestep\n            delta = runner.delta;\n        } else {\n            // dynamic timestep based on wall clock between calls\n            delta = (time - runner.timePrev) || runner.delta;\n            runner.timePrev = time;\n\n            // optimistically filter delta over a few frames, to improve stability\n            runner.deltaHistory.push(delta);\n            runner.deltaHistory = runner.deltaHistory.slice(-runner.deltaSampleSize);\n            delta = Math.min.apply(null, runner.deltaHistory);\n\n            // limit delta\n            delta = delta < runner.deltaMin ? runner.deltaMin : delta;\n            delta = delta > runner.deltaMax ? runner.deltaMax : delta;\n\n            // update engine timing object\n            runner.delta = delta;\n        }\n\n        // create an event object\n        var event = {\n            timestamp: timing.timestamp\n        };\n\n        Events.trigger(runner, 'beforeTick', event);\n\n        // fps counter\n        runner.frameCounter += 1;\n        if (time - runner.counterTimestamp >= 1000) {\n            runner.fps = runner.frameCounter * ((time - runner.counterTimestamp) / 1000);\n            runner.counterTimestamp = time;\n            runner.frameCounter = 0;\n        }\n\n        Events.trigger(runner, 'tick', event);\n\n        // update\n        Events.trigger(runner, 'beforeUpdate', event);\n\n        Engine.update(engine, delta);\n\n        Events.trigger(runner, 'afterUpdate', event);\n\n        Events.trigger(runner, 'afterTick', event);\n    };\n\n    /**\n     * Ends execution of `Runner.run` on the given `runner`, by canceling the animation frame request event loop.\n     * If you wish to only temporarily pause the engine, see `engine.enabled` instead.\n     * @method stop\n     * @param {runner} runner\n     */\n    Runner.stop = function(runner) {\n        _cancelAnimationFrame(runner.frameRequestId);\n    };\n\n    /**\n     * Alias for `Runner.run`.\n     * @method start\n     * @param {runner} runner\n     * @param {engine} engine\n     */\n    Runner.start = function(runner, engine) {\n        Runner.run(runner, engine);\n    };\n\n    /*\n    *\n    *  Events Documentation\n    *\n    */\n\n    /**\n    * Fired at the start of a tick, before any updates to the engine or timing\n    *\n    * @event beforeTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after engine timing updated, but just before update\n    *\n    * @event tick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired at the end of a tick, after engine update and after rendering\n    *\n    * @event afterTick\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired before update\n    *\n    * @event beforeUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /**\n    * Fired after update\n    *\n    * @event afterUpdate\n    * @param {} event An event object\n    * @param {number} event.timestamp The engine.timing.timestamp of the event\n    * @param {} event.source The source object of the event\n    * @param {} event.name The name of the event\n    */\n\n    /*\n    *\n    *  Properties Documentation\n    *\n    */\n\n    /**\n     * A flag that specifies whether the runner is running or not.\n     *\n     * @property enabled\n     * @type boolean\n     * @default true\n     */\n\n    /**\n     * A `Boolean` that specifies if the runner should use a fixed timestep (otherwise it is variable).\n     * If timing is fixed, then the apparent simulation speed will change depending on the frame rate (but behaviour will be deterministic).\n     * If the timing is variable, then the apparent simulation speed will be constant (approximately, but at the cost of determininism).\n     *\n     * @property isFixed\n     * @type boolean\n     * @default false\n     */\n\n    /**\n     * A `Number` that specifies the time step between updates in milliseconds.\n     * If `engine.timing.isFixed` is set to `true`, then `delta` is fixed.\n     * If it is `false`, then `delta` can dynamically change to maintain the correct apparent simulation speed.\n     *\n     * @property delta\n     * @type number\n     * @default 1000 / 60\n     */\n\n})();\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __nested_webpack_require_348064__) {\n\n/**\n* This module has now been replaced by `Matter.Collision`.\n*\n* All usage should be migrated to `Matter.Collision`.\n* For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n*\n* The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n*\n* @class SAT\n* @deprecated\n*/\n\nvar SAT = {};\n\nmodule.exports = SAT;\n\nvar Collision = __nested_webpack_require_348064__(8);\nvar Common = __nested_webpack_require_348064__(0);\nvar deprecated = Common.deprecated;\n\n(function() {\n\n    /**\n     * Detect collision between two bodies using the Separating Axis Theorem.\n     * @deprecated replaced by Collision.collides\n     * @method collides\n     * @param {body} bodyA\n     * @param {body} bodyB\n     * @return {collision} collision\n     */\n    SAT.collides = function(bodyA, bodyB) {\n        return Collision.collides(bodyA, bodyB);\n    };\n\n    deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');\n\n})();\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports, __nested_webpack_require_349134__) {\n\n/**\n* The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n*\n* To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n*\n* See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n*\n* @class Svg\n*/\n\nvar Svg = {};\n\nmodule.exports = Svg;\n\nvar Bounds = __nested_webpack_require_349134__(1);\nvar Common = __nested_webpack_require_349134__(0);\n\n(function() {\n\n    /**\n     * Converts an SVG path into an array of vector points.\n     * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n     * See `Bodies.fromVertices` which provides support for this.\n     * Note that this function is not guaranteed to support complex paths (such as those with holes).\n     * You must load the `pathseg.js` polyfill on newer browsers.\n     * @method pathToVertices\n     * @param {SVGPathElement} path\n     * @param {Number} [sampleLength=15]\n     * @return {Vector[]} points\n     */\n    Svg.pathToVertices = function(path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n            Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i, il, total, point, segment, segments, \n            segmentsQueue, lastSegment, \n            lastPoint, segmentIndex, points = [],\n            lx, ly, length = 0, x = 0, y = 0;\n\n        sampleLength = sampleLength || 15;\n\n        var addPoint = function(px, py, pathSegType) {\n            // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n            var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n            // when the last point doesn't equal the current point add the current point\n            if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n                if (lastPoint && isRelative) {\n                    lx = lastPoint.x;\n                    ly = lastPoint.y;\n                } else {\n                    lx = 0;\n                    ly = 0;\n                }\n\n                var point = {\n                    x: lx + px,\n                    y: ly + py\n                };\n\n                // set last point\n                if (isRelative || !lastPoint) {\n                    lastPoint = point;\n                }\n\n                points.push(point);\n\n                x = lx + px;\n                y = ly + py;\n            }\n        };\n\n        var addSegmentPoint = function(segment) {\n            var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n            // skip path ends\n            if (segType === 'Z') \n                return;\n\n            // map segment to x and y\n            switch (segType) {\n\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n                x = segment.x;\n                y = segment.y;\n                break;\n            case 'H':\n                x = segment.x;\n                break;\n            case 'V':\n                y = segment.y;\n                break;\n            }\n\n            addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1)\n            segments.push(path.pathSegList.getItem(i));\n\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n            // get segment at position\n            segmentIndex = path.getPathSegAtLength(length);\n            segment = segments[segmentIndex];\n\n            // new segment\n            if (segment != lastSegment) {\n                while (segmentsQueue.length && segmentsQueue[0] != segment)\n                    addSegmentPoint(segmentsQueue.shift());\n\n                lastSegment = segment;\n            }\n\n            // add points in between when curving\n            // TODO: adaptive sampling\n            switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n                point = path.getPointAtLength(length);\n                addPoint(point.x, point.y, 0);\n                break;\n\n            }\n\n            // increment by sample value\n            length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i)\n            addSegmentPoint(segmentsQueue[i]);\n\n        return points;\n    };\n\n    Svg._svgPathToAbsolute = function(path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0, y0, x1, y1, x2, y2, segs = path.pathSegList,\n            x = 0, y = 0, len = segs.numberOfItems;\n\n        for (var i = 0; i < len; ++i) {\n            var seg = segs.getItem(i),\n                segType = seg.pathSegTypeAsLetter;\n\n            if (/[MLHVCSQTA]/.test(segType)) {\n                if ('x' in seg) x = seg.x;\n                if ('y' in seg) y = seg.y;\n            } else {\n                if ('x1' in seg) x1 = x + seg.x1;\n                if ('x2' in seg) x2 = x + seg.x2;\n                if ('y1' in seg) y1 = y + seg.y1;\n                if ('y2' in seg) y2 = y + seg.y2;\n                if ('x' in seg) x += seg.x;\n                if ('y' in seg) y += seg.y;\n\n                switch (segType) {\n\n                case 'm':\n                    segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                    break;\n                case 'l':\n                    segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                    break;\n                case 'h':\n                    segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                    break;\n                case 'v':\n                    segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                    break;\n                case 'c':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                    break;\n                case 's':\n                    segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                    break;\n                case 'q':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                    break;\n                case 't':\n                    segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                    break;\n                case 'a':\n                    segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                    break;\n                case 'z':\n                case 'Z':\n                    x = x0;\n                    y = y0;\n                    break;\n\n                }\n            }\n\n            if (segType == 'M' || segType == 'm') {\n                x0 = x;\n                y0 = y;\n            }\n        }\n    };\n\n})();\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __nested_webpack_require_356595__) {\n\n/**\n* This module has now been replaced by `Matter.Composite`.\n*\n* All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n* For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n*\n* The property `world.gravity` has been moved to `engine.gravity`.\n*\n* For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n* Eventually this alias module will be marked as deprecated and then later removed in a future release.\n*\n* @class World\n*/\n\nvar World = {};\n\nmodule.exports = World;\n\nvar Composite = __nested_webpack_require_356595__(6);\nvar Common = __nested_webpack_require_356595__(0);\n\n(function() {\n\n    /**\n     * See above, aliases for back compatibility only\n     */\n    World.create = Composite.create;\n    World.add = Composite.add;\n    World.remove = Composite.remove;\n    World.clear = Composite.clear;\n    World.addComposite = Composite.addComposite;\n    World.addBody = Composite.addBody;\n    World.addConstraint = Composite.addConstraint;\n\n})();\n\n\n/***/ })\n/******/ ]);\n});\n\n//# sourceURL=webpack://ocaduillustration/./node_modules/matter-js/build/matter.js?");

/***/ }),

/***/ "./node_modules/two.js/build/two.module.js":
/*!*************************************************!*\
  !*** ./node_modules/two.js/build/two.module.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Two)\n/* harmony export */ });\n/*\nMIT License\n\nCopyright (c) 2012 - 2021 @jonobr1 / http://jono.fyi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\nvar __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\n\n// src/utils/path-commands.js\nvar Commands = {\n  move: \"M\",\n  line: \"L\",\n  curve: \"C\",\n  arc: \"A\",\n  close: \"Z\"\n};\n\n// src/utils/math.js\nvar math_exports = {};\n__export(math_exports, {\n  HALF_PI: () => HALF_PI,\n  NumArray: () => NumArray,\n  TWO_PI: () => TWO_PI,\n  decomposeMatrix: () => decomposeMatrix,\n  getComputedMatrix: () => getComputedMatrix,\n  getPoT: () => getPoT,\n  lerp: () => lerp,\n  mod: () => mod,\n  setMatrix: () => setMatrix,\n  toFixed: () => toFixed\n});\n\n// src/utils/root.js\nvar root;\nif (typeof window !== \"undefined\") {\n  root = window;\n} else if (typeof __webpack_require__.g !== \"undefined\") {\n  root = __webpack_require__.g;\n} else if (typeof self !== \"undefined\") {\n  root = self;\n}\n\n// src/utils/math.js\nvar Matrix;\nvar TWO_PI = Math.PI * 2;\nvar HALF_PI = Math.PI * 0.5;\nfunction decomposeMatrix(matrix3, b, c, d, e, f) {\n  let a;\n  if (arguments.length <= 1) {\n    a = matrix3.a;\n    b = matrix3.b;\n    c = matrix3.c;\n    d = matrix3.d;\n    e = matrix3.e;\n    f = matrix3.f;\n  } else {\n    a = matrix3;\n  }\n  return {\n    translateX: e,\n    translateY: f,\n    scaleX: Math.sqrt(a * a + b * b),\n    scaleY: Math.sqrt(c * c + d * d),\n    rotation: 180 * Math.atan2(b, a) / Math.PI\n  };\n}\nfunction setMatrix(matrix3) {\n  Matrix = matrix3;\n}\nfunction getComputedMatrix(object, matrix3) {\n  matrix3 = matrix3 && matrix3.identity() || new Matrix();\n  let parent = object;\n  const matrices = [];\n  while (parent && parent._matrix) {\n    matrices.push(parent._matrix);\n    parent = parent.parent;\n  }\n  matrices.reverse();\n  for (let i = 0; i < matrices.length; i++) {\n    const m = matrices[i];\n    const e = m.elements;\n    matrix3.multiply(e[0], e[1], e[2], e[3], e[4], e[5], e[6], e[7], e[8], e[9]);\n  }\n  return matrix3;\n}\nfunction lerp(a, b, t) {\n  return t * (b - a) + a;\n}\nvar pots = [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096];\nfunction getPoT(value) {\n  let i = 0;\n  while (pots[i] && pots[i] < value) {\n    i++;\n  }\n  return pots[i];\n}\nfunction mod(v, l) {\n  while (v < 0) {\n    v += l;\n  }\n  return v % l;\n}\nvar NumArray = root.Float32Array || Array;\nvar floor = Math.floor;\nfunction toFixed(v) {\n  return floor(v * 1e6) / 1e6;\n}\n\n// src/utils/curves.js\nvar curves_exports = {};\n__export(curves_exports, {\n  Curve: () => Curve,\n  getAnchorsFromArcData: () => getAnchorsFromArcData,\n  getComponentOnCubicBezier: () => getComponentOnCubicBezier,\n  getControlPoints: () => getControlPoints,\n  getCurveBoundingBox: () => getCurveBoundingBox,\n  getCurveFromPoints: () => getCurveFromPoints,\n  getCurveLength: () => getCurveLength,\n  getReflection: () => getReflection,\n  integrate: () => integrate,\n  subdivide: () => subdivide\n});\n\n// src/events.js\nvar Events = class {\n  constructor() {\n    __publicField(this, \"_events\", {});\n    __publicField(this, \"_bound\", false);\n  }\n  addEventListener(name, handler) {\n    const list = this._events[name] || (this._events[name] = []);\n    list.push(handler);\n    this._bound = true;\n    return this;\n  }\n  on() {\n    return this.addEventListener.apply(this, arguments);\n  }\n  bind() {\n    return this.addEventListener.apply(this, arguments);\n  }\n  removeEventListener(name, handler) {\n    if (!this._events) {\n      return this;\n    }\n    if (!name && !handler) {\n      this._events = {};\n      this._bound = false;\n      return this;\n    }\n    const names = name ? [name] : Object.keys(this._events);\n    for (let i = 0, l = names.length; i < l; i++) {\n      name = names[i];\n      let list = this._events[name];\n      if (list) {\n        let events = [];\n        if (handler) {\n          for (let j = 0, k = list.length; j < k; j++) {\n            let e = list[j];\n            e = e.handler ? e.handler : e;\n            if (handler !== e) {\n              events.push(e);\n            }\n          }\n        }\n        this._events[name] = events;\n      }\n    }\n    return this;\n  }\n  off() {\n    return this.removeEventListener.apply(this, arguments);\n  }\n  unbind() {\n    return this.removeEventListener.apply(this, arguments);\n  }\n  dispatchEvent(name) {\n    if (!this._events) {\n      return this;\n    }\n    const args = Array.prototype.slice.call(arguments, 1);\n    const events = this._events[name];\n    if (events) {\n      for (let i = 0; i < events.length; i++) {\n        events[i].call(this, ...args);\n      }\n    }\n    return this;\n  }\n  trigger() {\n    return this.dispatchEvent.apply(this, arguments);\n  }\n  listen(obj, name, handler) {\n    const scope = this;\n    if (obj) {\n      e.obj = obj;\n      e.name = name;\n      e.handler = handler;\n      obj.on(name, e);\n    }\n    function e() {\n      handler.apply(scope, arguments);\n    }\n    return scope;\n  }\n  ignore(obj, name, handler) {\n    obj.off(name, handler);\n    return this;\n  }\n};\n__publicField(Events, \"Types\", {\n  play: \"play\",\n  pause: \"pause\",\n  update: \"update\",\n  render: \"render\",\n  resize: \"resize\",\n  change: \"change\",\n  remove: \"remove\",\n  insert: \"insert\",\n  order: \"order\",\n  load: \"load\"\n});\n__publicField(Events, \"Methods\", [\n  \"addEventListener\",\n  \"on\",\n  \"removeEventListener\",\n  \"off\",\n  \"unbind\",\n  \"dispatchEvent\",\n  \"trigger\",\n  \"listen\",\n  \"ignore\"\n]);\n\n// src/vector.js\nvar proto = {\n  x: {\n    enumerable: true,\n    get: function() {\n      return this._x;\n    },\n    set: function(v) {\n      if (this._x !== v) {\n        this._x = v;\n        if (this._bound) {\n          this.dispatchEvent(Events.Types.change);\n        }\n      }\n    }\n  },\n  y: {\n    enumerable: true,\n    get: function() {\n      return this._y;\n    },\n    set: function(v) {\n      if (this._y !== v) {\n        this._y = v;\n        if (this._bound) {\n          this.dispatchEvent(Events.Types.change);\n        }\n      }\n    }\n  }\n};\nvar _Vector = class extends Events {\n  constructor(x = 0, y = 0) {\n    super();\n    __publicField(this, \"_x\", 0);\n    __publicField(this, \"_y\", 0);\n    for (let prop in proto) {\n      Object.defineProperty(this, prop, proto[prop]);\n    }\n    this.x = x;\n    this.y = y;\n  }\n  static add(v1, v2) {\n    return new _Vector(v1.x + v2.x, v1.y + v2.y);\n  }\n  static sub(v1, v2) {\n    return new _Vector(v1.x - v2.x, v1.y - v2.y);\n  }\n  static subtract(v1, v2) {\n    return _Vector.sub(v1, v2);\n  }\n  static ratioBetween(v1, v2) {\n    return (v1.x * v2.x + v1.y * v2.y) / (v1.length() * v2.length());\n  }\n  static angleBetween(v1, v2) {\n    if (arguments.length >= 4) {\n      const dx2 = arguments[0] - arguments[2];\n      const dy2 = arguments[1] - arguments[3];\n      return Math.atan2(dy2, dx2);\n    }\n    const dx = v1.x - v2.x;\n    const dy = v1.y - v2.y;\n    return Math.atan2(dy, dx);\n  }\n  static distanceBetween(v1, v2) {\n    return Math.sqrt(_Vector.distanceBetweenSquared(v1, v2));\n  }\n  static distanceBetweenSquared(v1, v2) {\n    const dx = v1.x - v2.x;\n    const dy = v1.y - v2.y;\n    return dx * dx + dy * dy;\n  }\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    return this;\n  }\n  clear() {\n    this.x = 0;\n    this.y = 0;\n    return this;\n  }\n  clone() {\n    return new _Vector(this.x, this.y);\n  }\n  add(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === \"number\") {\n        this.x += x;\n        this.y += x;\n      } else if (x && typeof x.x === \"number\" && typeof x.y === \"number\") {\n        this.x += x.x;\n        this.y += x.y;\n      }\n    } else {\n      this.x += x;\n      this.y += y;\n    }\n    return this;\n  }\n  addSelf(v) {\n    return this.add.apply(this, arguments);\n  }\n  sub(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === \"number\") {\n        this.x -= x;\n        this.y -= x;\n      } else if (x && typeof x.x === \"number\" && typeof x.y === \"number\") {\n        this.x -= x.x;\n        this.y -= x.y;\n      }\n    } else {\n      this.x -= x;\n      this.y -= y;\n    }\n    return this;\n  }\n  subtract() {\n    return this.sub.apply(this, arguments);\n  }\n  subSelf(v) {\n    return this.sub.apply(this, arguments);\n  }\n  subtractSelf(v) {\n    return this.sub.apply(this, arguments);\n  }\n  multiply(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === \"number\") {\n        this.x *= x;\n        this.y *= x;\n      } else if (x && typeof x.x === \"number\" && typeof x.y === \"number\") {\n        this.x *= x.x;\n        this.y *= x.y;\n      }\n    } else {\n      this.x *= x;\n      this.y *= y;\n    }\n    return this;\n  }\n  multiplySelf(v) {\n    return this.multiply.apply(this, arguments);\n  }\n  multiplyScalar(s) {\n    return this.multiply(s);\n  }\n  divide(x, y) {\n    if (arguments.length <= 0) {\n      return this;\n    } else if (arguments.length <= 1) {\n      if (typeof x === \"number\") {\n        this.x /= x;\n        this.y /= x;\n      } else if (x && typeof x.x === \"number\" && typeof x.y === \"number\") {\n        this.x /= x.x;\n        this.y /= x.y;\n      }\n    } else {\n      this.x /= x;\n      this.y /= y;\n    }\n    if (isNaN(this.x)) {\n      this.x = 0;\n    }\n    if (isNaN(this.y)) {\n      this.y = 0;\n    }\n    return this;\n  }\n  divideSelf(v) {\n    return this.divide.apply(this, arguments);\n  }\n  divideScalar(s) {\n    return this.divide(s);\n  }\n  negate() {\n    return this.multiply(-1);\n  }\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n  length() {\n    return Math.sqrt(this.lengthSquared());\n  }\n  lengthSquared() {\n    return this.x * this.x + this.y * this.y;\n  }\n  normalize() {\n    return this.divideScalar(this.length());\n  }\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n  distanceToSquared(v) {\n    const dx = this.x - v.x;\n    const dy = this.y - v.y;\n    return dx * dx + dy * dy;\n  }\n  setLength(l) {\n    return this.normalize().multiplyScalar(l);\n  }\n  equals(v, eps) {\n    eps = typeof eps === \"undefined\" ? 1e-4 : eps;\n    return this.distanceTo(v) < eps;\n  }\n  lerp(v, t) {\n    const x = (v.x - this.x) * t + this.x;\n    const y = (v.y - this.y) * t + this.y;\n    return this.set(x, y);\n  }\n  isZero(eps) {\n    eps = typeof eps === \"undefined\" ? 1e-4 : eps;\n    return this.length() < eps;\n  }\n  toString() {\n    return this.x + \", \" + this.y;\n  }\n  toObject() {\n    return { x: this.x, y: this.y };\n  }\n  rotate(radians) {\n    const x = this.x;\n    const y = this.y;\n    const cos7 = Math.cos(radians);\n    const sin7 = Math.sin(radians);\n    this.x = x * cos7 - y * sin7;\n    this.y = x * sin7 + y * cos7;\n    return this;\n  }\n};\nvar Vector = _Vector;\n__publicField(Vector, \"zero\", new _Vector());\n__publicField(Vector, \"left\", new _Vector(-1, 0));\n__publicField(Vector, \"right\", new _Vector(1, 0));\n__publicField(Vector, \"up\", new _Vector(0, -1));\n__publicField(Vector, \"down\", new _Vector(0, 1));\n\n// src/anchor.js\nvar Anchor = class extends Vector {\n  constructor(x = 0, y = 0, ax = 0, ay = 0, bx = 0, by = 0, command = Commands.move) {\n    super(x, y);\n    __publicField(this, \"controls\", {\n      left: new Vector(),\n      right: new Vector()\n    });\n    __publicField(this, \"_command\", Commands.move);\n    __publicField(this, \"_relative\", true);\n    __publicField(this, \"_rx\", 0);\n    __publicField(this, \"_ry\", 0);\n    __publicField(this, \"_xAxisRotation\", 0);\n    __publicField(this, \"_largeArcFlag\", 0);\n    __publicField(this, \"_sweepFlag\", 1);\n    for (let prop in proto2) {\n      Object.defineProperty(this, prop, proto2[prop]);\n    }\n    this.command = command;\n    this.relative = true;\n    const broadcast = Anchor.makeBroadcast(this);\n    this.controls.left.set(ax, ay).addEventListener(Events.Types.change, broadcast);\n    this.controls.right.set(bx, by).addEventListener(Events.Types.change, broadcast);\n  }\n  static makeBroadcast(scope) {\n    return broadcast;\n    function broadcast() {\n      if (scope._bound) {\n        scope.dispatchEvent(Events.Types.change);\n      }\n    }\n  }\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n    if (typeof v.command === \"string\") {\n      this.command = v.command;\n    }\n    if (v.controls) {\n      if (v.controls.left) {\n        this.controls.left.copy(v.controls.left);\n      }\n      if (v.controls.right) {\n        this.controls.right.copy(v.controls.right);\n      }\n    }\n    if (typeof v.relative === \"boolean\") {\n      this.relative = v.relative;\n    }\n    if (typeof v.rx === \"number\") {\n      this.rx = v.rx;\n    }\n    if (typeof v.ry === \"number\") {\n      this.ry = v.ry;\n    }\n    if (typeof v.xAxisRotation === \"number\") {\n      this.xAxisRotation = v.xAxisRotation;\n    }\n    if (typeof v.largeArcFlag === \"number\") {\n      this.largeArcFlag = v.largeArcFlag;\n    }\n    if (typeof v.sweepFlag === \"number\") {\n      this.sweepFlag = v.sweepFlag;\n    }\n    return this;\n  }\n  clone() {\n    return new Anchor().copy(this);\n  }\n  toObject() {\n    return {\n      x: this.x,\n      y: this.y,\n      command: this.command,\n      relative: this.relative,\n      controls: {\n        left: this.controls.left.toObject(),\n        right: this.controls.right.toObject()\n      },\n      rx: this.rx,\n      ry: this.ry,\n      xAxisRotation: this.xAxisRotation,\n      largeArcFlag: this.largeArcFlag,\n      sweepFlag: this.sweepFlag\n    };\n  }\n  toString() {\n    return JSON.stringify(this.toObject());\n  }\n};\nvar proto2 = {\n  command: {\n    enumerable: true,\n    get: function() {\n      return this._command;\n    },\n    set: function(command) {\n      if (this._command !== command) {\n        this._command = command;\n        if (this._bound) {\n          this.dispatchEvent(Events.Types.change);\n        }\n      }\n    }\n  },\n  relative: {\n    enumerable: true,\n    get: function() {\n      return this._relative;\n    },\n    set: function(relative) {\n      if (this._relative !== !!relative) {\n        this._relative = !!relative;\n        if (this._bound) {\n          this.dispatchEvent(Events.Types.change);\n        }\n      }\n    }\n  },\n  rx: {\n    enumerable: true,\n    get: function() {\n      return this._rx;\n    },\n    set: function(rx) {\n      if (this._rx !== rx) {\n        this._rx = rx;\n        if (this._bound) {\n          this.dispatchEvent(Events.Types.change);\n        }\n      }\n    }\n  },\n  ry: {\n    enumerable: true,\n    get: function() {\n      return this._ry;\n    },\n    set: function(ry) {\n      if (this._ry !== ry) {\n        this._ry = ry;\n        if (this._bound) {\n          this.dispatchEvent(Events.Types.change);\n        }\n      }\n    }\n  },\n  xAxisRotation: {\n    enumerable: true,\n    get: function() {\n      return this._xAxisRotation;\n    },\n    set: function(xAxisRotation) {\n      if (this._xAxisRotation !== xAxisRotation) {\n        this._xAxisRotation = xAxisRotation;\n        if (this._bound) {\n          this.dispatchEvent(Events.Types.change);\n        }\n      }\n    }\n  },\n  largeArcFlag: {\n    enumerable: true,\n    get: function() {\n      return this._largeArcFlag;\n    },\n    set: function(largeArcFlag) {\n      if (this._largeArcFlag !== largeArcFlag) {\n        this._largeArcFlag = largeArcFlag;\n        if (this._bound) {\n          this.dispatchEvent(Events.Types.change);\n        }\n      }\n    }\n  },\n  sweepFlag: {\n    get: function() {\n      return this._sweepFlag;\n    },\n    set: function(sweepFlag) {\n      if (this._sweepFlag !== sweepFlag) {\n        this._sweepFlag = sweepFlag;\n        if (this._bound) {\n          this.dispatchEvent(Events.Types.change);\n        }\n      }\n    }\n  }\n};\n\n// src/constants.js\nvar count = 0;\nvar Constants = {\n  nextFrameID: null,\n  Types: {\n    webgl: \"WebGLRenderer\",\n    svg: \"SVGRenderer\",\n    canvas: \"CanvasRenderer\"\n  },\n  Version: \"v0.8.10\",\n  PublishDate: \"2022-06-09T16:09:22.888Z\",\n  Identifier: \"two-\",\n  Resolution: 12,\n  AutoCalculateImportedMatrices: true,\n  Instances: [],\n  uniqueId: function() {\n    return count++;\n  }\n};\n\n// src/utils/curves.js\nvar Curve = {\n  CollinearityEpsilon: Math.pow(10, -30),\n  RecursionLimit: 16,\n  CuspLimit: 0,\n  Tolerance: {\n    distance: 0.25,\n    angle: 0,\n    epsilon: Number.EPSILON\n  },\n  abscissas: [\n    [0.5773502691896257],\n    [0, 0.7745966692414834],\n    [0.33998104358485626, 0.8611363115940526],\n    [0, 0.5384693101056831, 0.906179845938664],\n    [0.2386191860831969, 0.6612093864662645, 0.932469514203152],\n    [0, 0.4058451513773972, 0.7415311855993945, 0.9491079123427585],\n    [0.1834346424956498, 0.525532409916329, 0.7966664774136267, 0.9602898564975363],\n    [0, 0.3242534234038089, 0.6133714327005904, 0.8360311073266358, 0.9681602395076261],\n    [0.14887433898163122, 0.4333953941292472, 0.6794095682990244, 0.8650633666889845, 0.9739065285171717],\n    [0, 0.26954315595234496, 0.5190961292068118, 0.7301520055740494, 0.8870625997680953, 0.978228658146057],\n    [0.1252334085114689, 0.3678314989981802, 0.5873179542866175, 0.7699026741943047, 0.9041172563704749, 0.9815606342467192],\n    [0, 0.2304583159551348, 0.44849275103644687, 0.6423493394403402, 0.8015780907333099, 0.9175983992229779, 0.9841830547185881],\n    [0.10805494870734367, 0.31911236892788974, 0.5152486363581541, 0.6872929048116855, 0.827201315069765, 0.9284348836635735, 0.9862838086968123],\n    [0, 0.20119409399743451, 0.3941513470775634, 0.5709721726085388, 0.7244177313601701, 0.8482065834104272, 0.937273392400706, 0.9879925180204854],\n    [0.09501250983763744, 0.2816035507792589, 0.45801677765722737, 0.6178762444026438, 0.755404408355003, 0.8656312023878318, 0.9445750230732326, 0.9894009349916499]\n  ],\n  weights: [\n    [1],\n    [0.8888888888888888, 0.5555555555555556],\n    [0.6521451548625461, 0.34785484513745385],\n    [0.5688888888888889, 0.47862867049936647, 0.23692688505618908],\n    [0.46791393457269104, 0.3607615730481386, 0.17132449237917036],\n    [0.4179591836734694, 0.3818300505051189, 0.27970539148927664, 0.1294849661688697],\n    [0.362683783378362, 0.31370664587788727, 0.22238103445337448, 0.10122853629037626],\n    [0.3302393550012598, 0.31234707704000286, 0.26061069640293544, 0.1806481606948574, 0.08127438836157441],\n    [0.29552422471475287, 0.26926671930999635, 0.21908636251598204, 0.1494513491505806, 0.06667134430868814],\n    [0.2729250867779006, 0.26280454451024665, 0.23319376459199048, 0.18629021092773426, 0.1255803694649046, 0.05566856711617366],\n    [0.24914704581340277, 0.2334925365383548, 0.20316742672306592, 0.16007832854334622, 0.10693932599531843, 0.04717533638651183],\n    [0.2325515532308739, 0.22628318026289723, 0.2078160475368885, 0.17814598076194574, 0.13887351021978725, 0.09212149983772845, 0.04048400476531588],\n    [0.2152638534631578, 0.2051984637212956, 0.18553839747793782, 0.15720316715819355, 0.12151857068790319, 0.08015808715976021, 0.03511946033175186],\n    [0.2025782419255613, 0.19843148532711158, 0.1861610000155622, 0.16626920581699392, 0.13957067792615432, 0.10715922046717194, 0.07036604748810812, 0.03075324199611727],\n    [0.1894506104550685, 0.18260341504492358, 0.16915651939500254, 0.14959598881657674, 0.12462897125553388, 0.09515851168249279, 0.062253523938647894, 0.027152459411754096]\n  ]\n};\nfunction getComponentOnCubicBezier(t, a, b, c, d) {\n  const k = 1 - t;\n  return k * k * k * a + 3 * k * k * t * b + 3 * k * t * t * c + t * t * t * d;\n}\nfunction subdivide(x1, y1, x2, y2, x3, y3, x4, y4, limit) {\n  limit = limit || Curve.RecursionLimit;\n  const amount = limit + 1;\n  if (Math.abs(x1 - x4) < 1e-3 && Math.abs(y1 - y4) < 1e-3) {\n    return [new Anchor(x4, y4)];\n  }\n  const result = [];\n  for (let i = 0; i < amount; i++) {\n    const t = i / amount;\n    const x = getComponentOnCubicBezier(t, x1, x2, x3, x4);\n    const y = getComponentOnCubicBezier(t, y1, y2, y3, y4);\n    result.push(new Anchor(x, y));\n  }\n  return result;\n}\nfunction getCurveLength(x1, y1, x2, y2, x3, y3, x4, y4, limit) {\n  if (x1 === x2 && y1 === y2 && x3 === x4 && y3 === y4) {\n    const dx = x4 - x1;\n    const dy = y4 - y1;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n  const ax = 9 * (x2 - x3) + 3 * (x4 - x1), bx = 6 * (x1 + x3) - 12 * x2, cx = 3 * (x2 - x1), ay = 9 * (y2 - y3) + 3 * (y4 - y1), by = 6 * (y1 + y3) - 12 * y2, cy = 3 * (y2 - y1);\n  function integrand(t) {\n    const dx = (ax * t + bx) * t + cx, dy = (ay * t + by) * t + cy;\n    return Math.sqrt(dx * dx + dy * dy);\n  }\n  return integrate(integrand, 0, 1, limit || Curve.RecursionLimit);\n}\nfunction getCurveBoundingBox(x1, y1, x2, y2, x3, y3, x4, y4) {\n  const tvalues = [];\n  const bounds = [[], []];\n  let a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n  for (let i = 0; i < 2; ++i) {\n    if (i == 0) {\n      b = 6 * x1 - 12 * x2 + 6 * x3;\n      a = -3 * x1 + 9 * x2 - 9 * x3 + 3 * x4;\n      c = 3 * x2 - 3 * x1;\n    } else {\n      b = 6 * y1 - 12 * y2 + 6 * y3;\n      a = -3 * y1 + 9 * y2 - 9 * y3 + 3 * y4;\n      c = 3 * y2 - 3 * y1;\n    }\n    if (Math.abs(a) < 1e-12) {\n      if (Math.abs(b) < 1e-12) {\n        continue;\n      }\n      t = -c / b;\n      if (0 < t && t < 1) {\n        tvalues.push(t);\n      }\n      continue;\n    }\n    b2ac = b * b - 4 * c * a;\n    sqrtb2ac = Math.sqrt(b2ac);\n    if (b2ac < 0) {\n      continue;\n    }\n    t1 = (-b + sqrtb2ac) / (2 * a);\n    if (0 < t1 && t1 < 1) {\n      tvalues.push(t1);\n    }\n    t2 = (-b - sqrtb2ac) / (2 * a);\n    if (0 < t2 && t2 < 1) {\n      tvalues.push(t2);\n    }\n  }\n  let j = tvalues.length;\n  let jlen = j;\n  let mt;\n  while (j--) {\n    t = tvalues[j];\n    mt = 1 - t;\n    bounds[0][j] = mt * mt * mt * x1 + 3 * mt * mt * t * x2 + 3 * mt * t * t * x3 + t * t * t * x4;\n    bounds[1][j] = mt * mt * mt * y1 + 3 * mt * mt * t * y2 + 3 * mt * t * t * y3 + t * t * t * y4;\n  }\n  bounds[0][jlen] = x1;\n  bounds[1][jlen] = y1;\n  bounds[0][jlen + 1] = x4;\n  bounds[1][jlen + 1] = y4;\n  bounds[0].length = bounds[1].length = jlen + 2;\n  return {\n    min: { x: Math.min.apply(0, bounds[0]), y: Math.min.apply(0, bounds[1]) },\n    max: { x: Math.max.apply(0, bounds[0]), y: Math.max.apply(0, bounds[1]) }\n  };\n}\nfunction integrate(f, a, b, n) {\n  let x = Curve.abscissas[n - 2], w = Curve.weights[n - 2], A = 0.5 * (b - a), B = A + a, i = 0, m = n + 1 >> 1, sum = n & 1 ? w[i++] * f(B) : 0;\n  while (i < m) {\n    const Ax = A * x[i];\n    sum += w[i++] * (f(B + Ax) + f(B - Ax));\n  }\n  return A * sum;\n}\nfunction getCurveFromPoints(points, closed2) {\n  const l = points.length, last = l - 1;\n  for (let i = 0; i < l; i++) {\n    const point = points[i];\n    const prev = closed2 ? mod(i - 1, l) : Math.max(i - 1, 0);\n    const next = closed2 ? mod(i + 1, l) : Math.min(i + 1, last);\n    const a = points[prev];\n    const b = point;\n    const c = points[next];\n    getControlPoints(a, b, c);\n    b.command = i === 0 ? Commands.move : Commands.curve;\n  }\n}\nfunction getControlPoints(a, b, c) {\n  const a1 = Vector.angleBetween(a, b);\n  const a2 = Vector.angleBetween(c, b);\n  let d1 = Vector.distanceBetween(a, b);\n  let d2 = Vector.distanceBetween(c, b);\n  let mid = (a1 + a2) / 2;\n  if (d1 < 1e-4 || d2 < 1e-4) {\n    if (typeof b.relative === \"boolean\" && !b.relative) {\n      b.controls.left.copy(b);\n      b.controls.right.copy(b);\n    }\n    return b;\n  }\n  d1 *= 0.33;\n  d2 *= 0.33;\n  if (a2 < a1) {\n    mid += HALF_PI;\n  } else {\n    mid -= HALF_PI;\n  }\n  b.controls.left.x = Math.cos(mid) * d1;\n  b.controls.left.y = Math.sin(mid) * d1;\n  mid -= Math.PI;\n  b.controls.right.x = Math.cos(mid) * d2;\n  b.controls.right.y = Math.sin(mid) * d2;\n  if (typeof b.relative === \"boolean\" && !b.relative) {\n    b.controls.left.x += b.x;\n    b.controls.left.y += b.y;\n    b.controls.right.x += b.x;\n    b.controls.right.y += b.y;\n  }\n  return b;\n}\nfunction getReflection(a, b, relative) {\n  return new Vector(2 * a.x - (b.x + a.x) - (relative ? a.x : 0), 2 * a.y - (b.y + a.y) - (relative ? a.y : 0));\n}\nfunction getAnchorsFromArcData(center, xAxisRotation, rx, ry, ts, td, ccw) {\n  const resolution = Constants.Resolution;\n  const anchors = [];\n  for (let i = 0; i < resolution; i++) {\n    let pct = (i + 1) / resolution;\n    if (ccw) {\n      pct = 1 - pct;\n    }\n    const theta = pct * td + ts;\n    const x = rx * Math.cos(theta);\n    const y = ry * Math.sin(theta);\n    const anchor2 = new Anchor(x, y);\n    anchor2.command = Commands.line;\n    anchors.push(anchor2);\n  }\n}\n\n// src/utils/device-pixel-ratio.js\nvar devicePixelRatio = root.devicePixelRatio || 1;\nfunction getBackingStoreRatio(ctx) {\n  return ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n}\nfunction getRatio(ctx) {\n  return devicePixelRatio / getBackingStoreRatio(ctx);\n}\n\n// src/utils/underscore.js\nvar slice = Array.prototype.slice;\nfunction isArrayLike(collection) {\n  if (collection === null || collection === void 0)\n    return false;\n  const length = collection.length;\n  return typeof length == \"number\" && length >= 0 && length < 4294967296;\n}\nvar _ = {\n  isNaN: function(obj) {\n    return typeof obj === \"number\" && obj !== +obj;\n  },\n  isElement: function(obj) {\n    return !!(obj && obj.nodeType === 1);\n  },\n  isObject: function(obj) {\n    const type = typeof obj;\n    return type === \"function\" || type === \"object\" && !!obj;\n  },\n  extend: function(base) {\n    const sources = slice.call(arguments, 1);\n    for (let i = 0; i < sources.length; i++) {\n      const obj = sources[i];\n      for (let k in obj) {\n        base[k] = obj[k];\n      }\n    }\n    return base;\n  },\n  defaults: function(base) {\n    const sources = slice.call(arguments, 1);\n    for (let i = 0; i < sources.length; i++) {\n      const obj = sources[i];\n      for (let k in obj) {\n        if (base[k] === void 0) {\n          base[k] = obj[k];\n        }\n      }\n    }\n    return base;\n  },\n  each: function(obj, iteratee, context) {\n    const ctx = context || this;\n    const keys = !isArrayLike(obj) && Object.keys(obj);\n    const length = (keys || obj).length;\n    for (let i = 0; i < length; i++) {\n      const k = keys ? keys[i] : i;\n      iteratee.call(ctx, obj[k], k, obj);\n    }\n    return obj;\n  },\n  performance: root.performance && root.performance.now ? root.performance : Date\n};\n\n// src/element.js\nvar Element = class extends Events {\n  constructor() {\n    super();\n    __publicField(this, \"_flagId\", false);\n    __publicField(this, \"_flagClassName\", false);\n    __publicField(this, \"_renderer\", {});\n    __publicField(this, \"_id\", \"\");\n    __publicField(this, \"_className\", \"\");\n    __publicField(this, \"classList\", []);\n    for (let prop in proto3) {\n      Object.defineProperty(this, prop, proto3[prop]);\n    }\n  }\n  flagReset() {\n    this._flagId = this._flagClassName = false;\n  }\n};\nvar proto3 = {\n  renderer: {\n    enumerable: false,\n    get: function() {\n      return this._renderer;\n    }\n  },\n  id: {\n    enumerable: true,\n    get: function() {\n      return this._id;\n    },\n    set: function(v) {\n      const id = this._id;\n      if (v === this._id) {\n        return;\n      }\n      this._id = v;\n      this._flagId = true;\n      if (this.parent) {\n        delete this.parent.children.ids[id];\n        this.parent.children.ids[this._id] = this;\n      }\n    }\n  },\n  className: {\n    enumerable: true,\n    get: function() {\n      return this._className;\n    },\n    set: function(v) {\n      if (this._className !== v) {\n        this._flagClassName = true;\n        this.classList = v.split(/\\s+?/);\n        this._className = v;\n      }\n    }\n  }\n};\n\n// src/matrix.js\nvar cos = Math.cos;\nvar sin = Math.sin;\nvar tan = Math.tan;\nvar array = [];\nvar _Matrix = class extends Events {\n  constructor(a, b, c, d, e, f) {\n    super();\n    __publicField(this, \"elements\", new NumArray(9));\n    __publicField(this, \"manual\", false);\n    let elements = a;\n    if (!Array.isArray(elements)) {\n      elements = Array.prototype.slice.call(arguments);\n    }\n    this.identity();\n    if (elements.length > 0) {\n      this.set(elements);\n    }\n  }\n  static Multiply(A, B, C) {\n    if (B.length <= 3) {\n      const e = A;\n      let x, y, z;\n      const a = B[0] || 0, b = B[1] || 0, c = B[2] || 0;\n      x = e[0] * a + e[1] * b + e[2] * c;\n      y = e[3] * a + e[4] * b + e[5] * c;\n      z = e[6] * a + e[7] * b + e[8] * c;\n      return { x, y, z };\n    }\n    const A0 = A[0], A1 = A[1], A2 = A[2];\n    const A3 = A[3], A4 = A[4], A5 = A[5];\n    const A6 = A[6], A7 = A[7], A8 = A[8];\n    const B0 = B[0], B1 = B[1], B2 = B[2];\n    const B3 = B[3], B4 = B[4], B5 = B[5];\n    const B6 = B[6], B7 = B[7], B8 = B[8];\n    C = C || new NumArray(9);\n    C[0] = A0 * B0 + A1 * B3 + A2 * B6;\n    C[1] = A0 * B1 + A1 * B4 + A2 * B7;\n    C[2] = A0 * B2 + A1 * B5 + A2 * B8;\n    C[3] = A3 * B0 + A4 * B3 + A5 * B6;\n    C[4] = A3 * B1 + A4 * B4 + A5 * B7;\n    C[5] = A3 * B2 + A4 * B5 + A5 * B8;\n    C[6] = A6 * B0 + A7 * B3 + A8 * B6;\n    C[7] = A6 * B1 + A7 * B4 + A8 * B7;\n    C[8] = A6 * B2 + A7 * B5 + A8 * B8;\n    return C;\n  }\n  set(a, b, c, d, e, f, g, h, i) {\n    if (typeof b === \"undefined\") {\n      const elements = a;\n      a = elements[0];\n      b = elements[1];\n      c = elements[2];\n      d = elements[3];\n      e = elements[4];\n      f = elements[5];\n      g = elements[6];\n      h = elements[7];\n      i = elements[8];\n    }\n    this.elements[0] = a;\n    this.elements[1] = b;\n    this.elements[2] = c;\n    this.elements[3] = d;\n    this.elements[4] = e;\n    this.elements[5] = f;\n    this.elements[6] = g;\n    this.elements[7] = h;\n    this.elements[8] = i;\n    return this.trigger(Events.Types.change);\n  }\n  copy(m) {\n    this.elements[0] = m.elements[0];\n    this.elements[1] = m.elements[1];\n    this.elements[2] = m.elements[2];\n    this.elements[3] = m.elements[3];\n    this.elements[4] = m.elements[4];\n    this.elements[5] = m.elements[5];\n    this.elements[6] = m.elements[6];\n    this.elements[7] = m.elements[7];\n    this.elements[8] = m.elements[8];\n    this.manual = m.manual;\n    return this.trigger(Events.Types.change);\n  }\n  identity() {\n    this.elements[0] = _Matrix.Identity[0];\n    this.elements[1] = _Matrix.Identity[1];\n    this.elements[2] = _Matrix.Identity[2];\n    this.elements[3] = _Matrix.Identity[3];\n    this.elements[4] = _Matrix.Identity[4];\n    this.elements[5] = _Matrix.Identity[5];\n    this.elements[6] = _Matrix.Identity[6];\n    this.elements[7] = _Matrix.Identity[7];\n    this.elements[8] = _Matrix.Identity[8];\n    return this.trigger(Events.Types.change);\n  }\n  multiply(a, b, c, d, e, f, g, h, i) {\n    if (typeof b === \"undefined\") {\n      this.elements[0] *= a;\n      this.elements[1] *= a;\n      this.elements[2] *= a;\n      this.elements[3] *= a;\n      this.elements[4] *= a;\n      this.elements[5] *= a;\n      this.elements[6] *= a;\n      this.elements[7] *= a;\n      this.elements[8] *= a;\n      return this.trigger(Events.Types.change);\n    }\n    if (typeof d === \"undefined\") {\n      a = a || 0;\n      b = b || 0;\n      c = c || 0;\n      e = this.elements;\n      const x = e[0] * a + e[1] * b + e[2] * c;\n      const y = e[3] * a + e[4] * b + e[5] * c;\n      const z = e[6] * a + e[7] * b + e[8] * c;\n      return { x, y, z };\n    }\n    const A = this.elements;\n    const B = [a, b, c, d, e, f, g, h, i];\n    const A0 = A[0], A1 = A[1], A2 = A[2];\n    const A3 = A[3], A4 = A[4], A5 = A[5];\n    const A6 = A[6], A7 = A[7], A8 = A[8];\n    const B0 = B[0], B1 = B[1], B2 = B[2];\n    const B3 = B[3], B4 = B[4], B5 = B[5];\n    const B6 = B[6], B7 = B[7], B8 = B[8];\n    this.elements[0] = A0 * B0 + A1 * B3 + A2 * B6;\n    this.elements[1] = A0 * B1 + A1 * B4 + A2 * B7;\n    this.elements[2] = A0 * B2 + A1 * B5 + A2 * B8;\n    this.elements[3] = A3 * B0 + A4 * B3 + A5 * B6;\n    this.elements[4] = A3 * B1 + A4 * B4 + A5 * B7;\n    this.elements[5] = A3 * B2 + A4 * B5 + A5 * B8;\n    this.elements[6] = A6 * B0 + A7 * B3 + A8 * B6;\n    this.elements[7] = A6 * B1 + A7 * B4 + A8 * B7;\n    this.elements[8] = A6 * B2 + A7 * B5 + A8 * B8;\n    return this.trigger(Events.Types.change);\n  }\n  inverse(out) {\n    const a = this.elements;\n    out = out || new _Matrix();\n    const a00 = a[0], a01 = a[1], a02 = a[2];\n    const a10 = a[3], a11 = a[4], a12 = a[5];\n    const a20 = a[6], a21 = a[7], a22 = a[8];\n    const b01 = a22 * a11 - a12 * a21;\n    const b11 = -a22 * a10 + a12 * a20;\n    const b21 = a21 * a10 - a11 * a20;\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n    if (!det) {\n      return null;\n    }\n    det = 1 / det;\n    out.elements[0] = b01 * det;\n    out.elements[1] = (-a22 * a01 + a02 * a21) * det;\n    out.elements[2] = (a12 * a01 - a02 * a11) * det;\n    out.elements[3] = b11 * det;\n    out.elements[4] = (a22 * a00 - a02 * a20) * det;\n    out.elements[5] = (-a12 * a00 + a02 * a10) * det;\n    out.elements[6] = b21 * det;\n    out.elements[7] = (-a21 * a00 + a01 * a20) * det;\n    out.elements[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n  }\n  scale(sx, sy) {\n    const l = arguments.length;\n    if (l <= 1) {\n      sy = sx;\n    }\n    return this.multiply(sx, 0, 0, 0, sy, 0, 0, 0, 1);\n  }\n  rotate(Number2) {\n    const c = cos(Number2);\n    const s = sin(Number2);\n    return this.multiply(c, -s, 0, s, c, 0, 0, 0, 1);\n  }\n  translate(x, y) {\n    return this.multiply(1, 0, x, 0, 1, y, 0, 0, 1);\n  }\n  skewX(Number2) {\n    const a = tan(Number2);\n    return this.multiply(1, a, 0, 0, 1, 0, 0, 0, 1);\n  }\n  skewY(Number2) {\n    const a = tan(Number2);\n    return this.multiply(1, 0, 0, a, 1, 0, 0, 0, 1);\n  }\n  toString(fullMatrix) {\n    array.length = 0;\n    this.toTransformArray(fullMatrix, array);\n    return array.map(toFixed).join(\" \");\n  }\n  toTransformArray(fullMatrix, output) {\n    const elements = this.elements;\n    const hasOutput = !!output;\n    const a = elements[0];\n    const b = elements[1];\n    const c = elements[2];\n    const d = elements[3];\n    const e = elements[4];\n    const f = elements[5];\n    if (fullMatrix) {\n      const g = elements[6];\n      const h = elements[7];\n      const i = elements[8];\n      if (hasOutput) {\n        output[0] = a;\n        output[1] = d;\n        output[2] = g;\n        output[3] = b;\n        output[4] = e;\n        output[5] = h;\n        output[6] = c;\n        output[7] = f;\n        output[8] = i;\n        return;\n      }\n      return [\n        a,\n        d,\n        g,\n        b,\n        e,\n        h,\n        c,\n        f,\n        i\n      ];\n    }\n    if (hasOutput) {\n      output[0] = a;\n      output[1] = d;\n      output[2] = b;\n      output[3] = e;\n      output[4] = c;\n      output[5] = f;\n      return;\n    }\n    return [\n      a,\n      d,\n      b,\n      e,\n      c,\n      f\n    ];\n  }\n  toArray(fullMatrix, output) {\n    const elements = this.elements;\n    const hasOutput = !!output;\n    const a = elements[0];\n    const b = elements[1];\n    const c = elements[2];\n    const d = elements[3];\n    const e = elements[4];\n    const f = elements[5];\n    if (fullMatrix) {\n      const g = elements[6];\n      const h = elements[7];\n      const i = elements[8];\n      if (hasOutput) {\n        output[0] = a;\n        output[1] = b;\n        output[2] = c;\n        output[3] = d;\n        output[4] = e;\n        output[5] = f;\n        output[6] = g;\n        output[7] = h;\n        output[8] = i;\n        return;\n      }\n      return [\n        a,\n        b,\n        c,\n        d,\n        e,\n        f,\n        g,\n        h,\n        i\n      ];\n    }\n    if (hasOutput) {\n      output[0] = a;\n      output[1] = b;\n      output[2] = c;\n      output[3] = d;\n      output[4] = e;\n      output[5] = f;\n      return;\n    }\n    return [\n      a,\n      b,\n      c,\n      d,\n      e,\n      f\n    ];\n  }\n  toObject() {\n    return {\n      elements: this.toArray(true),\n      manual: !!this.manual\n    };\n  }\n  clone() {\n    return new _Matrix().copy(this);\n  }\n};\nvar Matrix2 = _Matrix;\n__publicField(Matrix2, \"Identity\", [\n  1,\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  1\n]);\nsetMatrix(Matrix2);\n\n// src/shape.js\nvar Shape = class extends Element {\n  constructor() {\n    super();\n    __publicField(this, \"_flagMatrix\", true);\n    __publicField(this, \"_flagScale\", false);\n    __publicField(this, \"_matrix\", null);\n    __publicField(this, \"_worldMatrix\", null);\n    __publicField(this, \"_position\", null);\n    __publicField(this, \"_rotation\", 0);\n    __publicField(this, \"_scale\", 1);\n    __publicField(this, \"_skewX\", 0);\n    __publicField(this, \"_skewY\", 0);\n    for (let prop in proto4) {\n      Object.defineProperty(this, prop, proto4[prop]);\n    }\n    this._renderer.flagMatrix = FlagMatrix.bind(this);\n    this.isShape = true;\n    this.id = Constants.Identifier + Constants.uniqueId();\n    this.matrix = new Matrix2();\n    this.worldMatrix = new Matrix2();\n    this.position = new Vector();\n    this.rotation = 0;\n    this.scale = 1;\n    this.skewX = 0;\n    this.skewY = 0;\n  }\n  get renderer() {\n    return this._renderer;\n  }\n  set renderer(v) {\n    this._renderer = v;\n  }\n  get translation() {\n    return proto4.position.get.apply(this, arguments);\n  }\n  set translation(v) {\n    proto4.position.set.apply(this, arguments);\n  }\n  addTo(group) {\n    group.add(this);\n    return this;\n  }\n  remove() {\n    if (!this.parent) {\n      return this;\n    }\n    this.parent.remove(this);\n    return this;\n  }\n  clone(parent) {\n    const clone = new Shape();\n    clone.position.copy(this.position);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n    clone.skewX = this.skewX;\n    clone.skewY = this.skewY;\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone._update();\n  }\n  _update(bubbles) {\n    if (!this._matrix.manual && this._flagMatrix) {\n      this._matrix.identity().translate(this.position.x, this.position.y);\n      if (this._scale instanceof Vector) {\n        this._matrix.scale(this._scale.x, this._scale.y);\n      } else {\n        this._matrix.scale(this._scale);\n      }\n      this._matrix.rotate(this.rotation);\n      this._matrix.skewX(this.skewX);\n      this._matrix.skewY(this.skewY);\n    }\n    if (bubbles) {\n      if (this.parent && this.parent._update) {\n        this.parent._update();\n      }\n    }\n    return this;\n  }\n  flagReset() {\n    this._flagMatrix = this._flagScale = false;\n    super.flagReset.call(this);\n    return this;\n  }\n};\nvar proto4 = {\n  position: {\n    enumerable: true,\n    get: function() {\n      return this._position;\n    },\n    set: function(v) {\n      if (this._position) {\n        this._position.unbind(Events.Types.change, this._renderer.flagMatrix);\n      }\n      this._position = v;\n      this._position.bind(Events.Types.change, this._renderer.flagMatrix);\n      FlagMatrix.call(this);\n    }\n  },\n  rotation: {\n    enumerable: true,\n    get: function() {\n      return this._rotation;\n    },\n    set: function(v) {\n      this._rotation = v;\n      this._flagMatrix = true;\n    }\n  },\n  scale: {\n    enumerable: true,\n    get: function() {\n      return this._scale;\n    },\n    set: function(v) {\n      if (this._scale instanceof Vector) {\n        this._scale.unbind(Events.Types.change, this._renderer.flagMatrix);\n      }\n      this._scale = v;\n      if (this._scale instanceof Vector) {\n        this._scale.bind(Events.Types.change, this._renderer.flagMatrix);\n      }\n      this._flagMatrix = true;\n      this._flagScale = true;\n    }\n  },\n  skewX: {\n    enumerable: true,\n    get: function() {\n      return this._skewX;\n    },\n    set: function(v) {\n      this._skewX = v;\n      this._flagMatrix = true;\n    }\n  },\n  skewY: {\n    enumerable: true,\n    get: function() {\n      return this._skewY;\n    },\n    set: function(v) {\n      this._skewY = v;\n      this._flagMatrix = true;\n    }\n  },\n  matrix: {\n    enumerable: true,\n    get: function() {\n      return this._matrix;\n    },\n    set: function(v) {\n      this._matrix = v;\n      this._flagMatrix = true;\n    }\n  },\n  worldMatrix: {\n    enumerable: true,\n    get: function() {\n      getComputedMatrix(this, this._worldMatrix);\n      return this._worldMatrix;\n    },\n    set: function(v) {\n      this._worldMatrix = v;\n    }\n  }\n};\nfunction FlagMatrix() {\n  this._flagMatrix = true;\n}\n\n// src/collection.js\nvar Collection = class extends Array {\n  constructor() {\n    super();\n    __publicField(this, \"_events\", new Events());\n    if (arguments[0] && Array.isArray(arguments[0])) {\n      if (arguments[0].length > 0) {\n        this.push.apply(this, arguments[0]);\n      }\n    } else if (arguments.length > 0) {\n      this.push.apply(this, arguments);\n    }\n  }\n  get _bound() {\n    return this._events._bound;\n  }\n  set _bound(v) {\n    this._events._bound = v;\n  }\n  addEventListener() {\n    return this._events.addEventListener.apply(this, arguments);\n  }\n  on() {\n    return this._events.on.apply(this, arguments);\n  }\n  bind() {\n    return this._events.bind.apply(this, arguments);\n  }\n  removeEventListener() {\n    return this._events.removeEventListener.apply(this, arguments);\n  }\n  off() {\n    return this._events.off.apply(this, arguments);\n  }\n  unbind() {\n    return this._events.unbind.apply(this, arguments);\n  }\n  dispatchEvent() {\n    return this._events.dispatchEvent.apply(this, arguments);\n  }\n  trigger() {\n    return this._events.trigger.apply(this, arguments);\n  }\n  listen() {\n    return this._events.listen.apply(this, arguments);\n  }\n  ignore() {\n    return this._events.ignore.apply(this, arguments);\n  }\n  pop() {\n    const popped = super.pop.apply(this, arguments);\n    this.trigger(Events.Types.remove, [popped]);\n    return popped;\n  }\n  shift() {\n    const shifted = super.shift.apply(this, arguments);\n    this.trigger(Events.Types.remove, [shifted]);\n    return shifted;\n  }\n  push() {\n    const pushed = super.push.apply(this, arguments);\n    this.trigger(Events.Types.insert, arguments);\n    return pushed;\n  }\n  unshift() {\n    const unshifted = super.unshift.apply(this, arguments);\n    this.trigger(Events.Types.insert, arguments);\n    return unshifted;\n  }\n  splice() {\n    const spliced = super.splice.apply(this, arguments);\n    this.trigger(Events.Types.remove, spliced);\n    if (arguments.length > 2) {\n      const inserted = this.slice(arguments[0], arguments[0] + arguments.length - 2);\n      this.trigger(Events.Types.insert, inserted);\n      this.trigger(Events.Types.order);\n    }\n    return spliced;\n  }\n  sort() {\n    super.sort.apply(this, arguments);\n    this.trigger(Events.Types.order);\n    return this;\n  }\n  reverse() {\n    super.reverse.apply(this, arguments);\n    this.trigger(Events.Types.order);\n    return this;\n  }\n  indexOf() {\n    return super.indexOf.apply(this, arguments);\n  }\n};\n\n// src/children.js\nvar Children = class extends Collection {\n  constructor(children) {\n    children = Array.isArray(children) ? children : Array.prototype.slice.call(arguments);\n    super(children);\n    __publicField(this, \"ids\", {});\n    this.attach(children);\n    this.on(Events.Types.insert, this.attach);\n    this.on(Events.Types.remove, this.detach);\n  }\n  attach(children) {\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child && child.id) {\n        this.ids[child.id] = child;\n      }\n    }\n    return this;\n  }\n  detach(children) {\n    for (let i = 0; i < children.length; i++) {\n      delete this.ids[children[i].id];\n    }\n    return this;\n  }\n};\n\n// src/group.js\nvar min = Math.min;\nvar max = Math.max;\nvar _Group = class extends Shape {\n  constructor(children) {\n    super();\n    __publicField(this, \"_flagAdditions\", false);\n    __publicField(this, \"_flagSubtractions\", false);\n    __publicField(this, \"_flagOrder\", false);\n    __publicField(this, \"_flagOpacity\", true);\n    __publicField(this, \"_flagBeginning\", false);\n    __publicField(this, \"_flagEnding\", false);\n    __publicField(this, \"_flagLength\", false);\n    __publicField(this, \"_flagMask\", false);\n    __publicField(this, \"_fill\", \"#fff\");\n    __publicField(this, \"_stroke\", \"#000\");\n    __publicField(this, \"_linewidth\", 1);\n    __publicField(this, \"_opacity\", 1);\n    __publicField(this, \"_visible\", true);\n    __publicField(this, \"_cap\", \"round\");\n    __publicField(this, \"_join\", \"round\");\n    __publicField(this, \"_miter\", 4);\n    __publicField(this, \"_closed\", true);\n    __publicField(this, \"_curved\", false);\n    __publicField(this, \"_automatic\", true);\n    __publicField(this, \"_beginning\", 0);\n    __publicField(this, \"_ending\", 1);\n    __publicField(this, \"_length\", 0);\n    __publicField(this, \"_mask\", null);\n    for (let prop in proto5) {\n      Object.defineProperty(this, prop, proto5[prop]);\n    }\n    this._renderer.type = \"group\";\n    this.additions = [];\n    this.subtractions = [];\n    this.children = Array.isArray(children) ? children : Array.prototype.slice.call(arguments);\n  }\n  static InsertChildren(children) {\n    for (let i = 0; i < children.length; i++) {\n      replaceParent.call(this, children[i], this);\n    }\n  }\n  static RemoveChildren(children) {\n    for (let i = 0; i < children.length; i++) {\n      replaceParent.call(this, children[i]);\n    }\n  }\n  static OrderChildren(children) {\n    this._flagOrder = true;\n  }\n  clone(parent) {\n    const clone = new _Group();\n    const children = this.children.map(function(child) {\n      return child.clone();\n    });\n    clone.add(children);\n    clone.opacity = this.opacity;\n    if (this.mask) {\n      clone.mask = this.mask;\n    }\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n    clone.className = this.className;\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone._update();\n  }\n  toObject() {\n    const result = {\n      children: [],\n      translation: this.translation.toObject(),\n      rotation: this.rotation,\n      scale: this.scale instanceof Vector ? this.scale.toObject() : this.scale,\n      opacity: this.opacity,\n      className: this.className,\n      mask: this.mask ? this.mask.toObject() : null\n    };\n    if (this.matrix.manual) {\n      result.matrix = this.matrix.toObject();\n    }\n    _.each(this.children, function(child, i) {\n      result.children[i] = child.toObject();\n    }, this);\n    return result;\n  }\n  corner() {\n    const rect = this.getBoundingClientRect(true);\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      child.translation.x -= rect.left;\n      child.translation.y -= rect.top;\n    }\n    if (this.mask) {\n      this.mask.translation.x -= rect.left;\n      this.mask.translation.y -= rect.top;\n    }\n    return this;\n  }\n  center() {\n    const rect = this.getBoundingClientRect(true);\n    const cx = rect.left + rect.width / 2 - this.translation.x;\n    const cy = rect.top + rect.height / 2 - this.translation.y;\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      if (child.isShape) {\n        child.translation.x -= cx;\n        child.translation.y -= cy;\n      }\n    }\n    if (this.mask) {\n      this.mask.translation.x -= cx;\n      this.mask.translation.y -= cy;\n    }\n    return this;\n  }\n  getById(id) {\n    let found = null;\n    function search(node) {\n      if (node.id === id) {\n        return node;\n      } else if (node.children) {\n        for (let i = 0; i < node.children.length; i++) {\n          found = search(node.children[i]);\n          if (found) {\n            return found;\n          }\n        }\n      }\n      return null;\n    }\n    return search(this);\n  }\n  getByClassName(className) {\n    const found = [];\n    function search(node) {\n      if (Array.prototype.indexOf.call(node.classList, className) >= 0) {\n        found.push(node);\n      }\n      if (node.children) {\n        for (let i = 0; i < node.children.length; i++) {\n          const child = node.children[i];\n          search(child);\n        }\n      }\n      return found;\n    }\n    return search(this);\n  }\n  getByType(type) {\n    const found = [];\n    function search(node) {\n      if (node instanceof type) {\n        found.push(node);\n      }\n      if (node.children) {\n        for (let i = 0; i < node.children.length; i++) {\n          const child = node.children[i];\n          search(child);\n        }\n      }\n      return found;\n    }\n    return search(this);\n  }\n  add(objects) {\n    if (!(objects instanceof Array)) {\n      objects = Array.prototype.slice.call(arguments);\n    } else {\n      objects = objects.slice();\n    }\n    for (let i = 0; i < objects.length; i++) {\n      const child = objects[i];\n      if (!(child && child.id)) {\n        continue;\n      }\n      const index = Array.prototype.indexOf.call(this.children, child);\n      if (index >= 0) {\n        this.children.splice(index, 1);\n      }\n      this.children.push(child);\n    }\n    return this;\n  }\n  remove(objects) {\n    const l = arguments.length, grandparent = this.parent;\n    if (l <= 0 && grandparent) {\n      grandparent.remove(this);\n      return this;\n    }\n    if (!(objects instanceof Array)) {\n      objects = Array.prototype.slice.call(arguments);\n    } else {\n      objects = objects.slice();\n    }\n    for (let i = 0; i < objects.length; i++) {\n      const object = objects[i];\n      if (!object || !this.children.ids[object.id]) {\n        continue;\n      }\n      const index = this.children.indexOf(object);\n      if (index >= 0) {\n        this.children.splice(index, 1);\n      }\n    }\n    return this;\n  }\n  getBoundingClientRect(shallow) {\n    let rect, matrix3, a, b, c, d, tc, lc, rc, bc;\n    this._update(true);\n    let left = Infinity, right = -Infinity, top = Infinity, bottom = -Infinity;\n    const regex3 = /texture|gradient/i;\n    matrix3 = shallow ? this._matrix : getComputedMatrix(this);\n    for (let i = 0; i < this.children.length; i++) {\n      const child = this.children[i];\n      if (!child.visible || regex3.test(child._renderer.type)) {\n        continue;\n      }\n      rect = child.getBoundingClientRect(shallow);\n      tc = typeof rect.top !== \"number\" || _.isNaN(rect.top) || !isFinite(rect.top);\n      lc = typeof rect.left !== \"number\" || _.isNaN(rect.left) || !isFinite(rect.left);\n      rc = typeof rect.right !== \"number\" || _.isNaN(rect.right) || !isFinite(rect.right);\n      bc = typeof rect.bottom !== \"number\" || _.isNaN(rect.bottom) || !isFinite(rect.bottom);\n      if (tc || lc || rc || bc) {\n        continue;\n      }\n      top = min(rect.top, top);\n      left = min(rect.left, left);\n      right = max(rect.right, right);\n      bottom = max(rect.bottom, bottom);\n    }\n    if (shallow) {\n      a = matrix3.multiply(left, top, 1);\n      b = matrix3.multiply(left, bottom, 1);\n      c = matrix3.multiply(right, top, 1);\n      d = matrix3.multiply(right, bottom, 1);\n      top = min(a.y, b.y, c.y, d.y);\n      left = min(a.x, b.x, c.x, d.x);\n      right = max(a.x, b.x, c.x, d.x);\n      bottom = max(a.y, b.y, c.y, d.y);\n    }\n    return {\n      top,\n      left,\n      right,\n      bottom,\n      width: right - left,\n      height: bottom - top\n    };\n  }\n  noFill() {\n    this.children.forEach(function(child) {\n      child.noFill();\n    });\n    return this;\n  }\n  noStroke() {\n    this.children.forEach(function(child) {\n      child.noStroke();\n    });\n    return this;\n  }\n  subdivide() {\n    const args = arguments;\n    this.children.forEach(function(child) {\n      child.subdivide.apply(child, args);\n    });\n    return this;\n  }\n  _update() {\n    let i, l, child;\n    if (this._flagBeginning || this._flagEnding) {\n      const beginning = Math.min(this._beginning, this._ending);\n      const ending = Math.max(this._beginning, this._ending);\n      const length = this.length;\n      let sum = 0;\n      const bd = beginning * length;\n      const ed = ending * length;\n      for (i = 0; i < this.children.length; i++) {\n        child = this.children[i];\n        l = child.length;\n        if (bd > sum + l) {\n          child.beginning = 1;\n          child.ending = 1;\n        } else if (ed < sum) {\n          child.beginning = 0;\n          child.ending = 0;\n        } else if (bd > sum && bd < sum + l) {\n          child.beginning = (bd - sum) / l;\n          child.ending = 1;\n        } else if (ed > sum && ed < sum + l) {\n          child.beginning = 0;\n          child.ending = (ed - sum) / l;\n        } else {\n          child.beginning = 0;\n          child.ending = 1;\n        }\n        sum += l;\n      }\n    }\n    return super._update.apply(this, arguments);\n  }\n  flagReset() {\n    if (this._flagAdditions) {\n      this.additions.length = 0;\n      this._flagAdditions = false;\n    }\n    if (this._flagSubtractions) {\n      this.subtractions.length = 0;\n      this._flagSubtractions = false;\n    }\n    this._flagOrder = this._flagMask = this._flagOpacity = this._flagBeginning = this._flagEnding = false;\n    super.flagReset.call(this);\n    return this;\n  }\n};\nvar Group = _Group;\n__publicField(Group, \"Children\", Children);\n__publicField(Group, \"Properties\", [\n  \"fill\",\n  \"stroke\",\n  \"linewidth\",\n  \"cap\",\n  \"join\",\n  \"miter\",\n  \"closed\",\n  \"curved\",\n  \"automatic\"\n]);\nvar proto5 = {\n  visible: {\n    enumerable: true,\n    get: function() {\n      return this._visible;\n    },\n    set: function(v) {\n      this._flagVisible = this._visible !== v || this._flagVisible;\n      this._visible = v;\n    }\n  },\n  opacity: {\n    enumerable: true,\n    get: function() {\n      return this._opacity;\n    },\n    set: function(v) {\n      this._flagOpacity = this._opacity !== v || this._flagOpacity;\n      this._opacity = v;\n    }\n  },\n  beginning: {\n    enumerable: true,\n    get: function() {\n      return this._beginning;\n    },\n    set: function(v) {\n      this._flagBeginning = this._beginning !== v || this._flagBeginning;\n      this._beginning = v;\n    }\n  },\n  ending: {\n    enumerable: true,\n    get: function() {\n      return this._ending;\n    },\n    set: function(v) {\n      this._flagEnding = this._ending !== v || this._flagEnding;\n      this._ending = v;\n    }\n  },\n  length: {\n    enumerable: true,\n    get: function() {\n      if (this._flagLength || this._length <= 0) {\n        this._length = 0;\n        if (!this.children) {\n          return this._length;\n        }\n        for (let i = 0; i < this.children.length; i++) {\n          const child = this.children[i];\n          this._length += child.length;\n        }\n      }\n      return this._length;\n    }\n  },\n  fill: {\n    enumerable: true,\n    get: function() {\n      return this._fill;\n    },\n    set: function(v) {\n      this._fill = v;\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i];\n        child.fill = v;\n      }\n    }\n  },\n  stroke: {\n    enumerable: true,\n    get: function() {\n      return this._stroke;\n    },\n    set: function(v) {\n      this._stroke = v;\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i];\n        child.stroke = v;\n      }\n    }\n  },\n  linewidth: {\n    enumerable: true,\n    get: function() {\n      return this._linewidth;\n    },\n    set: function(v) {\n      this._linewidth = v;\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i];\n        child.linewidth = v;\n      }\n    }\n  },\n  join: {\n    enumerable: true,\n    get: function() {\n      return this._join;\n    },\n    set: function(v) {\n      this._join = v;\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i];\n        child.join = v;\n      }\n    }\n  },\n  miter: {\n    enumerable: true,\n    get: function() {\n      return this._miter;\n    },\n    set: function(v) {\n      this._miter = v;\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i];\n        child.miter = v;\n      }\n    }\n  },\n  cap: {\n    enumerable: true,\n    get: function() {\n      return this._cap;\n    },\n    set: function(v) {\n      this._cap = v;\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i];\n        child.cap = v;\n      }\n    }\n  },\n  closed: {\n    enumerable: true,\n    get: function() {\n      return this._closed;\n    },\n    set: function(v) {\n      this._closed = v;\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i];\n        child.closed = v;\n      }\n    }\n  },\n  curved: {\n    enumerable: true,\n    get: function() {\n      return this._curved;\n    },\n    set: function(v) {\n      this._curved = v;\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i];\n        child.curved = v;\n      }\n    }\n  },\n  automatic: {\n    enumerable: true,\n    get: function() {\n      return this._automatic;\n    },\n    set: function(v) {\n      this._automatic = v;\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i];\n        child.automatic = v;\n      }\n    }\n  },\n  children: {\n    enumerable: true,\n    get: function() {\n      return this._children;\n    },\n    set: function(children) {\n      const insertChildren = Group.InsertChildren.bind(this);\n      const removeChildren = Group.RemoveChildren.bind(this);\n      const orderChildren = Group.OrderChildren.bind(this);\n      if (this._children) {\n        this._children.unbind();\n        if (this._children.length > 0) {\n          removeChildren(this._children);\n        }\n      }\n      this._children = new Children(children);\n      this._children.bind(Events.Types.insert, insertChildren);\n      this._children.bind(Events.Types.remove, removeChildren);\n      this._children.bind(Events.Types.order, orderChildren);\n      if (children.length > 0) {\n        insertChildren(children);\n      }\n    }\n  },\n  mask: {\n    enumerable: true,\n    get: function() {\n      return this._mask;\n    },\n    set: function(v) {\n      this._mask = v;\n      this._flagMask = true;\n      if (_.isObject(v) && !v.clip) {\n        v.clip = true;\n      }\n    }\n  }\n};\nfunction replaceParent(child, newParent) {\n  const parent = child.parent;\n  let index;\n  if (parent === newParent) {\n    add();\n    return;\n  }\n  if (parent && parent.children.ids[child.id]) {\n    index = Array.prototype.indexOf.call(parent.children, child);\n    parent.children.splice(index, 1);\n    splice();\n  }\n  if (newParent) {\n    add();\n    return;\n  }\n  splice();\n  if (parent._flagAdditions && parent.additions.length === 0) {\n    parent._flagAdditions = false;\n  }\n  if (parent._flagSubtractions && parent.subtractions.length === 0) {\n    parent._flagSubtractions = false;\n  }\n  delete child.parent;\n  function add() {\n    if (newParent.subtractions.length > 0) {\n      index = Array.prototype.indexOf.call(newParent.subtractions, child);\n      if (index >= 0) {\n        newParent.subtractions.splice(index, 1);\n      }\n    }\n    if (newParent.additions.length > 0) {\n      index = Array.prototype.indexOf.call(newParent.additions, child);\n      if (index >= 0) {\n        newParent.additions.splice(index, 1);\n      }\n    }\n    child.parent = newParent;\n    newParent.additions.push(child);\n    newParent._flagAdditions = true;\n  }\n  function splice() {\n    index = Array.prototype.indexOf.call(parent.additions, child);\n    if (index >= 0) {\n      parent.additions.splice(index, 1);\n    }\n    index = Array.prototype.indexOf.call(parent.subtractions, child);\n    if (index < 0) {\n      parent.subtractions.push(child);\n      parent._flagSubtractions = true;\n    }\n  }\n}\n\n// src/renderers/canvas.js\nvar matrix = new Matrix2();\nvar emptyArray = [];\nvar max2 = Math.max;\nvar min2 = Math.min;\nvar abs = Math.abs;\nvar sin2 = Math.sin;\nvar cos2 = Math.cos;\nvar acos = Math.acos;\nvar sqrt = Math.sqrt;\nvar canvas = {\n  isHidden: /(undefined|none|transparent)/i,\n  alignments: {\n    left: \"start\",\n    middle: \"center\",\n    right: \"end\"\n  },\n  shim: function(elem, name) {\n    elem.tagName = elem.nodeName = name || \"canvas\";\n    elem.nodeType = 1;\n    elem.getAttribute = function(prop) {\n      return this[prop];\n    };\n    elem.setAttribute = function(prop, val) {\n      this[prop] = val;\n      return this;\n    };\n    return elem;\n  },\n  group: {\n    renderChild: function(child) {\n      canvas[child._renderer.type].render.call(child, this.ctx, true, this.clip);\n    },\n    render: function(ctx) {\n      if (!this._visible) {\n        return this;\n      }\n      this._update();\n      const matrix3 = this._matrix.elements;\n      const parent = this.parent;\n      this._renderer.opacity = this._opacity * (parent && parent._renderer ? parent._renderer.opacity : 1);\n      const mask = this._mask;\n      const defaultMatrix = isDefaultMatrix(matrix3);\n      const shouldIsolate = !defaultMatrix || !!mask;\n      if (!this._renderer.context) {\n        this._renderer.context = {};\n      }\n      this._renderer.context.ctx = ctx;\n      if (shouldIsolate) {\n        ctx.save();\n        if (!defaultMatrix) {\n          ctx.transform(matrix3[0], matrix3[3], matrix3[1], matrix3[4], matrix3[2], matrix3[5]);\n        }\n      }\n      if (mask) {\n        canvas[mask._renderer.type].render.call(mask, ctx, true);\n      }\n      if (this._opacity > 0 && this._scale !== 0) {\n        for (let i = 0; i < this.children.length; i++) {\n          const child = this.children[i];\n          canvas[child._renderer.type].render.call(child, ctx);\n        }\n      }\n      if (shouldIsolate) {\n        ctx.restore();\n      }\n      return this.flagReset();\n    }\n  },\n  path: {\n    render: function(ctx, forced, parentClipped) {\n      let matrix3, stroke, linewidth, fill, opacity, visible, cap, join, miter, closed2, commands, length, last, prev, a, b, c, d, ux, uy, vx, vy, ar, bl, br, cl, x, y, mask, clip, defaultMatrix, isOffset, dashes, po;\n      po = this.parent && this.parent._renderer ? this.parent._renderer.opacity : 1;\n      mask = this._mask;\n      clip = this._clip;\n      opacity = this._opacity * (po || 1);\n      visible = this._visible;\n      if (!forced && (!visible || clip || opacity === 0)) {\n        return this;\n      }\n      this._update();\n      matrix3 = this._matrix.elements;\n      stroke = this._stroke;\n      linewidth = this._linewidth;\n      fill = this._fill;\n      cap = this._cap;\n      join = this._join;\n      miter = this._miter;\n      closed2 = this._closed;\n      commands = this._renderer.vertices;\n      length = commands.length;\n      last = length - 1;\n      defaultMatrix = isDefaultMatrix(matrix3);\n      dashes = this.dashes;\n      if (!defaultMatrix) {\n        ctx.save();\n        ctx.transform(matrix3[0], matrix3[3], matrix3[1], matrix3[4], matrix3[2], matrix3[5]);\n      }\n      if (mask) {\n        canvas[mask._renderer.type].render.call(mask, ctx, true);\n      }\n      if (fill) {\n        if (typeof fill === \"string\") {\n          ctx.fillStyle = fill;\n        } else {\n          canvas[fill._renderer.type].render.call(fill, ctx, this);\n          ctx.fillStyle = fill._renderer.effect;\n        }\n      }\n      if (stroke) {\n        if (typeof stroke === \"string\") {\n          ctx.strokeStyle = stroke;\n        } else {\n          canvas[stroke._renderer.type].render.call(stroke, ctx, this);\n          ctx.strokeStyle = stroke._renderer.effect;\n        }\n        if (linewidth) {\n          ctx.lineWidth = linewidth;\n        }\n        if (miter) {\n          ctx.miterLimit = miter;\n        }\n        if (join) {\n          ctx.lineJoin = join;\n        }\n        if (!closed2 && cap) {\n          ctx.lineCap = cap;\n        }\n      }\n      if (typeof opacity === \"number\") {\n        ctx.globalAlpha = opacity;\n      }\n      if (dashes && dashes.length > 0) {\n        ctx.lineDashOffset = dashes.offset || 0;\n        ctx.setLineDash(dashes);\n      }\n      ctx.beginPath();\n      let rx, ry, xAxisRotation, largeArcFlag, sweepFlag, ax, ay;\n      for (let i = 0; i < length; i++) {\n        b = commands[i];\n        x = b.x;\n        y = b.y;\n        switch (b.command) {\n          case Commands.close:\n            ctx.closePath();\n            break;\n          case Commands.arc:\n            rx = b.rx;\n            ry = b.ry;\n            xAxisRotation = b.xAxisRotation;\n            largeArcFlag = b.largeArcFlag;\n            sweepFlag = b.sweepFlag;\n            prev = closed2 ? mod(i - 1, length) : max2(i - 1, 0);\n            a = commands[prev];\n            ax = a.x;\n            ay = a.y;\n            canvas.renderSvgArcCommand(ctx, ax, ay, rx, ry, largeArcFlag, sweepFlag, xAxisRotation, x, y);\n            break;\n          case Commands.curve:\n            prev = closed2 ? mod(i - 1, length) : Math.max(i - 1, 0);\n            a = commands[prev];\n            ar = a.controls && a.controls.right || Vector.zero;\n            bl = b.controls && b.controls.left || Vector.zero;\n            if (a._relative) {\n              vx = ar.x + a.x;\n              vy = ar.y + a.y;\n            } else {\n              vx = ar.x;\n              vy = ar.y;\n            }\n            if (b._relative) {\n              ux = bl.x + b.x;\n              uy = bl.y + b.y;\n            } else {\n              ux = bl.x;\n              uy = bl.y;\n            }\n            ctx.bezierCurveTo(vx, vy, ux, uy, x, y);\n            if (i >= last && closed2) {\n              c = d;\n              br = b.controls && b.controls.right || Vector.zero;\n              cl = c.controls && c.controls.left || Vector.zero;\n              if (b._relative) {\n                vx = br.x + b.x;\n                vy = br.y + b.y;\n              } else {\n                vx = br.x;\n                vy = br.y;\n              }\n              if (c._relative) {\n                ux = cl.x + c.x;\n                uy = cl.y + c.y;\n              } else {\n                ux = cl.x;\n                uy = cl.y;\n              }\n              x = c.x;\n              y = c.y;\n              ctx.bezierCurveTo(vx, vy, ux, uy, x, y);\n            }\n            break;\n          case Commands.line:\n            ctx.lineTo(x, y);\n            break;\n          case Commands.move:\n            d = b;\n            ctx.moveTo(x, y);\n            break;\n        }\n      }\n      if (closed2) {\n        ctx.closePath();\n      }\n      if (!clip && !parentClipped) {\n        if (!canvas.isHidden.test(fill)) {\n          isOffset = fill._renderer && fill._renderer.offset;\n          if (isOffset) {\n            ctx.save();\n            ctx.translate(-fill._renderer.offset.x, -fill._renderer.offset.y);\n            ctx.scale(fill._renderer.scale.x, fill._renderer.scale.y);\n          }\n          ctx.fill();\n          if (isOffset) {\n            ctx.restore();\n          }\n        }\n        if (!canvas.isHidden.test(stroke)) {\n          isOffset = stroke._renderer && stroke._renderer.offset;\n          if (isOffset) {\n            ctx.save();\n            ctx.translate(-stroke._renderer.offset.x, -stroke._renderer.offset.y);\n            ctx.scale(stroke._renderer.scale.x, stroke._renderer.scale.y);\n            ctx.lineWidth = linewidth / stroke._renderer.scale.x;\n          }\n          ctx.stroke();\n          if (isOffset) {\n            ctx.restore();\n          }\n        }\n      }\n      if (!defaultMatrix) {\n        ctx.restore();\n      }\n      if (clip && !parentClipped) {\n        ctx.clip();\n      }\n      if (dashes && dashes.length > 0) {\n        ctx.setLineDash(emptyArray);\n      }\n      return this.flagReset();\n    }\n  },\n  points: {\n    render: function(ctx, forced, parentClipped) {\n      let me, stroke, linewidth, fill, opacity, visible, size, commands, length, b, x, y, defaultMatrix, isOffset, dashes, po;\n      po = this.parent && this.parent._renderer ? this.parent._renderer.opacity : 1;\n      opacity = this._opacity * (po || 1);\n      visible = this._visible;\n      if (!forced && (!visible || opacity === 0)) {\n        return this;\n      }\n      this._update();\n      me = this._matrix.elements;\n      stroke = this._stroke;\n      linewidth = this._linewidth;\n      fill = this._fill;\n      commands = this._renderer.collection;\n      length = commands.length;\n      defaultMatrix = isDefaultMatrix(me);\n      dashes = this.dashes;\n      size = this._size;\n      if (!defaultMatrix) {\n        ctx.save();\n        ctx.transform(me[0], me[3], me[1], me[4], me[2], me[5]);\n      }\n      if (fill) {\n        if (typeof fill === \"string\") {\n          ctx.fillStyle = fill;\n        } else {\n          canvas[fill._renderer.type].render.call(fill, ctx, this);\n          ctx.fillStyle = fill._renderer.effect;\n        }\n      }\n      if (stroke) {\n        if (typeof stroke === \"string\") {\n          ctx.strokeStyle = stroke;\n        } else {\n          canvas[stroke._renderer.type].render.call(stroke, ctx, this);\n          ctx.strokeStyle = stroke._renderer.effect;\n        }\n        if (linewidth) {\n          ctx.lineWidth = linewidth;\n        }\n      }\n      if (typeof opacity === \"number\") {\n        ctx.globalAlpha = opacity;\n      }\n      if (dashes && dashes.length > 0) {\n        ctx.lineDashOffset = dashes.offset || 0;\n        ctx.setLineDash(dashes);\n      }\n      ctx.beginPath();\n      let radius = size * 0.5, m;\n      if (!this._sizeAttenuation) {\n        getComputedMatrix(this, matrix);\n        m = matrix.elements;\n        m = decomposeMatrix(m[0], m[3], m[1], m[4], m[2], m[5]);\n        radius /= Math.max(m.scaleX, m.scaleY);\n      }\n      for (let i = 0; i < length; i++) {\n        b = commands[i];\n        x = b.x;\n        y = b.y;\n        ctx.moveTo(x + radius, y);\n        ctx.arc(x, y, radius, 0, TWO_PI);\n      }\n      if (!parentClipped) {\n        if (!canvas.isHidden.test(fill)) {\n          isOffset = fill._renderer && fill._renderer.offset;\n          if (isOffset) {\n            ctx.save();\n            ctx.translate(-fill._renderer.offset.x, -fill._renderer.offset.y);\n            ctx.scale(fill._renderer.scale.x, fill._renderer.scale.y);\n          }\n          ctx.fill();\n          if (isOffset) {\n            ctx.restore();\n          }\n        }\n        if (!canvas.isHidden.test(stroke)) {\n          isOffset = stroke._renderer && stroke._renderer.offset;\n          if (isOffset) {\n            ctx.save();\n            ctx.translate(-stroke._renderer.offset.x, -stroke._renderer.offset.y);\n            ctx.scale(stroke._renderer.scale.x, stroke._renderer.scale.y);\n            ctx.lineWidth = linewidth / stroke._renderer.scale.x;\n          }\n          ctx.stroke();\n          if (isOffset) {\n            ctx.restore();\n          }\n        }\n      }\n      if (!defaultMatrix) {\n        ctx.restore();\n      }\n      if (dashes && dashes.length > 0) {\n        ctx.setLineDash(emptyArray);\n      }\n      return this.flagReset();\n    }\n  },\n  text: {\n    render: function(ctx, forced, parentClipped) {\n      const po = this.parent && this.parent._renderer ? this.parent._renderer.opacity : 1;\n      const opacity = this._opacity * po;\n      const visible = this._visible;\n      const mask = this._mask;\n      const clip = this._clip;\n      if (!forced && (!visible || clip || opacity === 0)) {\n        return this;\n      }\n      this._update();\n      const matrix3 = this._matrix.elements;\n      const stroke = this._stroke;\n      const linewidth = this._linewidth;\n      const fill = this._fill;\n      const decoration = this._decoration;\n      const defaultMatrix = isDefaultMatrix(matrix3);\n      const isOffset = fill._renderer && fill._renderer.offset && stroke._renderer && stroke._renderer.offset;\n      const dashes = this.dashes;\n      const alignment = canvas.alignments[this._alignment] || this._alignment;\n      const baseline = this._baseline;\n      let a, b, c, d, e, sx, sy, x1, y1, x2, y2;\n      if (!defaultMatrix) {\n        ctx.save();\n        ctx.transform(matrix3[0], matrix3[3], matrix3[1], matrix3[4], matrix3[2], matrix3[5]);\n      }\n      if (mask) {\n        canvas[mask._renderer.type].render.call(mask, ctx, true);\n      }\n      if (!isOffset) {\n        ctx.font = [this._style, this._weight, this._size + \"px/\" + this._leading + \"px\", this._family].join(\" \");\n      }\n      ctx.textAlign = alignment;\n      ctx.textBaseline = baseline;\n      if (fill) {\n        if (typeof fill === \"string\") {\n          ctx.fillStyle = fill;\n        } else {\n          canvas[fill._renderer.type].render.call(fill, ctx, this);\n          ctx.fillStyle = fill._renderer.effect;\n        }\n      }\n      if (stroke) {\n        if (typeof stroke === \"string\") {\n          ctx.strokeStyle = stroke;\n        } else {\n          canvas[stroke._renderer.type].render.call(stroke, ctx, this);\n          ctx.strokeStyle = stroke._renderer.effect;\n        }\n        if (linewidth) {\n          ctx.lineWidth = linewidth;\n        }\n      }\n      if (typeof opacity === \"number\") {\n        ctx.globalAlpha = opacity;\n      }\n      if (dashes && dashes.length > 0) {\n        ctx.lineDashOffset = dashes.offset || 0;\n        ctx.setLineDash(dashes);\n      }\n      if (!clip && !parentClipped) {\n        if (!canvas.isHidden.test(fill)) {\n          if (fill._renderer && fill._renderer.offset) {\n            sx = fill._renderer.scale.x;\n            sy = fill._renderer.scale.y;\n            ctx.save();\n            ctx.translate(-fill._renderer.offset.x, -fill._renderer.offset.y);\n            ctx.scale(sx, sy);\n            a = this._size / fill._renderer.scale.y;\n            b = this._leading / fill._renderer.scale.y;\n            ctx.font = [\n              this._style,\n              this._weight,\n              a + \"px/\",\n              b + \"px\",\n              this._family\n            ].join(\" \");\n            c = fill._renderer.offset.x / fill._renderer.scale.x;\n            d = fill._renderer.offset.y / fill._renderer.scale.y;\n            ctx.fillText(this.value, c, d);\n            ctx.restore();\n          } else {\n            ctx.fillText(this.value, 0, 0);\n          }\n        }\n        if (!canvas.isHidden.test(stroke)) {\n          if (stroke._renderer && stroke._renderer.offset) {\n            sx = stroke._renderer.scale.x;\n            sy = stroke._renderer.scale.y;\n            ctx.save();\n            ctx.translate(-stroke._renderer.offset.x, -stroke._renderer.offset.y);\n            ctx.scale(sx, sy);\n            a = this._size / stroke._renderer.scale.y;\n            b = this._leading / stroke._renderer.scale.y;\n            ctx.font = [\n              this._style,\n              this._weight,\n              a + \"px/\",\n              b + \"px\",\n              this._family\n            ].join(\" \");\n            c = stroke._renderer.offset.x / stroke._renderer.scale.x;\n            d = stroke._renderer.offset.y / stroke._renderer.scale.y;\n            e = linewidth / stroke._renderer.scale.x;\n            ctx.lineWidth = e;\n            ctx.strokeText(this.value, c, d);\n            ctx.restore();\n          } else {\n            ctx.strokeText(this.value, 0, 0);\n          }\n        }\n      }\n      if (/(underline|strikethrough)/i.test(decoration)) {\n        const metrics = ctx.measureText(this.value);\n        let scalar = 1;\n        switch (decoration) {\n          case \"underline\":\n            y1 = metrics.actualBoundingBoxAscent;\n            y2 = metrics.actualBoundingBoxAscent;\n            break;\n          case \"strikethrough\":\n            y1 = 0;\n            y2 = 0;\n            scalar = 0.5;\n            break;\n        }\n        switch (baseline) {\n          case \"top\":\n            y1 += this._size * scalar;\n            y2 += this._size * scalar;\n            break;\n          case \"baseline\":\n          case \"bottom\":\n            y1 -= this._size * scalar;\n            y2 -= this._size * scalar;\n            break;\n        }\n        switch (alignment) {\n          case \"left\":\n          case \"start\":\n            x1 = 0;\n            x2 = metrics.width;\n            break;\n          case \"right\":\n          case \"end\":\n            x1 = -metrics.width;\n            x2 = 0;\n            break;\n          default:\n            x1 = -metrics.width / 2;\n            x2 = metrics.width / 2;\n        }\n        ctx.lineWidth = Math.max(Math.floor(this._size / 15), 1);\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n      }\n      if (!defaultMatrix) {\n        ctx.restore();\n      }\n      if (clip && !parentClipped) {\n        ctx.clip();\n      }\n      if (dashes && dashes.length > 0) {\n        ctx.setLineDash(emptyArray);\n      }\n      return this.flagReset();\n    }\n  },\n  \"linear-gradient\": {\n    render: function(ctx, parent) {\n      if (!parent) {\n        return;\n      }\n      this._update();\n      if (!this._renderer.effect || this._flagEndPoints || this._flagStops || this._flagUnits) {\n        let rect;\n        let lx = this.left._x;\n        let ly = this.left._y;\n        let rx = this.right._x;\n        let ry = this.right._y;\n        if (/objectBoundingBox/i.test(this._units)) {\n          rect = parent.getBoundingClientRect(true);\n          lx = (lx - 0.5) * rect.width;\n          ly = (ly - 0.5) * rect.height;\n          rx = (rx - 0.5) * rect.width;\n          ry = (ry - 0.5) * rect.height;\n        }\n        this._renderer.effect = ctx.createLinearGradient(lx, ly, rx, ry);\n        for (let i = 0; i < this.stops.length; i++) {\n          const stop = this.stops[i];\n          this._renderer.effect.addColorStop(stop._offset, stop._color);\n        }\n      }\n      return this.flagReset();\n    }\n  },\n  \"radial-gradient\": {\n    render: function(ctx, parent) {\n      if (!parent) {\n        return;\n      }\n      this._update();\n      if (!this._renderer.effect || this._flagCenter || this._flagFocal || this._flagRadius || this._flagStops || this._flagUnits) {\n        let rect;\n        let cx = this.center._x;\n        let cy = this.center._y;\n        let fx = this.focal._x;\n        let fy = this.focal._y;\n        let radius = this._radius;\n        if (/objectBoundingBox/i.test(this._units)) {\n          rect = parent.getBoundingClientRect(true);\n          cx = cx * rect.width * 0.5;\n          cy = cy * rect.height * 0.5;\n          fx = fx * rect.width * 0.5;\n          fy = fy * rect.height * 0.5;\n          radius *= Math.min(rect.width, rect.height) * 0.5;\n        }\n        this._renderer.effect = ctx.createRadialGradient(cx, cy, 0, fx, fy, radius);\n        for (let i = 0; i < this.stops.length; i++) {\n          const stop = this.stops[i];\n          this._renderer.effect.addColorStop(stop._offset, stop._color);\n        }\n      }\n      return this.flagReset();\n    }\n  },\n  texture: {\n    render: function(ctx) {\n      this._update();\n      const image = this.image;\n      if (!this._renderer.effect || (this._flagLoaded || this._flagImage || this._flagVideo || this._flagRepeat) && this.loaded) {\n        this._renderer.effect = ctx.createPattern(this.image, this._repeat);\n      }\n      if (this._flagOffset || this._flagLoaded || this._flagScale) {\n        if (!(this._renderer.offset instanceof Vector)) {\n          this._renderer.offset = new Vector();\n        }\n        this._renderer.offset.x = -this._offset.x;\n        this._renderer.offset.y = -this._offset.y;\n        if (image) {\n          this._renderer.offset.x += image.width / 2;\n          this._renderer.offset.y += image.height / 2;\n          if (this._scale instanceof Vector) {\n            this._renderer.offset.x *= this._scale.x;\n            this._renderer.offset.y *= this._scale.y;\n          } else {\n            this._renderer.offset.x *= this._scale;\n            this._renderer.offset.y *= this._scale;\n          }\n        }\n      }\n      if (this._flagScale || this._flagLoaded) {\n        if (!(this._renderer.scale instanceof Vector)) {\n          this._renderer.scale = new Vector();\n        }\n        if (this._scale instanceof Vector) {\n          this._renderer.scale.copy(this._scale);\n        } else {\n          this._renderer.scale.set(this._scale, this._scale);\n        }\n      }\n      return this.flagReset();\n    }\n  },\n  renderSvgArcCommand: function(ctx, ax, ay, rx, ry, largeArcFlag, sweepFlag, xAxisRotation, x, y) {\n    xAxisRotation = xAxisRotation * Math.PI / 180;\n    rx = abs(rx);\n    ry = abs(ry);\n    const dx2 = (ax - x) / 2;\n    const dy2 = (ay - y) / 2;\n    const x1p = cos2(xAxisRotation) * dx2 + sin2(xAxisRotation) * dy2;\n    const y1p = -sin2(xAxisRotation) * dx2 + cos2(xAxisRotation) * dy2;\n    const x1ps = x1p * x1p;\n    const y1ps = y1p * y1p;\n    let rxs = rx * rx;\n    let rys = ry * ry;\n    const cr = x1ps / rxs + y1ps / rys;\n    if (cr > 1) {\n      const s = sqrt(cr);\n      rx = s * rx;\n      ry = s * ry;\n      rxs = rx * rx;\n      rys = ry * ry;\n    }\n    const dq = rxs * y1ps + rys * x1ps;\n    const pq = (rxs * rys - dq) / dq;\n    let q = sqrt(max2(0, pq));\n    if (largeArcFlag === sweepFlag)\n      q = -q;\n    const cxp = q * rx * y1p / ry;\n    const cyp = -q * ry * x1p / rx;\n    const cx = cos2(xAxisRotation) * cxp - sin2(xAxisRotation) * cyp + (ax + x) / 2;\n    const cy = sin2(xAxisRotation) * cxp + cos2(xAxisRotation) * cyp + (ay + y) / 2;\n    const startAngle = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n    const delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % TWO_PI;\n    const endAngle = startAngle + delta;\n    const clockwise = sweepFlag === 0;\n    renderArcEstimate(ctx, cx, cy, rx, ry, startAngle, endAngle, clockwise, xAxisRotation);\n  }\n};\nvar Renderer = class extends Events {\n  constructor(params) {\n    super();\n    const smoothing = params.smoothing !== false;\n    this.domElement = params.domElement || document.createElement(\"canvas\");\n    this.ctx = this.domElement.getContext(\"2d\");\n    this.overdraw = params.overdraw || false;\n    if (typeof this.ctx.imageSmoothingEnabled !== \"undefined\") {\n      this.ctx.imageSmoothingEnabled = smoothing;\n    }\n    this.scene = new Group();\n    this.scene.parent = this;\n  }\n  setSize(width, height, ratio) {\n    this.width = width;\n    this.height = height;\n    this.ratio = typeof ratio === \"undefined\" ? getRatio(this.ctx) : ratio;\n    this.domElement.width = width * this.ratio;\n    this.domElement.height = height * this.ratio;\n    if (this.domElement.style) {\n      _.extend(this.domElement.style, {\n        width: width + \"px\",\n        height: height + \"px\"\n      });\n    }\n    return this.trigger(Events.Types.resize, width, height, ratio);\n  }\n  render() {\n    const isOne = this.ratio === 1;\n    if (!isOne) {\n      this.ctx.save();\n      this.ctx.scale(this.ratio, this.ratio);\n    }\n    if (!this.overdraw) {\n      this.ctx.clearRect(0, 0, this.width, this.height);\n    }\n    canvas.group.render.call(this.scene, this.ctx);\n    if (!isOne) {\n      this.ctx.restore();\n    }\n    return this;\n  }\n};\n__publicField(Renderer, \"Utils\", canvas);\nfunction renderArcEstimate(ctx, ox, oy, rx, ry, startAngle, endAngle, clockwise, xAxisRotation) {\n  const delta = endAngle - startAngle;\n  const epsilon = Curve.Tolerance.epsilon;\n  const samePoints = Math.abs(delta) < epsilon;\n  let deltaAngle = mod(delta, TWO_PI);\n  if (deltaAngle < epsilon) {\n    if (samePoints) {\n      deltaAngle = 0;\n    } else {\n      deltaAngle = TWO_PI;\n    }\n  }\n  if (clockwise === true && !samePoints) {\n    if (deltaAngle === TWO_PI) {\n      deltaAngle = -TWO_PI;\n    } else {\n      deltaAngle = deltaAngle - TWO_PI;\n    }\n  }\n  for (let i = 0; i < Constants.Resolution; i++) {\n    const t = i / (Constants.Resolution - 1);\n    const angle = startAngle + t * deltaAngle;\n    let x = ox + rx * Math.cos(angle);\n    let y = oy + ry * Math.sin(angle);\n    if (xAxisRotation !== 0) {\n      const cos7 = Math.cos(xAxisRotation);\n      const sin7 = Math.sin(xAxisRotation);\n      const tx = x - ox;\n      const ty = y - oy;\n      x = tx * cos7 - ty * sin7 + ox;\n      y = tx * sin7 + ty * cos7 + oy;\n    }\n    ctx.lineTo(x, y);\n  }\n}\nfunction svgAngle(ux, uy, vx, vy) {\n  const dot = ux * vx + uy * vy;\n  const len = sqrt(ux * ux + uy * uy) * sqrt(vx * vx + vy * vy);\n  let ang = acos(max2(-1, min2(1, dot / len)));\n  if (ux * vy - uy * vx < 0) {\n    ang = -ang;\n  }\n  return ang;\n}\nfunction isDefaultMatrix(m) {\n  return m[0] == 1 && m[3] == 0 && m[1] == 0 && m[4] == 1 && m[2] == 0 && m[5] == 0;\n}\n\n// src/utils/canvas-shim.js\nvar CanvasShim = {\n  Image: null,\n  isHeadless: false,\n  shim: function(canvas2, Image) {\n    Renderer.Utils.shim(canvas2);\n    if (typeof Image !== \"undefined\") {\n      CanvasShim.Image = Image;\n    }\n    CanvasShim.isHeadless = true;\n    return canvas2;\n  }\n};\n\n// src/utils/dom.js\nvar dom = {\n  hasEventListeners: typeof root.addEventListener === \"function\",\n  bind: function(elem, event, func, bool) {\n    if (this.hasEventListeners) {\n      elem.addEventListener(event, func, !!bool);\n    } else {\n      elem.attachEvent(\"on\" + event, func);\n    }\n    return dom;\n  },\n  unbind: function(elem, event, func, bool) {\n    if (dom.hasEventListeners) {\n      elem.removeEventListeners(event, func, !!bool);\n    } else {\n      elem.detachEvent(\"on\" + event, func);\n    }\n    return dom;\n  },\n  getRequestAnimationFrame: function() {\n    const vendors = [\"ms\", \"moz\", \"webkit\", \"o\"];\n    let lastTime = 0;\n    let request = root.requestAnimationFrame;\n    if (!request) {\n      for (let i = 0; i < vendors.length; i++) {\n        request = root[vendors[i] + \"RequestAnimationFrame\"] || request;\n      }\n      request = request || fallbackRequest;\n    }\n    function fallbackRequest(callback, element) {\n      const currTime = new Date().getTime();\n      const timeToCall = Math.max(0, 16 - (currTime - lastTime));\n      const id = root.setTimeout(nextRequest, timeToCall);\n      lastTime = currTime + timeToCall;\n      function nextRequest() {\n        callback(currTime + timeToCall);\n      }\n      return id;\n    }\n    return request;\n  }\n};\nvar temp = root.document ? root.document.createElement(\"div\") : {};\ntemp.id = \"help-two-load\";\nObject.defineProperty(dom, \"temp\", {\n  enumerable: true,\n  get: function() {\n    if (_.isElement(temp) && !root.document.head.contains(temp)) {\n      temp.style.display = \"none\";\n      root.document.head.appendChild(temp);\n    }\n    return temp;\n  }\n});\n\n// src/utils/error.js\nvar TwoError = class extends Error {\n  constructor(message) {\n    super();\n    __publicField(this, \"name\", \"Two.js\");\n    __publicField(this, \"message\");\n    this.message = message;\n  }\n};\n\n// src/registry.js\nvar Registry = class {\n  constructor() {\n    __publicField(this, \"map\", {});\n  }\n  add(id, obj) {\n    this.map[id] = obj;\n    return this;\n  }\n  remove(id) {\n    delete this.map[id];\n    return this;\n  }\n  get(id) {\n    return this.map[id];\n  }\n  contains(id) {\n    return id in this.map;\n  }\n};\n\n// src/utils/shape.js\nfunction contains(path, t) {\n  if (t === 0 || t === 1) {\n    return true;\n  }\n  const length = path._length;\n  const target = length * t;\n  let elapsed = 0;\n  for (let i = 0; i < path._lengths.length; i++) {\n    const dist = path._lengths[i];\n    if (elapsed >= target) {\n      return target - elapsed >= 0;\n    }\n    elapsed += dist;\n  }\n  return false;\n}\nfunction getIdByLength(path, target) {\n  const total = path._length;\n  if (target <= 0) {\n    return 0;\n  } else if (target >= total) {\n    return path._lengths.length - 1;\n  }\n  for (let i = 0, sum = 0; i < path._lengths.length; i++) {\n    if (sum + path._lengths[i] >= target) {\n      target -= sum;\n      return Math.max(i - 1, 0) + target / path._lengths[i];\n    }\n    sum += path._lengths[i];\n  }\n  return -1;\n}\nfunction getCurveLength2(a, b, limit) {\n  let x1, x2, x3, x4, y1, y2, y3, y4;\n  const right = b.controls && b.controls.right;\n  const left = a.controls && a.controls.left;\n  x1 = b.x;\n  y1 = b.y;\n  x2 = (right || b).x;\n  y2 = (right || b).y;\n  x3 = (left || a).x;\n  y3 = (left || a).y;\n  x4 = a.x;\n  y4 = a.y;\n  if (right && b._relative) {\n    x2 += b.x;\n    y2 += b.y;\n  }\n  if (left && a._relative) {\n    x3 += a.x;\n    y3 += a.y;\n  }\n  return getCurveLength(x1, y1, x2, y2, x3, y3, x4, y4, limit);\n}\nfunction getSubdivisions(a, b, limit) {\n  let x1, x2, x3, x4, y1, y2, y3, y4;\n  const right = b.controls && b.controls.right;\n  const left = a.controls && a.controls.left;\n  x1 = b.x;\n  y1 = b.y;\n  x2 = (right || b).x;\n  y2 = (right || b).y;\n  x3 = (left || a).x;\n  y3 = (left || a).y;\n  x4 = a.x;\n  y4 = a.y;\n  if (right && b._relative) {\n    x2 += b.x;\n    y2 += b.y;\n  }\n  if (left && a._relative) {\n    x3 += a.x;\n    y3 += a.y;\n  }\n  return subdivide(x1, y1, x2, y2, x3, y3, x4, y4, limit);\n}\n\n// src/effects/stop.js\nvar _Stop = class extends Element {\n  constructor(offset, color, opacity) {\n    super();\n    __publicField(this, \"_flagOffset\", true);\n    __publicField(this, \"_flagOpacity\", true);\n    __publicField(this, \"_flagColor\", true);\n    __publicField(this, \"_offset\", 0);\n    __publicField(this, \"_opacity\", 1);\n    __publicField(this, \"_color\", \"#fff\");\n    for (let prop in proto6) {\n      Object.defineProperty(this, prop, proto6[prop]);\n    }\n    this._renderer.type = \"stop\";\n    this.offset = typeof offset === \"number\" ? offset : _Stop.Index <= 0 ? 0 : 1;\n    this.opacity = typeof opacity === \"number\" ? opacity : 1;\n    this.color = typeof color === \"string\" ? color : _Stop.Index <= 0 ? \"#fff\" : \"#000\";\n    _Stop.Index = (_Stop.Index + 1) % 2;\n  }\n  clone(parent) {\n    const clone = new _Stop();\n    _.each(_Stop.Properties, function(property) {\n      clone[property] = this[property];\n    }, this);\n    if (parent && parent.stops) {\n      parent.stops.push(clone);\n    }\n    return clone;\n  }\n  toObject() {\n    const result = {};\n    _.each(_Stop.Properties, function(k) {\n      result[k] = this[k];\n    }, this);\n    return result;\n  }\n  flagReset() {\n    this._flagOffset = this._flagColor = this._flagOpacity = false;\n    super.flagReset.call(this);\n    return this;\n  }\n};\nvar Stop = _Stop;\n__publicField(Stop, \"Index\", 0);\n__publicField(Stop, \"Properties\", [\"offset\", \"opacity\", \"color\"]);\nvar proto6 = {\n  offset: {\n    enumerable: true,\n    get: function() {\n      return this._offset;\n    },\n    set: function(v) {\n      this._offset = v;\n      this._flagOffset = true;\n      if (this.parent) {\n        this.parent._flagStops = true;\n      }\n    }\n  },\n  opacity: {\n    enumerable: true,\n    get: function() {\n      return this._opacity;\n    },\n    set: function(v) {\n      this._opacity = v;\n      this._flagOpacity = true;\n      if (this.parent) {\n        this.parent._flagStops = true;\n      }\n    }\n  },\n  color: {\n    enumerable: true,\n    get: function() {\n      return this._color;\n    },\n    set: function(v) {\n      this._color = v;\n      this._flagColor = true;\n      if (this.parent) {\n        this.parent._flagStops = true;\n      }\n    }\n  }\n};\n\n// src/effects/gradient.js\nvar _Gradient = class extends Element {\n  constructor(stops) {\n    super();\n    __publicField(this, \"_flagStops\", false);\n    __publicField(this, \"_flagSpread\", false);\n    __publicField(this, \"_flagUnits\", false);\n    __publicField(this, \"_spread\", \"\");\n    __publicField(this, \"_units\", \"\");\n    for (let prop in proto7) {\n      Object.defineProperty(this, prop, proto7[prop]);\n    }\n    this._renderer.type = \"gradient\";\n    this.id = Constants.Identifier + Constants.uniqueId();\n    this.classList = [];\n    this._renderer.flagStops = FlagStops.bind(this);\n    this._renderer.bindStops = BindStops.bind(this);\n    this._renderer.unbindStops = UnbindStops.bind(this);\n    this.spread = \"pad\";\n    this.units = \"objectBoundingBox\";\n    if (stops) {\n      this.stops = stops;\n    }\n  }\n  clone(parent) {\n    const stops = this.stops.map(function(s) {\n      return s.clone();\n    });\n    const clone = new _Gradient(stops);\n    _.each(_Gradient.Properties, function(k) {\n      clone[k] = this[k];\n    }, this);\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone;\n  }\n  toObject() {\n    const result = {\n      stops: this.stops.map(function(s) {\n        return s.toObject();\n      })\n    };\n    _.each(_Gradient.Properties, function(k) {\n      result[k] = this[k];\n    }, this);\n    return result;\n  }\n  _update() {\n    if (this._flagSpread || this._flagStops) {\n      this.trigger(Events.Types.change);\n    }\n    return this;\n  }\n  flagReset() {\n    this._flagSpread = this._flagUnits = this._flagStops = false;\n    super.flagReset.call(this);\n    return this;\n  }\n};\nvar Gradient = _Gradient;\n__publicField(Gradient, \"Stop\", Stop);\n__publicField(Gradient, \"Properties\", [\"spread\", \"stops\", \"renderer\", \"units\"]);\nvar proto7 = {\n  spread: {\n    enumerable: true,\n    get: function() {\n      return this._spread;\n    },\n    set: function(v) {\n      this._spread = v;\n      this._flagSpread = true;\n    }\n  },\n  units: {\n    enumerable: true,\n    get: function() {\n      return this._units;\n    },\n    set: function(v) {\n      this._units = v;\n      this._flagUnits = true;\n    }\n  },\n  stops: {\n    enumerable: true,\n    get: function() {\n      return this._stops;\n    },\n    set: function(stops) {\n      const bindStops = this._renderer.bindStops;\n      const unbindStops = this._renderer.unbindStops;\n      if (this._stops) {\n        this._stops.unbind(Events.Types.insert, bindStops).unbind(Events.Types.remove, unbindStops);\n      }\n      this._stops = new Collection((stops || []).slice(0));\n      this._stops.bind(Events.Types.insert, bindStops).bind(Events.Types.remove, unbindStops);\n      bindStops(this._stops);\n    }\n  }\n};\nfunction FlagStops() {\n  this._flagStops = true;\n}\nfunction BindStops(items) {\n  let i = items.length;\n  while (i--) {\n    items[i].bind(Events.Types.change, this._renderer.flagStops);\n    items[i].parent = this;\n  }\n  this._renderer.flagStops();\n}\nfunction UnbindStops(items) {\n  let i = items.length;\n  while (i--) {\n    items[i].unbind(Events.Types.change, this._renderer.flagStops);\n    delete items[i].parent;\n  }\n  this._renderer.flagStops();\n}\n\n// src/effects/linear-gradient.js\nvar _LinearGradient = class extends Gradient {\n  constructor(x1, y1, x2, y2, stops) {\n    super(stops);\n    __publicField(this, \"_flagEndPoints\", false);\n    __publicField(this, \"_left\", null);\n    __publicField(this, \"_right\", null);\n    for (let prop in proto8) {\n      Object.defineProperty(this, prop, proto8[prop]);\n    }\n    this._renderer.type = \"linear-gradient\";\n    this._renderer.flagEndPoints = FlagEndPoints.bind(this);\n    this.left = new Vector();\n    this.right = new Vector();\n    if (typeof x1 === \"number\") {\n      this.left.x = x1;\n    }\n    if (typeof y1 === \"number\") {\n      this.left.y = y1;\n    }\n    if (typeof x2 === \"number\") {\n      this.right.x = x2;\n    }\n    if (typeof y2 === \"number\") {\n      this.right.y = y2;\n    }\n  }\n  clone(parent) {\n    const stops = this.stops.map(function(stop) {\n      return stop.clone();\n    });\n    const clone = new _LinearGradient(this.left._x, this.left._y, this.right._x, this.right._y, stops);\n    _.each(Gradient.Properties, function(k) {\n      clone[k] = this[k];\n    }, this);\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone;\n  }\n  toObject() {\n    const result = super.toObject.call(this);\n    result.left = this.left.toObject();\n    result.right = this.right.toObject();\n    return result;\n  }\n  _update() {\n    if (this._flagEndPoints || this._flagSpread || this._flagStops) {\n      this.trigger(Events.Types.change);\n    }\n    return this;\n  }\n  flagReset() {\n    this._flagEndPoints = false;\n    super.flagReset.call(this);\n    return this;\n  }\n};\nvar LinearGradient = _LinearGradient;\n__publicField(LinearGradient, \"Properties\", [\"left\", \"right\"]);\n__publicField(LinearGradient, \"Stop\", Stop);\nvar proto8 = {\n  left: {\n    enumerable: true,\n    get: function() {\n      return this._left;\n    },\n    set: function(v) {\n      if (this._left instanceof Vector) {\n        this._left.unbind(Events.Types.change, this._renderer.flagEndPoints);\n      }\n      this._left = v;\n      this._left.bind(Events.Types.change, this._renderer.flagEndPoints);\n      this._flagEndPoints = true;\n    }\n  },\n  right: {\n    enumerable: true,\n    get: function() {\n      return this._right;\n    },\n    set: function(v) {\n      if (this._right instanceof Vector) {\n        this._right.unbind(Events.Types.change, this._renderer.flagEndPoints);\n      }\n      this._right = v;\n      this._right.bind(Events.Types.change, this._renderer.flagEndPoints);\n      this._flagEndPoints = true;\n    }\n  }\n};\nfunction FlagEndPoints() {\n  this._flagEndPoints = true;\n}\n\n// src/effects/radial-gradient.js\nvar _RadialGradient = class extends Gradient {\n  constructor(cx, cy, r, stops, fx, fy) {\n    super(stops);\n    __publicField(this, \"_flagRadius\", false);\n    __publicField(this, \"_flagCenter\", false);\n    __publicField(this, \"_flagFocal\", false);\n    __publicField(this, \"_radius\", 0);\n    __publicField(this, \"_center\", null);\n    __publicField(this, \"_focal\", null);\n    for (let prop in proto9) {\n      Object.defineProperty(this, prop, proto9[prop]);\n    }\n    this._renderer.type = \"radial-gradient\";\n    this._renderer.flagCenter = FlagCenter.bind(this);\n    this._renderer.flagFocal = FlagFocal.bind(this);\n    this.center = new Vector();\n    this.radius = typeof r === \"number\" ? r : 1;\n    this.focal = new Vector();\n    if (typeof cx === \"number\") {\n      this.center.x = cx;\n    }\n    if (typeof cy === \"number\") {\n      this.center.y = cy;\n    }\n    this.focal.copy(this.center);\n    if (typeof fx === \"number\") {\n      this.focal.x = fx;\n    }\n    if (typeof fy === \"number\") {\n      this.focal.y = fy;\n    }\n  }\n  clone(parent) {\n    const stops = this.stops.map(function(stop) {\n      return stop.clone();\n    });\n    const clone = new _RadialGradient(this.center._x, this.center._y, this._radius, stops, this.focal._x, this.focal._y);\n    _.each(Gradient.Properties.concat(_RadialGradient.Properties), function(k) {\n      clone[k] = this[k];\n    }, this);\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone;\n  }\n  toObject() {\n    const result = super.toObject.call(this);\n    _.each(_RadialGradient.Properties, function(k) {\n      result[k] = this[k];\n    }, this);\n    result.center = this.center.toObject();\n    result.focal = this.focal.toObject();\n    return result;\n  }\n  _update() {\n    if (this._flagRadius || this._flatCenter || this._flagFocal || this._flagSpread || this._flagStops) {\n      this.trigger(Events.Types.change);\n    }\n    return this;\n  }\n  flagReset() {\n    this._flagRadius = this._flagCenter = this._flagFocal = false;\n    super.flagReset.call(this);\n    return this;\n  }\n};\nvar RadialGradient = _RadialGradient;\n__publicField(RadialGradient, \"Stop\", Stop);\n__publicField(RadialGradient, \"Properties\", [\"center\", \"radius\", \"focal\"]);\nvar proto9 = {\n  radius: {\n    enumerable: true,\n    get: function() {\n      return this._radius;\n    },\n    set: function(v) {\n      this._radius = v;\n      this._flagRadius = true;\n    }\n  },\n  center: {\n    enumerable: true,\n    get: function() {\n      return this._center;\n    },\n    set: function(v) {\n      if (this._center) {\n        this._center.unbind(Events.Types.change, this._renderer.flagCenter);\n      }\n      this._center = v;\n      this._center.bind(Events.Types.change, this._renderer.flagCenter);\n      this._flagCenter = true;\n    }\n  },\n  focal: {\n    enumerable: true,\n    get: function() {\n      return this._focal;\n    },\n    set: function(v) {\n      if (this._focal) {\n        this._focal.unbind(Events.Types.change, this._renderer.flagFocal);\n      }\n      this._focal = v;\n      this._focal.bind(Events.Types.change, this._renderer.flagFocal);\n      this._flagFocal = true;\n    }\n  }\n};\nfunction FlagCenter() {\n  this._flagCenter = true;\n}\nfunction FlagFocal() {\n  this._flagFocal = true;\n}\n\n// src/effects/texture.js\nvar anchor;\nvar regex = {\n  video: /\\.(mp4|webm|ogg)$/i,\n  image: /\\.(jpe?g|png|gif|tiff|webp)$/i,\n  effect: /texture|gradient/i\n};\nif (root.document) {\n  anchor = document.createElement(\"a\");\n}\nvar _Texture = class extends Element {\n  constructor(src, callback) {\n    super();\n    __publicField(this, \"_flagSrc\", false);\n    __publicField(this, \"_flagImage\", false);\n    __publicField(this, \"_flagVideo\", false);\n    __publicField(this, \"_flagLoaded\", false);\n    __publicField(this, \"_flagRepeat\", false);\n    __publicField(this, \"_flagOffset\", false);\n    __publicField(this, \"_flagScale\", false);\n    __publicField(this, \"_src\", \"\");\n    __publicField(this, \"_image\", null);\n    __publicField(this, \"_loaded\", false);\n    __publicField(this, \"_repeat\", \"no-repeat\");\n    __publicField(this, \"_scale\", 1);\n    __publicField(this, \"_offset\", null);\n    this._renderer = {};\n    for (let prop in proto10) {\n      Object.defineProperty(this, prop, proto10[prop]);\n    }\n    this._renderer.type = \"texture\";\n    this._renderer.flagOffset = FlagOffset.bind(this);\n    this._renderer.flagScale = FlagScale.bind(this);\n    this.id = Constants.Identifier + Constants.uniqueId();\n    this.classList = [];\n    this.loaded = false;\n    this.repeat = \"no-repeat\";\n    this.offset = new Vector();\n    if (typeof callback === \"function\") {\n      const loaded = function() {\n        this.unbind(Events.Types.load, loaded);\n        if (typeof callback === \"function\") {\n          callback();\n        }\n      }.bind(this);\n      this.bind(Events.Types.load, loaded);\n    }\n    if (typeof src === \"string\") {\n      this.src = src;\n    } else if (typeof src === \"object\") {\n      const elemString = Object.prototype.toString.call(src);\n      if (elemString === \"[object HTMLImageElement]\" || elemString === \"[object HTMLCanvasElement]\" || elemString === \"[object HTMLVideoElement]\" || elemString === \"[object Image]\") {\n        this.image = src;\n      }\n    }\n    this._update();\n  }\n  static getAbsoluteURL(path) {\n    if (!anchor) {\n      return path;\n    }\n    anchor.href = path;\n    return anchor.href;\n  }\n  static loadHeadlessBuffer(texture, loaded) {\n    texture.image.onload = loaded;\n    texture.image.src = texture.src;\n  }\n  static getTag(image) {\n    return image && image.nodeName && image.nodeName.toLowerCase() || \"img\";\n  }\n  static getImage(src) {\n    const absoluteSrc = _Texture.getAbsoluteURL(src);\n    if (_Texture.ImageRegistry.contains(absoluteSrc)) {\n      return _Texture.ImageRegistry.get(absoluteSrc);\n    }\n    let image;\n    if (CanvasShim.Image) {\n      image = new CanvasShim.Image();\n      Renderer.Utils.shim(image, \"img\");\n    } else if (root.document) {\n      if (regex.video.test(absoluteSrc)) {\n        image = document.createElement(\"video\");\n      } else {\n        image = document.createElement(\"img\");\n      }\n    } else {\n      console.warn(\"Two.js: no prototypical image defined for Two.Texture\");\n    }\n    image.crossOrigin = \"anonymous\";\n    return image;\n  }\n  static load(texture, callback) {\n    let image = texture.image;\n    let tag = _Texture.getTag(image);\n    if (texture._flagImage) {\n      if (/canvas/i.test(tag)) {\n        _Texture.Register.canvas(texture, callback);\n      } else {\n        texture._src = !CanvasShim.isHeadless && image.getAttribute(\"two-src\") || image.src;\n        _Texture.Register[tag](texture, callback);\n      }\n    }\n    if (texture._flagSrc) {\n      if (!image) {\n        image = _Texture.getImage(texture.src);\n        texture.image = image;\n      }\n      tag = _Texture.getTag(image);\n      _Texture.Register[tag](texture, callback);\n    }\n  }\n  clone() {\n    const clone = new _Texture(this.src);\n    clone.repeat = this.repeat;\n    clone.offset.copy(this.origin);\n    clone.scale = this.scale;\n    return clone;\n  }\n  toObject() {\n    return {\n      src: this.src,\n      repeat: this.repeat,\n      origin: this.origin.toObject(),\n      scale: typeof this.scale === \"number\" ? this.scale : this.scale.toObject()\n    };\n  }\n  _update() {\n    if (this._flagSrc || this._flagImage) {\n      this.trigger(Events.Types.change);\n      if (this._flagSrc || this._flagImage) {\n        this.loaded = false;\n        _Texture.load(this, function() {\n          this.loaded = true;\n          this.trigger(Events.Types.change).trigger(Events.Types.load);\n        }.bind(this));\n      }\n    }\n    if (this._image && this._image.readyState >= 4) {\n      this._flagVideo = true;\n    }\n    return this;\n  }\n  flagReset() {\n    this._flagSrc = this._flagImage = this._flagLoaded = this._flagRepeat = this._flagVideo = this._flagScale = this._flagOffset = false;\n    super.flagReset.call(this);\n    return this;\n  }\n};\nvar Texture = _Texture;\n__publicField(Texture, \"Properties\", [\n  \"src\",\n  \"loaded\",\n  \"repeat\",\n  \"scale\",\n  \"offset\",\n  \"image\"\n]);\n__publicField(Texture, \"RegularExpressions\", regex);\n__publicField(Texture, \"ImageRegistry\", new Registry());\n__publicField(Texture, \"Register\", {\n  canvas: function(texture, callback) {\n    texture._src = \"#\" + texture.id;\n    _Texture.ImageRegistry.add(texture.src, texture.image);\n    if (typeof callback === \"function\") {\n      callback();\n    }\n  },\n  img: function(texture, callback) {\n    const image = texture.image;\n    const loaded = function(e) {\n      if (!CanvasShim.isHeadless && image.removeEventListener && typeof image.removeEventListener === \"function\") {\n        image.removeEventListener(\"load\", loaded, false);\n        image.removeEventListener(\"error\", error, false);\n      }\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    };\n    const error = function(e) {\n      if (!CanvasShim.isHeadless && typeof image.removeEventListener === \"function\") {\n        image.removeEventListener(\"load\", loaded, false);\n        image.removeEventListener(\"error\", error, false);\n      }\n      throw new TwoError(\"unable to load \" + texture.src);\n    };\n    if (typeof image.width === \"number\" && image.width > 0 && typeof image.height === \"number\" && image.height > 0) {\n      loaded();\n    } else if (!CanvasShim.isHeadless && typeof image.addEventListener === \"function\") {\n      image.addEventListener(\"load\", loaded, false);\n      image.addEventListener(\"error\", error, false);\n    }\n    texture._src = _Texture.getAbsoluteURL(texture._src);\n    if (!CanvasShim.isHeadless && image && image.getAttribute(\"two-src\")) {\n      return;\n    }\n    if (!CanvasShim.isHeadless) {\n      image.setAttribute(\"two-src\", texture.src);\n    }\n    _Texture.ImageRegistry.add(texture.src, image);\n    if (CanvasShim.isHeadless) {\n      _Texture.loadHeadlessBuffer(texture, loaded);\n    } else {\n      texture.image.src = texture.src;\n    }\n  },\n  video: function(texture, callback) {\n    if (CanvasShim.isHeadless) {\n      throw new TwoError(\"video textures are not implemented in headless environments.\");\n    }\n    const loaded = function(e) {\n      texture.image.removeEventListener(\"canplaythrough\", loaded, false);\n      texture.image.removeEventListener(\"error\", error, false);\n      texture.image.width = texture.image.videoWidth;\n      texture.image.height = texture.image.videoHeight;\n      if (typeof callback === \"function\") {\n        callback();\n      }\n    };\n    const error = function(e) {\n      texture.image.removeEventListener(\"canplaythrough\", loaded, false);\n      texture.image.removeEventListener(\"error\", error, false);\n      throw new TwoError(\"unable to load \" + texture.src);\n    };\n    texture._src = _Texture.getAbsoluteURL(texture._src);\n    if (!texture.image.getAttribute(\"two-src\")) {\n      texture.image.setAttribute(\"two-src\", texture.src);\n      _Texture.ImageRegistry.add(texture.src, texture.image);\n    }\n    if (texture.image.readyState >= 4) {\n      loaded();\n    } else {\n      texture.image.addEventListener(\"canplaythrough\", loaded, false);\n      texture.image.addEventListener(\"error\", error, false);\n      texture.image.src = texture.src;\n      texture.image.load();\n    }\n  }\n});\nvar proto10 = {\n  src: {\n    enumerable: true,\n    get: function() {\n      return this._src;\n    },\n    set: function(v) {\n      this._src = v;\n      this._flagSrc = true;\n    }\n  },\n  loaded: {\n    enumerable: true,\n    get: function() {\n      return this._loaded;\n    },\n    set: function(v) {\n      this._loaded = v;\n      this._flagLoaded = true;\n    }\n  },\n  repeat: {\n    enumerable: true,\n    get: function() {\n      return this._repeat;\n    },\n    set: function(v) {\n      this._repeat = v;\n      this._flagRepeat = true;\n    }\n  },\n  image: {\n    enumerable: true,\n    get: function() {\n      return this._image;\n    },\n    set: function(image) {\n      const tag = Texture.getTag(image);\n      let index;\n      switch (tag) {\n        case \"canvas\":\n          index = \"#\" + image.id;\n          break;\n        default:\n          index = image.src;\n      }\n      if (Texture.ImageRegistry.contains(index)) {\n        this._image = Texture.ImageRegistry.get(image.src);\n      } else {\n        this._image = image;\n      }\n      this._flagImage = true;\n    }\n  },\n  offset: {\n    enumerable: true,\n    get: function() {\n      return this._offset;\n    },\n    set: function(v) {\n      if (this._offset) {\n        this._offset.unbind(Events.Types.change, this._renderer.flagOffset);\n      }\n      this._offset = v;\n      this._offset.bind(Events.Types.change, this._renderer.flagOffset);\n      this._flagOffset = true;\n    }\n  },\n  scale: {\n    enumerable: true,\n    get: function() {\n      return this._scale;\n    },\n    set: function(v) {\n      if (this._scale instanceof Vector) {\n        this._scale.unbind(Events.Types.change, this._renderer.flagScale);\n      }\n      this._scale = v;\n      if (this._scale instanceof Vector) {\n        this._scale.bind(Events.Types.change, this._renderer.flagScale);\n      }\n      this._flagScale = true;\n    }\n  }\n};\nfunction FlagOffset() {\n  this._flagOffset = true;\n}\nfunction FlagScale() {\n  this._flagScale = true;\n}\n\n// src/path.js\nvar min3 = Math.min;\nvar max3 = Math.max;\nvar ceil = Math.ceil;\nvar floor2 = Math.floor;\nvar vector = new Vector();\nvar _Path = class extends Shape {\n  constructor(vertices, closed2, curved, manual) {\n    super();\n    __publicField(this, \"_flagVertices\", true);\n    __publicField(this, \"_flagLength\", true);\n    __publicField(this, \"_flagFill\", true);\n    __publicField(this, \"_flagStroke\", true);\n    __publicField(this, \"_flagLinewidth\", true);\n    __publicField(this, \"_flagOpacity\", true);\n    __publicField(this, \"_flagVisible\", true);\n    __publicField(this, \"_flagCap\", true);\n    __publicField(this, \"_flagJoin\", true);\n    __publicField(this, \"_flagMiter\", true);\n    __publicField(this, \"_flagMask\", false);\n    __publicField(this, \"_flagClip\", false);\n    __publicField(this, \"_length\", 0);\n    __publicField(this, \"_fill\", \"#fff\");\n    __publicField(this, \"_stroke\", \"#000\");\n    __publicField(this, \"_linewidth\", 1);\n    __publicField(this, \"_opacity\", 1);\n    __publicField(this, \"_visible\", true);\n    __publicField(this, \"_cap\", \"round\");\n    __publicField(this, \"_join\", \"round\");\n    __publicField(this, \"_miter\", 4);\n    __publicField(this, \"_closed\", true);\n    __publicField(this, \"_curved\", false);\n    __publicField(this, \"_automatic\", true);\n    __publicField(this, \"_beginning\", 0);\n    __publicField(this, \"_ending\", 1);\n    __publicField(this, \"_mask\", null);\n    __publicField(this, \"_clip\", false);\n    __publicField(this, \"_dashes\", null);\n    for (let prop in proto11) {\n      Object.defineProperty(this, prop, proto11[prop]);\n    }\n    this._renderer.type = \"path\";\n    this._renderer.flagVertices = FlagVertices.bind(this);\n    this._renderer.bindVertices = BindVertices.bind(this);\n    this._renderer.unbindVertices = UnbindVertices.bind(this);\n    this._renderer.flagFill = FlagFill.bind(this);\n    this._renderer.flagStroke = FlagStroke.bind(this);\n    this._renderer.vertices = [];\n    this._renderer.collection = [];\n    this.closed = !!closed2;\n    this.curved = !!curved;\n    this.beginning = 0;\n    this.ending = 1;\n    this.fill = \"#fff\";\n    this.stroke = \"#000\";\n    this.linewidth = 1;\n    this.opacity = 1;\n    this.className = \"\";\n    this.visible = true;\n    this.cap = \"butt\";\n    this.join = \"miter\";\n    this.miter = 4;\n    this.vertices = vertices;\n    this.automatic = !manual;\n    this.dashes = [];\n    this.dashes.offset = 0;\n  }\n  clone(parent) {\n    const clone = new _Path();\n    for (let j = 0; j < this.vertices.length; j++) {\n      clone.vertices.push(this.vertices[j].clone());\n    }\n    for (let i = 0; i < _Path.Properties.length; i++) {\n      const k = _Path.Properties[i];\n      clone[k] = this[k];\n    }\n    clone.className = this.className;\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n    clone.skewX = this.skewX;\n    clone.skewY = this.skewY;\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone._update();\n  }\n  toObject() {\n    const result = {\n      vertices: this.vertices.map(function(v) {\n        return v.toObject();\n      })\n    };\n    _.each(_Path.Properties, function(k) {\n      if (typeof this[k] !== \"undefined\") {\n        if (this[k].toObject) {\n          result[k] = this[k].toObject();\n        } else {\n          result[k] = this[k];\n        }\n      }\n    }, this);\n    result.className = this.className;\n    result.translation = this.translation.toObject();\n    result.rotation = this.rotation;\n    result.scale = this.scale instanceof Vector ? this.scale.toObject() : this.scale;\n    result.skewX = this.skewX;\n    result.skewY = this.skewY;\n    if (this.matrix.manual) {\n      result.matrix = this.matrix.toObject();\n    }\n    return result;\n  }\n  noFill() {\n    this.fill = \"transparent\";\n    return this;\n  }\n  noStroke() {\n    this.stroke = void 0;\n    return this;\n  }\n  corner() {\n    const rect = this.getBoundingClientRect(true);\n    const hw = rect.width / 2;\n    const hh = rect.height / 2;\n    const cx = rect.left + rect.width / 2;\n    const cy = rect.top + rect.height / 2;\n    for (let i = 0; i < this.vertices.length; i++) {\n      const v = this.vertices[i];\n      v.x -= cx;\n      v.y -= cy;\n      v.x += hw;\n      v.y += hh;\n    }\n    if (this.mask) {\n      this.mask.translation.x -= cx;\n      this.mask.translation.x += hw;\n      this.mask.translation.y -= cy;\n      this.mask.translation.y += hh;\n    }\n    return this;\n  }\n  center() {\n    const rect = this.getBoundingClientRect(true);\n    const cx = rect.left + rect.width / 2 - this.translation.x;\n    const cy = rect.top + rect.height / 2 - this.translation.y;\n    for (let i = 0; i < this.vertices.length; i++) {\n      const v = this.vertices[i];\n      v.x -= cx;\n      v.y -= cy;\n    }\n    if (this.mask) {\n      this.mask.translation.x -= cx;\n      this.mask.translation.y -= cy;\n    }\n    return this;\n  }\n  getBoundingClientRect(shallow) {\n    let matrix3, border, l, i, v0, v1, c0x, c0y, c1x, c1y, a, b, c, d;\n    let left = Infinity, right = -Infinity, top = Infinity, bottom = -Infinity;\n    this._update(true);\n    matrix3 = shallow ? this._matrix : getComputedMatrix(this);\n    border = (this.linewidth || 0) / 2;\n    l = this._renderer.vertices.length;\n    if (l <= 0) {\n      return {\n        width: 0,\n        height: 0\n      };\n    }\n    for (i = 0; i < l; i++) {\n      v1 = this._renderer.vertices[i];\n      v0 = this._renderer.vertices[(i + l - 1) % l];\n      if (v0.controls && v1.controls) {\n        c0x = v0.controls.right.x;\n        c0y = v0.controls.right.y;\n        if (v0.relative) {\n          c0x += v0.x;\n          c0y += v0.y;\n        }\n        c1x = v1.controls.left.x;\n        c1y = v1.controls.left.y;\n        if (v1.relative) {\n          c1x += v1.x;\n          c1y += v1.y;\n        }\n        const bb = getCurveBoundingBox(v0.x, v0.y, c0x, c0y, c1x, c1y, v1.x, v1.y);\n        top = min3(bb.min.y - border, top);\n        left = min3(bb.min.x - border, left);\n        right = max3(bb.max.x + border, right);\n        bottom = max3(bb.max.y + border, bottom);\n      } else {\n        if (i <= 1) {\n          top = min3(v0.y - border, top);\n          left = min3(v0.x - border, left);\n          right = max3(v0.x + border, right);\n          bottom = max3(v0.y + border, bottom);\n        }\n        top = min3(v1.y - border, top);\n        left = min3(v1.x - border, left);\n        right = max3(v1.x + border, right);\n        bottom = max3(v1.y + border, bottom);\n      }\n    }\n    a = matrix3.multiply(left, top, 1);\n    b = matrix3.multiply(left, bottom, 1);\n    c = matrix3.multiply(right, top, 1);\n    d = matrix3.multiply(right, bottom, 1);\n    top = min3(a.y, b.y, c.y, d.y);\n    left = min3(a.x, b.x, c.x, d.x);\n    right = max3(a.x, b.x, c.x, d.x);\n    bottom = max3(a.y, b.y, c.y, d.y);\n    return {\n      top,\n      left,\n      right,\n      bottom,\n      width: right - left,\n      height: bottom - top\n    };\n  }\n  getPointAt(t, obj) {\n    let ia, ib, result;\n    let x, x1, x2, x3, x4, y, y1, y2, y3, y4, left, right;\n    let target = this.length * Math.min(Math.max(t, 0), 1);\n    const length = this.vertices.length;\n    const last = length - 1;\n    let a = null;\n    let b = null;\n    for (let i = 0, l = this._lengths.length, sum = 0; i < l; i++) {\n      if (sum + this._lengths[i] >= target) {\n        if (this._closed) {\n          ia = mod(i, length);\n          ib = mod(i - 1, length);\n          if (i === 0) {\n            ia = ib;\n            ib = i;\n          }\n        } else {\n          ia = i;\n          ib = Math.min(Math.max(i - 1, 0), last);\n        }\n        a = this.vertices[ia];\n        b = this.vertices[ib];\n        target -= sum;\n        if (this._lengths[i] !== 0) {\n          t = target / this._lengths[i];\n        } else {\n          t = 0;\n        }\n        break;\n      }\n      sum += this._lengths[i];\n    }\n    if (a === null || b === null) {\n      return null;\n    }\n    if (!a) {\n      return b;\n    } else if (!b) {\n      return a;\n    }\n    right = b.controls && b.controls.right;\n    left = a.controls && a.controls.left;\n    x1 = b.x;\n    y1 = b.y;\n    x2 = (right || b).x;\n    y2 = (right || b).y;\n    x3 = (left || a).x;\n    y3 = (left || a).y;\n    x4 = a.x;\n    y4 = a.y;\n    if (right && b.relative) {\n      x2 += b.x;\n      y2 += b.y;\n    }\n    if (left && a.relative) {\n      x3 += a.x;\n      y3 += a.y;\n    }\n    x = getComponentOnCubicBezier(t, x1, x2, x3, x4);\n    y = getComponentOnCubicBezier(t, y1, y2, y3, y4);\n    const t1x = lerp(x1, x2, t);\n    const t1y = lerp(y1, y2, t);\n    const t2x = lerp(x2, x3, t);\n    const t2y = lerp(y2, y3, t);\n    const t3x = lerp(x3, x4, t);\n    const t3y = lerp(y3, y4, t);\n    const brx = lerp(t1x, t2x, t);\n    const bry = lerp(t1y, t2y, t);\n    const alx = lerp(t2x, t3x, t);\n    const aly = lerp(t2y, t3y, t);\n    if (_.isObject(obj)) {\n      obj.x = x;\n      obj.y = y;\n      if (obj instanceof Anchor) {\n        obj.controls.left.x = brx;\n        obj.controls.left.y = bry;\n        obj.controls.right.x = alx;\n        obj.controls.right.y = aly;\n        if (!(typeof obj.relative === \"boolean\") || obj.relative) {\n          obj.controls.left.x -= x;\n          obj.controls.left.y -= y;\n          obj.controls.right.x -= x;\n          obj.controls.right.y -= y;\n        }\n      }\n      obj.t = t;\n      return obj;\n    }\n    result = new Anchor(x, y, brx - x, bry - y, alx - x, aly - y, this._curved ? Commands.curve : Commands.line);\n    result.t = t;\n    return result;\n  }\n  plot() {\n    if (this.curved) {\n      getCurveFromPoints(this._collection, this.closed);\n      return this;\n    }\n    for (let i = 0; i < this._collection.length; i++) {\n      this._collection[i].command = i === 0 ? Commands.move : Commands.line;\n    }\n    return this;\n  }\n  subdivide(limit) {\n    this._update();\n    const last = this.vertices.length - 1;\n    const closed2 = this._closed || this.vertices[last]._command === Commands.close;\n    let b = this.vertices[last];\n    let points = [], verts;\n    _.each(this.vertices, function(a, i) {\n      if (i <= 0 && !closed2) {\n        b = a;\n        return;\n      }\n      if (a.command === Commands.move) {\n        points.push(new Anchor(b.x, b.y));\n        if (i > 0) {\n          points[points.length - 1].command = Commands.line;\n        }\n        b = a;\n        return;\n      }\n      verts = getSubdivisions(a, b, limit);\n      points = points.concat(verts);\n      _.each(verts, function(v, i2) {\n        if (i2 <= 0 && b.command === Commands.move) {\n          v.command = Commands.move;\n        } else {\n          v.command = Commands.line;\n        }\n      });\n      if (i >= last) {\n        if (this._closed && this._automatic) {\n          b = a;\n          verts = getSubdivisions(a, b, limit);\n          points = points.concat(verts);\n          _.each(verts, function(v, i2) {\n            if (i2 <= 0 && b.command === Commands.move) {\n              v.command = Commands.move;\n            } else {\n              v.command = Commands.line;\n            }\n          });\n        } else if (closed2) {\n          points.push(new Anchor(a.x, a.y));\n        }\n        points[points.length - 1].command = closed2 ? Commands.close : Commands.line;\n      }\n      b = a;\n    }, this);\n    this._automatic = false;\n    this._curved = false;\n    this.vertices = points;\n    return this;\n  }\n  _updateLength(limit, silent) {\n    if (!silent) {\n      this._update();\n    }\n    const length = this.vertices.length;\n    const last = length - 1;\n    const closed2 = false;\n    let b = this.vertices[last];\n    let sum = 0;\n    if (typeof this._lengths === \"undefined\") {\n      this._lengths = [];\n    }\n    _.each(this.vertices, function(a, i) {\n      if (i <= 0 && !closed2 || a.command === Commands.move) {\n        b = a;\n        this._lengths[i] = 0;\n        return;\n      }\n      this._lengths[i] = getCurveLength2(a, b, limit);\n      sum += this._lengths[i];\n      if (i >= last && closed2) {\n        b = this.vertices[(i + 1) % length];\n        this._lengths[i + 1] = getCurveLength2(a, b, limit);\n        sum += this._lengths[i + 1];\n      }\n      b = a;\n    }, this);\n    this._length = sum;\n    this._flagLength = false;\n    return this;\n  }\n  _update() {\n    if (this._flagVertices) {\n      if (this._automatic) {\n        this.plot();\n      }\n      if (this._flagLength) {\n        this._updateLength(void 0, true);\n      }\n      const l = this._collection.length;\n      const closed2 = this._closed;\n      const beginning = Math.min(this._beginning, this._ending);\n      const ending = Math.max(this._beginning, this._ending);\n      const bid = getIdByLength(this, beginning * this._length);\n      const eid = getIdByLength(this, ending * this._length);\n      const low = ceil(bid);\n      const high = floor2(eid);\n      let left, right, prev, next, v, i;\n      this._renderer.vertices.length = 0;\n      for (i = 0; i < l; i++) {\n        if (this._renderer.collection.length <= i) {\n          this._renderer.collection.push(new Anchor());\n        }\n        if (i > high && !right) {\n          v = this._renderer.collection[i].copy(this._collection[i]);\n          this.getPointAt(ending, v);\n          v.command = this._renderer.collection[i].command;\n          this._renderer.vertices.push(v);\n          right = v;\n          prev = this._collection[i - 1];\n          if (prev && prev.controls) {\n            if (v.relative) {\n              v.controls.right.clear();\n            } else {\n              v.controls.right.copy(v);\n            }\n            if (prev.relative) {\n              this._renderer.collection[i - 1].controls.right.copy(prev.controls.right).lerp(Vector.zero, 1 - v.t);\n            } else {\n              this._renderer.collection[i - 1].controls.right.copy(prev.controls.right).lerp(prev, 1 - v.t);\n            }\n          }\n        } else if (i >= low && i <= high) {\n          v = this._renderer.collection[i].copy(this._collection[i]);\n          this._renderer.vertices.push(v);\n          if (i === high && contains(this, ending)) {\n            right = v;\n            if (!closed2 && right.controls) {\n              if (right.relative) {\n                right.controls.right.clear();\n              } else {\n                right.controls.right.copy(right);\n              }\n            }\n          } else if (i === low && contains(this, beginning)) {\n            left = v;\n            left.command = Commands.move;\n            if (!closed2 && left.controls) {\n              if (left.relative) {\n                left.controls.left.clear();\n              } else {\n                left.controls.left.copy(left);\n              }\n            }\n          }\n        }\n      }\n      if (low > 0 && !left) {\n        i = low - 1;\n        v = this._renderer.collection[i].copy(this._collection[i]);\n        this.getPointAt(beginning, v);\n        v.command = Commands.move;\n        this._renderer.vertices.unshift(v);\n        next = this._collection[i + 1];\n        if (next && next.controls) {\n          v.controls.left.clear();\n          if (next.relative) {\n            this._renderer.collection[i + 1].controls.left.copy(next.controls.left).lerp(Vector.zero, v.t);\n          } else {\n            vector.copy(next);\n            this._renderer.collection[i + 1].controls.left.copy(next.controls.left).lerp(next, v.t);\n          }\n        }\n      }\n    }\n    Shape.prototype._update.apply(this, arguments);\n    return this;\n  }\n  flagReset() {\n    this._flagVertices = this._flagLength = this._flagFill = this._flagStroke = this._flagLinewidth = this._flagOpacity = this._flagVisible = this._flagCap = this._flagJoin = this._flagMiter = this._flagClip = false;\n    Shape.prototype.flagReset.call(this);\n    return this;\n  }\n};\nvar Path = _Path;\n__publicField(Path, \"Properties\", [\n  \"fill\",\n  \"stroke\",\n  \"linewidth\",\n  \"opacity\",\n  \"visible\",\n  \"cap\",\n  \"join\",\n  \"miter\",\n  \"closed\",\n  \"curved\",\n  \"automatic\",\n  \"beginning\",\n  \"ending\"\n]);\n__publicField(Path, \"Utils\", {\n  getCurveLength: getCurveLength2\n});\nvar proto11 = {\n  linewidth: {\n    enumerable: true,\n    get: function() {\n      return this._linewidth;\n    },\n    set: function(v) {\n      this._linewidth = v;\n      this._flagLinewidth = true;\n    }\n  },\n  opacity: {\n    enumerable: true,\n    get: function() {\n      return this._opacity;\n    },\n    set: function(v) {\n      this._opacity = v;\n      this._flagOpacity = true;\n    }\n  },\n  visible: {\n    enumerable: true,\n    get: function() {\n      return this._visible;\n    },\n    set: function(v) {\n      this._visible = v;\n      this._flagVisible = true;\n    }\n  },\n  cap: {\n    enumerable: true,\n    get: function() {\n      return this._cap;\n    },\n    set: function(v) {\n      this._cap = v;\n      this._flagCap = true;\n    }\n  },\n  join: {\n    enumerable: true,\n    get: function() {\n      return this._join;\n    },\n    set: function(v) {\n      this._join = v;\n      this._flagJoin = true;\n    }\n  },\n  miter: {\n    enumerable: true,\n    get: function() {\n      return this._miter;\n    },\n    set: function(v) {\n      this._miter = v;\n      this._flagMiter = true;\n    }\n  },\n  fill: {\n    enumerable: true,\n    get: function() {\n      return this._fill;\n    },\n    set: function(f) {\n      if (this._fill instanceof Gradient || this._fill instanceof LinearGradient || this._fill instanceof RadialGradient || this._fill instanceof Texture) {\n        this._fill.unbind(Events.Types.change, this._renderer.flagFill);\n      }\n      this._fill = f;\n      this._flagFill = true;\n      if (this._fill instanceof Gradient || this._fill instanceof LinearGradient || this._fill instanceof RadialGradient || this._fill instanceof Texture) {\n        this._fill.bind(Events.Types.change, this._renderer.flagFill);\n      }\n    }\n  },\n  stroke: {\n    enumerable: true,\n    get: function() {\n      return this._stroke;\n    },\n    set: function(f) {\n      if (this._stroke instanceof Gradient || this._stroke instanceof LinearGradient || this._stroke instanceof RadialGradient || this._stroke instanceof Texture) {\n        this._stroke.unbind(Events.Types.change, this._renderer.flagStroke);\n      }\n      this._stroke = f;\n      this._flagStroke = true;\n      if (this._stroke instanceof Gradient || this._stroke instanceof LinearGradient || this._stroke instanceof RadialGradient || this._stroke instanceof Texture) {\n        this._stroke.bind(Events.Types.change, this._renderer.flagStroke);\n      }\n    }\n  },\n  length: {\n    get: function() {\n      if (this._flagLength) {\n        this._updateLength();\n      }\n      return this._length;\n    }\n  },\n  closed: {\n    enumerable: true,\n    get: function() {\n      return this._closed;\n    },\n    set: function(v) {\n      this._closed = !!v;\n      this._flagVertices = true;\n    }\n  },\n  curved: {\n    enumerable: true,\n    get: function() {\n      return this._curved;\n    },\n    set: function(v) {\n      this._curved = !!v;\n      this._flagVertices = true;\n    }\n  },\n  automatic: {\n    enumerable: true,\n    get: function() {\n      return this._automatic;\n    },\n    set: function(v) {\n      if (v === this._automatic) {\n        return;\n      }\n      this._automatic = !!v;\n      const method = this._automatic ? \"ignore\" : \"listen\";\n      _.each(this.vertices, function(v2) {\n        v2[method]();\n      });\n    }\n  },\n  beginning: {\n    enumerable: true,\n    get: function() {\n      return this._beginning;\n    },\n    set: function(v) {\n      this._beginning = v;\n      this._flagVertices = true;\n    }\n  },\n  ending: {\n    enumerable: true,\n    get: function() {\n      return this._ending;\n    },\n    set: function(v) {\n      this._ending = v;\n      this._flagVertices = true;\n    }\n  },\n  vertices: {\n    enumerable: true,\n    get: function() {\n      return this._collection;\n    },\n    set: function(vertices) {\n      const bindVertices = this._renderer.bindVertices;\n      const unbindVertices = this._renderer.unbindVertices;\n      if (this._collection) {\n        this._collection.unbind(Events.Types.insert, bindVertices).unbind(Events.Types.remove, unbindVertices);\n      }\n      if (vertices instanceof Collection) {\n        this._collection = vertices;\n      } else {\n        this._collection = new Collection(vertices || []);\n      }\n      this._collection.bind(Events.Types.insert, bindVertices).bind(Events.Types.remove, unbindVertices);\n      bindVertices(this._collection);\n    }\n  },\n  mask: {\n    enumerable: true,\n    get: function() {\n      return this._mask;\n    },\n    set: function(v) {\n      this._mask = v;\n      this._flagMask = true;\n      if (_.isObject(v) && !v.clip) {\n        v.clip = true;\n      }\n    }\n  },\n  clip: {\n    enumerable: true,\n    get: function() {\n      return this._clip;\n    },\n    set: function(v) {\n      this._clip = v;\n      this._flagClip = true;\n    }\n  },\n  dashes: {\n    enumerable: true,\n    get: function() {\n      return this._dashes;\n    },\n    set: function(v) {\n      if (typeof v.offset !== \"number\") {\n        v.offset = this.dashes && this._dashes.offset || 0;\n      }\n      this._dashes = v;\n    }\n  }\n};\nfunction FlagVertices() {\n  this._flagVertices = true;\n  this._flagLength = true;\n  if (this.parent) {\n    this.parent._flagLength = true;\n  }\n}\nfunction BindVertices(items) {\n  let i = items.length;\n  while (i--) {\n    items[i].bind(Events.Types.change, this._renderer.flagVertices);\n  }\n  this._renderer.flagVertices();\n}\nfunction UnbindVertices(items) {\n  let i = items.length;\n  while (i--) {\n    items[i].unbind(Events.Types.change, this._renderer.flagVertices);\n  }\n  this._renderer.flagVertices();\n}\nfunction FlagFill() {\n  this._flagFill = true;\n}\nfunction FlagStroke() {\n  this._flagStroke = true;\n}\n\n// src/shapes/rectangle.js\nvar _Rectangle = class extends Path {\n  constructor(x, y, width, height) {\n    const points = [\n      new Anchor(),\n      new Anchor(),\n      new Anchor(),\n      new Anchor()\n    ];\n    super(points, true, false, true);\n    __publicField(this, \"_flagWidth\", 0);\n    __publicField(this, \"_flagHeight\", 0);\n    __publicField(this, \"_width\", 0);\n    __publicField(this, \"_height\", 0);\n    __publicField(this, \"_origin\", null);\n    for (let prop in proto12) {\n      Object.defineProperty(this, prop, proto12[prop]);\n    }\n    this.width = typeof width === \"number\" ? width : 1;\n    this.height = typeof height === \"number\" ? height : 1;\n    this.origin = new Vector();\n    if (typeof x === \"number\") {\n      this.translation.x = x;\n    }\n    if (typeof y === \"number\") {\n      this.translation.y = y;\n    }\n    this._update();\n  }\n  _update() {\n    if (this._flagVertices || this._flagWidth || this._flagHeight) {\n      const xr = this._width / 2;\n      const yr = this._height / 2;\n      if (!this._closed && this.vertices.length === 4) {\n        this.vertices.push(new Anchor());\n      }\n      this.vertices[0].set(-xr, -yr).sub(this._origin).command = Commands.move;\n      this.vertices[1].set(xr, -yr).sub(this._origin).command = Commands.line;\n      this.vertices[2].set(xr, yr).sub(this._origin).command = Commands.line;\n      this.vertices[3].set(-xr, yr).sub(this._origin).command = Commands.line;\n      if (this.vertices[4]) {\n        this.vertices[4].set(-xr, -yr).sub(this._origin).command = Commands.line;\n      }\n    }\n    super._update.call(this);\n    return this;\n  }\n  flagReset() {\n    this._flagWidth = this._flagHeight = false;\n    super.flagReset.call(this);\n    return this;\n  }\n  clone(parent) {\n    const clone = new _Rectangle(0, 0, this.width, this.height);\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n    clone.skewX = this.skewX;\n    clone.skewY = this.skewY;\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n    for (let i = 0; i < Path.Properties.length; i++) {\n      const k = Path.Properties[i];\n      clone[k] = this[k];\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone;\n  }\n  toObject() {\n    const object = super.toObject.call(this);\n    object.width = this.width;\n    object.height = this.height;\n    object.origin = this.origin.toObject();\n    return object;\n  }\n};\nvar Rectangle = _Rectangle;\n__publicField(Rectangle, \"Properties\", [\"width\", \"height\"]);\nvar proto12 = {\n  width: {\n    enumerable: true,\n    get: function() {\n      return this._width;\n    },\n    set: function(v) {\n      this._width = v;\n      this._flagWidth = true;\n    }\n  },\n  height: {\n    enumerable: true,\n    get: function() {\n      return this._height;\n    },\n    set: function(v) {\n      this._height = v;\n      this._flagHeight = true;\n    }\n  },\n  origin: {\n    enumerable: true,\n    get: function() {\n      return this._origin;\n    },\n    set: function(v) {\n      if (this._origin) {\n        this._origin.unbind(Events.Types.change, this._renderer.flagVertices);\n      }\n      this._origin = v;\n      this._origin.bind(Events.Types.change, this._renderer.flagVertices);\n      this._renderer.flagVertices();\n    }\n  }\n};\n\n// src/effects/sprite.js\nvar _Sprite = class extends Rectangle {\n  constructor(path, ox, oy, cols, rows, frameRate) {\n    super(ox, oy, 0, 0);\n    __publicField(this, \"_flagTexture\", false);\n    __publicField(this, \"_flagColumns\", false);\n    __publicField(this, \"_flagRows\", false);\n    __publicField(this, \"_flagFrameRate\", false);\n    __publicField(this, \"_flagIndex\", false);\n    __publicField(this, \"_amount\", 1);\n    __publicField(this, \"_duration\", 0);\n    __publicField(this, \"_startTime\", 0);\n    __publicField(this, \"_playing\", false);\n    __publicField(this, \"_firstFrame\", 0);\n    __publicField(this, \"_lastFrame\", 0);\n    __publicField(this, \"_loop\", true);\n    __publicField(this, \"_texture\", null);\n    __publicField(this, \"_columns\", 1);\n    __publicField(this, \"_rows\", 1);\n    __publicField(this, \"_frameRate\", 0);\n    __publicField(this, \"_index\", 0);\n    __publicField(this, \"_origin\", null);\n    for (let prop in proto13) {\n      Object.defineProperty(this, prop, proto13[prop]);\n    }\n    this.noStroke();\n    this.noFill();\n    if (path instanceof Texture) {\n      this.texture = path;\n    } else if (typeof path === \"string\") {\n      this.texture = new Texture(path);\n    }\n    this.origin = new Vector();\n    this._update();\n    if (typeof cols === \"number\") {\n      this.columns = cols;\n    }\n    if (typeof rows === \"number\") {\n      this.rows = rows;\n    }\n    if (typeof frameRate === \"number\") {\n      this.frameRate = frameRate;\n    }\n    this.index = 0;\n  }\n  play(firstFrame, lastFrame, onLastFrame) {\n    this._playing = true;\n    this._firstFrame = 0;\n    this._lastFrame = this.amount - 1;\n    this._startTime = _.performance.now();\n    if (typeof firstFrame === \"number\") {\n      this._firstFrame = firstFrame;\n    }\n    if (typeof lastFrame === \"number\") {\n      this._lastFrame = lastFrame;\n    }\n    if (typeof onLastFrame === \"function\") {\n      this._onLastFrame = onLastFrame;\n    } else {\n      delete this._onLastFrame;\n    }\n    if (this._index !== this._firstFrame) {\n      this._startTime -= 1e3 * Math.abs(this._index - this._firstFrame) / this._frameRate;\n    }\n    return this;\n  }\n  pause() {\n    this._playing = false;\n    return this;\n  }\n  stop() {\n    this._playing = false;\n    this._index = 0;\n    return this;\n  }\n  clone(parent) {\n    const clone = new _Sprite(this.texture, this.translation.x, this.translation.y, this.columns, this.rows, this.frameRate);\n    if (this.playing) {\n      clone.play(this._firstFrame, this._lastFrame);\n      clone._loop = this._loop;\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone;\n  }\n  toObject() {\n    const object = super.toObject.call(this);\n    object.texture = this.texture.toObject();\n    object.columns = this.columns;\n    object.rows = this.rows;\n    object.frameRate = this.frameRate;\n    object.index = this.index;\n    object._firstFrame = this._firstFrame;\n    object._lastFrame = this._lastFrame;\n    object._loop = this._loop;\n    return object;\n  }\n  _update() {\n    const effect = this._texture;\n    const cols = this._columns;\n    const rows = this._rows;\n    let width, height, elapsed, amount, duration;\n    let index, iw, ih, frames;\n    if (effect) {\n      if (this._flagColumns || this._flagRows) {\n        this._amount = this._columns * this._rows;\n      }\n      if (this._flagFrameRate) {\n        this._duration = 1e3 * this._amount / this._frameRate;\n      }\n      if (this._flagTexture) {\n        this.fill = effect;\n      }\n      if (effect.loaded) {\n        iw = effect.image.width;\n        ih = effect.image.height;\n        width = iw / cols;\n        height = ih / rows;\n        amount = this._amount;\n        if (this.width !== width) {\n          this.width = width;\n        }\n        if (this.height !== height) {\n          this.height = height;\n        }\n        if (this._playing && this._frameRate > 0) {\n          if (_.isNaN(this._lastFrame)) {\n            this._lastFrame = amount - 1;\n          }\n          elapsed = _.performance.now() - this._startTime;\n          frames = this._lastFrame + 1;\n          duration = 1e3 * (frames - this._firstFrame) / this._frameRate;\n          if (this._loop) {\n            elapsed = elapsed % duration;\n          } else {\n            elapsed = Math.min(elapsed, duration);\n          }\n          index = lerp(this._firstFrame, frames, elapsed / duration);\n          index = Math.floor(index);\n          if (index !== this._index) {\n            this._index = index;\n            if (index >= this._lastFrame - 1 && this._onLastFrame) {\n              this._onLastFrame();\n            }\n          }\n        }\n        const col = this._index % cols;\n        const row = Math.floor(this._index / cols);\n        const ox = -width * col + (iw - width) / 2;\n        const oy = -height * row + (ih - height) / 2;\n        if (ox !== effect.offset.x) {\n          effect.offset.x = ox;\n        }\n        if (oy !== effect.offset.y) {\n          effect.offset.y = oy;\n        }\n      }\n    }\n    super._update.call(this);\n    return this;\n  }\n  flagReset() {\n    this._flagTexture = this._flagColumns = this._flagRows = this._flagFrameRate = false;\n    super.flagReset.call(this);\n    return this;\n  }\n};\nvar Sprite = _Sprite;\n__publicField(Sprite, \"Properties\", [\n  \"texture\",\n  \"columns\",\n  \"rows\",\n  \"frameRate\",\n  \"index\"\n]);\nvar proto13 = {\n  texture: {\n    enumerable: true,\n    get: function() {\n      return this._texture;\n    },\n    set: function(v) {\n      this._texture = v;\n      this._flagTexture = true;\n    }\n  },\n  columns: {\n    enumerable: true,\n    get: function() {\n      return this._columns;\n    },\n    set: function(v) {\n      this._columns = v;\n      this._flagColumns = true;\n    }\n  },\n  rows: {\n    enumerable: true,\n    get: function() {\n      return this._rows;\n    },\n    set: function(v) {\n      this._rows = v;\n      this._flagRows = true;\n    }\n  },\n  frameRate: {\n    enumerable: true,\n    get: function() {\n      return this._frameRate;\n    },\n    set: function(v) {\n      this._frameRate = v;\n      this._flagFrameRate = true;\n    }\n  },\n  index: {\n    enumerable: true,\n    get: function() {\n      return this._index;\n    },\n    set: function(v) {\n      this._index = v;\n      this._flagIndex = true;\n    }\n  }\n};\n\n// src/shapes/circle.js\nvar cos3 = Math.cos;\nvar sin3 = Math.sin;\nvar _Circle = class extends Path {\n  constructor(ox, oy, r, resolution) {\n    const amount = resolution ? Math.max(resolution, 2) : 4;\n    const points = [];\n    for (let i = 0; i < amount; i++) {\n      points.push(new Anchor(0, 0, 0, 0, 0, 0));\n    }\n    super(points, true, true, true);\n    __publicField(this, \"_flagRadius\", false);\n    __publicField(this, \"_radius\", 0);\n    for (let prop in proto14) {\n      Object.defineProperty(this, prop, proto14[prop]);\n    }\n    if (typeof r === \"number\") {\n      this.radius = r;\n    }\n    this._update();\n    if (typeof ox === \"number\") {\n      this.translation.x = ox;\n    }\n    if (typeof oy === \"number\") {\n      this.translation.y = oy;\n    }\n  }\n  _update() {\n    if (this._flagVertices || this._flagRadius) {\n      let length = this.vertices.length;\n      if (!this._closed && length > 2) {\n        length -= 1;\n      }\n      const c = 4 / 3 * Math.tan(Math.PI / (length * 2));\n      const radius = this._radius;\n      const rc = radius * c;\n      for (let i = 0; i < this.vertices.length; i++) {\n        const pct = i / length;\n        const theta = pct * TWO_PI;\n        const x = radius * cos3(theta);\n        const y = radius * sin3(theta);\n        const lx = rc * cos3(theta - HALF_PI);\n        const ly = rc * sin3(theta - HALF_PI);\n        const rx = rc * cos3(theta + HALF_PI);\n        const ry = rc * sin3(theta + HALF_PI);\n        const v = this.vertices[i];\n        v.command = i === 0 ? Commands.move : Commands.curve;\n        v.set(x, y);\n        v.controls.left.set(lx, ly);\n        v.controls.right.set(rx, ry);\n      }\n    }\n    super._update.call(this);\n    return this;\n  }\n  flagReset() {\n    this._flagRadius = false;\n    super.flagReset.call(this);\n    return this;\n  }\n  clone(parent) {\n    const clone = new _Circle(0, 0, this.radius, this.vertices.length);\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n    clone.skewX = this.skewX;\n    clone.skewY = this.skewY;\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n    for (let i = 0; i < Path.Properties.length; i++) {\n      const k = Path.Properties[i];\n      clone[k] = this[k];\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone;\n  }\n  toObject() {\n    const object = super.toObject.call(this);\n    for (let i = 0; i < _Circle.Properties.length; i++) {\n      const k = _Circle.Properties[i];\n      object[k] = this[k];\n    }\n    return object;\n  }\n};\nvar Circle = _Circle;\n__publicField(Circle, \"Properties\", [\"radius\"]);\nvar proto14 = {\n  radius: {\n    enumerable: true,\n    get: function() {\n      return this._radius;\n    },\n    set: function(v) {\n      this._radius = v;\n      this._flagRadius = true;\n    }\n  }\n};\n\n// src/shapes/ellipse.js\nvar cos4 = Math.cos;\nvar sin4 = Math.sin;\nvar _Ellipse = class extends Path {\n  constructor(x, y, rx, ry, resolution) {\n    if (typeof ry !== \"number\" && typeof rx === \"number\") {\n      ry = rx;\n    }\n    const amount = resolution ? Math.max(resolution, 2) : 4;\n    const points = [];\n    for (let i = 0; i < amount; i++) {\n      points.push(new Anchor());\n    }\n    super(points, true, true, true);\n    __publicField(this, \"_flagWidth\", false);\n    __publicField(this, \"_flagHeight\", false);\n    __publicField(this, \"_width\", 0);\n    __publicField(this, \"_height\", 0);\n    for (let prop in proto15) {\n      Object.defineProperty(this, prop, proto15[prop]);\n    }\n    if (typeof rx === \"number\") {\n      this.width = rx * 2;\n    }\n    if (typeof ry === \"number\") {\n      this.height = ry * 2;\n    }\n    this._update();\n    if (typeof x === \"number\") {\n      this.translation.x = x;\n    }\n    if (typeof y === \"number\") {\n      this.translation.y = y;\n    }\n  }\n  _update() {\n    if (this._flagVertices || this._flagWidth || this._flagHeight) {\n      let length = this.vertices.length;\n      if (!this._closed && length > 2) {\n        length -= 1;\n      }\n      const c = 4 / 3 * Math.tan(Math.PI / (this.vertices.length * 2));\n      const radiusX = this._width / 2;\n      const radiusY = this._height / 2;\n      for (let i = 0; i < this.vertices.length; i++) {\n        const pct = i / length;\n        const theta = pct * TWO_PI;\n        const x = radiusX * cos4(theta);\n        const y = radiusY * sin4(theta);\n        const lx = radiusX * c * cos4(theta - HALF_PI);\n        const ly = radiusY * c * sin4(theta - HALF_PI);\n        const rx = radiusX * c * cos4(theta + HALF_PI);\n        const ry = radiusY * c * sin4(theta + HALF_PI);\n        const v = this.vertices[i];\n        v.command = i === 0 ? Commands.move : Commands.curve;\n        v.set(x, y);\n        v.controls.left.set(lx, ly);\n        v.controls.right.set(rx, ry);\n      }\n    }\n    super._update.call(this);\n    return this;\n  }\n  flagReset() {\n    this._flagWidth = this._flagHeight = false;\n    super.flagReset.call(this);\n    return this;\n  }\n  clone(parent) {\n    const rx = this.width / 2;\n    const ry = this.height / 2;\n    const resolution = this.vertices.length;\n    const clone = new _Ellipse(0, 0, rx, ry, resolution);\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n    clone.skewX = this.skewX;\n    clone.skewY = this.skewY;\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n    for (let i = 0; i < Path.Properties.length; i++) {\n      const k = Path.Properties[i];\n      clone[k] = this[k];\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone;\n  }\n  toObject() {\n    const object = super.toObject.call(this);\n    for (let i = 0; i < _Ellipse.Properties.length; i++) {\n      const k = _Ellipse.Properties[i];\n      object[k] = this[k];\n    }\n    return object;\n  }\n};\nvar Ellipse = _Ellipse;\n__publicField(Ellipse, \"Properties\", [\"width\", \"height\"]);\nvar proto15 = {\n  width: {\n    enumerable: true,\n    get: function() {\n      return this._width;\n    },\n    set: function(v) {\n      this._width = v;\n      this._flagWidth = true;\n    }\n  },\n  height: {\n    enumerable: true,\n    get: function() {\n      return this._height;\n    },\n    set: function(v) {\n      this._height = v;\n      this._flagHeight = true;\n    }\n  }\n};\n\n// src/shapes/line.js\nvar Line = class extends Path {\n  constructor(x1, y1, x2, y2) {\n    const points = [\n      new Anchor(x1, y1),\n      new Anchor(x2, y2)\n    ];\n    super(points);\n    for (let prop in proto16) {\n      Object.defineProperty(this, prop, proto16[prop]);\n    }\n    this.vertices[0].command = Commands.move;\n    this.vertices[1].command = Commands.line;\n    this.automatic = false;\n  }\n};\nvar proto16 = {\n  left: {\n    enumerable: true,\n    get: function() {\n      return this.vertices[0];\n    },\n    set: function(v) {\n      if (_.isObject(v)) {\n        this.vertices.splice(0, 1, v);\n      } else {\n        const error = new TwoError(\"Two.Line.x argument is not an object.\");\n        console.warn(error.name, error.message);\n      }\n    }\n  },\n  right: {\n    enumerable: true,\n    get: function() {\n      return this.vertices[0];\n    },\n    set: function(v) {\n      if (_.isObject(v)) {\n        this.vertices.splice(1, 1, v);\n      } else {\n        const error = new TwoError(\"Two.Line.y argument is not an object.\");\n        console.warn(error.name, error.message);\n      }\n    }\n  }\n};\n\n// src/shapes/rounded-rectangle.js\nvar _RoundedRectangle = class extends Path {\n  constructor(x, y, width, height, radius) {\n    if (typeof radius === \"undefined\" && typeof width === \"number\" && typeof height === \"number\") {\n      radius = Math.floor(Math.min(width, height) / 12);\n    }\n    const points = [];\n    for (let i = 0; i < 10; i++) {\n      points.push(new Anchor(0, 0, 0, 0, 0, 0, i === 0 ? Commands.move : Commands.curve));\n    }\n    super(points);\n    __publicField(this, \"_flagWidth\", false);\n    __publicField(this, \"_flagHeight\", false);\n    __publicField(this, \"_flagRadius\", false);\n    __publicField(this, \"_width\", 0);\n    __publicField(this, \"_height\", 0);\n    __publicField(this, \"_radius\", 12);\n    for (let prop in proto17) {\n      Object.defineProperty(this, prop, proto17[prop]);\n    }\n    this.closed = true;\n    this.automatic = false;\n    this._renderer.flagRadius = FlagRadius.bind(this);\n    if (typeof width === \"number\") {\n      this.width = width;\n    }\n    if (typeof height === \"number\") {\n      this.height = height;\n    }\n    if (typeof radius === \"number\") {\n      this.radius = radius;\n    }\n    this._update();\n    if (typeof x === \"number\") {\n      this.translation.x = x;\n    }\n    if (typeof y === \"number\") {\n      this.translation.y = y;\n    }\n  }\n  _update() {\n    if (this._flagVertices || this._flagWidth || this._flagHeight || this._flagRadius) {\n      const width = this._width;\n      const height = this._height;\n      let rx, ry;\n      if (this._radius instanceof Vector) {\n        rx = this._radius.x;\n        ry = this._radius.y;\n      } else {\n        rx = this._radius;\n        ry = this._radius;\n      }\n      let v;\n      let w = width / 2;\n      let h = height / 2;\n      v = this.vertices[0];\n      v.x = -(w - rx);\n      v.y = -h;\n      v = this.vertices[1];\n      v.x = w - rx;\n      v.y = -h;\n      v.controls.left.clear();\n      v.controls.right.x = rx;\n      v.controls.right.y = 0;\n      v = this.vertices[2];\n      v.x = w;\n      v.y = -(h - ry);\n      v.controls.right.clear();\n      v.controls.left.clear();\n      v = this.vertices[3];\n      v.x = w;\n      v.y = h - ry;\n      v.controls.left.clear();\n      v.controls.right.x = 0;\n      v.controls.right.y = ry;\n      v = this.vertices[4];\n      v.x = w - rx;\n      v.y = h;\n      v.controls.right.clear();\n      v.controls.left.clear();\n      v = this.vertices[5];\n      v.x = -(w - rx);\n      v.y = h;\n      v.controls.left.clear();\n      v.controls.right.x = -rx;\n      v.controls.right.y = 0;\n      v = this.vertices[6];\n      v.x = -w;\n      v.y = h - ry;\n      v.controls.left.clear();\n      v.controls.right.clear();\n      v = this.vertices[7];\n      v.x = -w;\n      v.y = -(h - ry);\n      v.controls.left.clear();\n      v.controls.right.x = 0;\n      v.controls.right.y = -ry;\n      v = this.vertices[8];\n      v.x = -(w - rx);\n      v.y = -h;\n      v.controls.left.clear();\n      v.controls.right.clear();\n      v = this.vertices[9];\n      v.copy(this.vertices[8]);\n    }\n    super._update.call(this);\n    return this;\n  }\n  flagReset() {\n    this._flagWidth = this._flagHeight = this._flagRadius = false;\n    super.flagReset.call(this);\n    return this;\n  }\n  clone(parent) {\n    const width = this.width;\n    const height = this.height;\n    const radius = this.radius;\n    const clone = new _RoundedRectangle(0, 0, width, height, radius);\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n    clone.skewX = this.skewX;\n    clone.skewY = this.skewY;\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n    for (let i = 0; i < Path.Properties.length; i++) {\n      const k = Path.Properties[i];\n      clone[k] = this[k];\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone;\n  }\n  toObject() {\n    const object = super.toObject.call(this);\n    for (let i = 0; i < _RoundedRectangle.Properties.length; i++) {\n      const k = _RoundedRectangle.Properties[i];\n      object[k] = this[k];\n    }\n    object.radius = typeof this.radius === \"number\" ? this.radius : this.radius.toObject();\n    return object;\n  }\n};\nvar RoundedRectangle = _RoundedRectangle;\n__publicField(RoundedRectangle, \"Properties\", [\"width\", \"height\", \"radius\"]);\nvar proto17 = {\n  width: {\n    enumerable: true,\n    get: function() {\n      return this._width;\n    },\n    set: function(v) {\n      this._width = v;\n      this._flagWidth = true;\n    }\n  },\n  height: {\n    enumerable: true,\n    get: function() {\n      return this._height;\n    },\n    set: function(v) {\n      this._height = v;\n      this._flagHeight = true;\n    }\n  },\n  radius: {\n    enumerable: true,\n    get: function() {\n      return this._radius;\n    },\n    set: function(v) {\n      if (this._radius instanceof Vector) {\n        this._radius.unbind(Events.Types.change, this._renderer.flagRadius);\n      }\n      this._radius = v;\n      if (this._radius instanceof Vector) {\n        this._radius.bind(Events.Types.change, this._renderer.flagRadius);\n      }\n      this._flagRadius = true;\n    }\n  }\n};\nfunction FlagRadius() {\n  this._flagRadius = true;\n}\n\n// src/text.js\nvar min4 = Math.min;\nvar max4 = Math.max;\nvar _Text = class extends Shape {\n  constructor(message, x, y, styles) {\n    super();\n    __publicField(this, \"_flagValue\", true);\n    __publicField(this, \"_flagFamily\", true);\n    __publicField(this, \"_flagSize\", true);\n    __publicField(this, \"_flagLeading\", true);\n    __publicField(this, \"_flagAlignment\", true);\n    __publicField(this, \"_flagBaseline\", true);\n    __publicField(this, \"_flagStyle\", true);\n    __publicField(this, \"_flagWeight\", true);\n    __publicField(this, \"_flagDecoration\", true);\n    __publicField(this, \"_flagFill\", true);\n    __publicField(this, \"_flagStroke\", true);\n    __publicField(this, \"_flagLinewidth\", true);\n    __publicField(this, \"_flagOpacity\", true);\n    __publicField(this, \"_flagVisible\", true);\n    __publicField(this, \"_flagMask\", false);\n    __publicField(this, \"_flagClip\", false);\n    __publicField(this, \"_value\", \"\");\n    __publicField(this, \"_family\", \"sans-serif\");\n    __publicField(this, \"_size\", 13);\n    __publicField(this, \"_leading\", 17);\n    __publicField(this, \"_alignment\", \"center\");\n    __publicField(this, \"_baseline\", \"middle\");\n    __publicField(this, \"_style\", \"normal\");\n    __publicField(this, \"_weight\", 500);\n    __publicField(this, \"_decoration\", \"none\");\n    __publicField(this, \"_fill\", \"#000\");\n    __publicField(this, \"_stroke\", \"transparent\");\n    __publicField(this, \"_linewidth\", 1);\n    __publicField(this, \"_opacity\", 1);\n    __publicField(this, \"_visible\", true);\n    __publicField(this, \"_mask\", null);\n    __publicField(this, \"_clip\", false);\n    __publicField(this, \"_dashes\", null);\n    for (let prop in proto18) {\n      Object.defineProperty(this, prop, proto18[prop]);\n    }\n    this._renderer.type = \"text\";\n    this._renderer.flagFill = FlagFill2.bind(this);\n    this._renderer.flagStroke = FlagStroke2.bind(this);\n    this.value = message;\n    if (typeof x === \"number\") {\n      this.translation.x = x;\n    }\n    if (typeof y === \"number\") {\n      this.translation.y = y;\n    }\n    this.dashes = [];\n    this.dashes.offset = 0;\n    if (!_.isObject(styles)) {\n      return this;\n    }\n    for (let i = 0; i < _Text.Properties.length; i++) {\n      const property = _Text.Properties[i];\n      if (property in styles) {\n        this[property] = styles[property];\n      }\n    }\n  }\n  clone(parent) {\n    const clone = new _Text(this.value);\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n    for (let i = 0; i < _Text.Properties.length; i++) {\n      const prop = _Text.Properties[i];\n      clone[prop] = this[prop];\n    }\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone._update();\n  }\n  toObject() {\n    const result = {\n      translation: this.translation.toObject(),\n      rotation: this.rotation,\n      scale: this.scale\n    };\n    if (this.matrix.manual) {\n      result.matrix = this.matrix.toObject();\n    }\n    for (let i = 0; i < _Text.Properties.length; i++) {\n      const prop = _Text.Properties[i];\n      result[prop] = this[prop];\n    }\n    return result;\n  }\n  noFill() {\n    this.fill = \"transparent\";\n    return this;\n  }\n  noStroke() {\n    this.stroke = void 0;\n    this.linewidth = void 0;\n    return this;\n  }\n  getBoundingClientRect(shallow) {\n    let matrix3, a, b, c, d;\n    let left, right, top, bottom;\n    this._update(true);\n    matrix3 = shallow ? this._matrix : getComputedMatrix(this);\n    const height = this.leading;\n    const width = this.value.length * this.size * _Text.Ratio;\n    const border = (this._linewidth || 0) / 2;\n    switch (this.alignment) {\n      case \"left\":\n        left = -border;\n        right = width + border;\n        break;\n      case \"right\":\n        left = -(width + border);\n        right = border;\n        break;\n      default:\n        left = -(width / 2 + border);\n        right = width / 2 + border;\n    }\n    switch (this.baseline) {\n      case \"top\":\n        top = -border;\n        bottom = height + border;\n        break;\n      case \"bottom\":\n        top = -(height + border);\n        bottom = border;\n        break;\n      default:\n        top = -(height / 2 + border);\n        bottom = height / 2 + border;\n    }\n    a = matrix3.multiply(left, top, 1);\n    b = matrix3.multiply(left, bottom, 1);\n    c = matrix3.multiply(right, top, 1);\n    d = matrix3.multiply(right, bottom, 1);\n    top = min4(a.y, b.y, c.y, d.y);\n    left = min4(a.x, b.x, c.x, d.x);\n    right = max4(a.x, b.x, c.x, d.x);\n    bottom = max4(a.y, b.y, c.y, d.y);\n    return {\n      top,\n      left,\n      right,\n      bottom,\n      width: right - left,\n      height: bottom - top\n    };\n  }\n  flagReset() {\n    super.flagReset.call(this);\n    this._flagValue = this._flagFamily = this._flagSize = this._flagLeading = this._flagAlignment = this._flagFill = this._flagStroke = this._flagLinewidth = this._flagOpacity = this._flagVisible = this._flagClip = this._flagDecoration = this._flagClassName = this._flagBaseline = this._flagWeight = this._flagStyle = false;\n    return this;\n  }\n};\nvar Text = _Text;\n__publicField(Text, \"Ratio\", 0.6);\n__publicField(Text, \"Properties\", [\n  \"value\",\n  \"family\",\n  \"size\",\n  \"leading\",\n  \"alignment\",\n  \"linewidth\",\n  \"style\",\n  \"weight\",\n  \"decoration\",\n  \"baseline\",\n  \"opacity\",\n  \"visible\",\n  \"fill\",\n  \"stroke\"\n]);\nvar proto18 = {\n  value: {\n    enumerable: true,\n    get: function() {\n      return this._value;\n    },\n    set: function(v) {\n      this._value = v;\n      this._flagValue = true;\n    }\n  },\n  family: {\n    enumerable: true,\n    get: function() {\n      return this._family;\n    },\n    set: function(v) {\n      this._family = v;\n      this._flagFamily = true;\n    }\n  },\n  size: {\n    enumerable: true,\n    get: function() {\n      return this._size;\n    },\n    set: function(v) {\n      this._size = v;\n      this._flagSize = true;\n    }\n  },\n  leading: {\n    enumerable: true,\n    get: function() {\n      return this._leading;\n    },\n    set: function(v) {\n      this._leading = v;\n      this._flagLeading = true;\n    }\n  },\n  alignment: {\n    enumerable: true,\n    get: function() {\n      return this._alignment;\n    },\n    set: function(v) {\n      this._alignment = v;\n      this._flagAlignment = true;\n    }\n  },\n  linewidth: {\n    enumerable: true,\n    get: function() {\n      return this._linewidth;\n    },\n    set: function(v) {\n      this._linewidth = v;\n      this._flagLinewidth = true;\n    }\n  },\n  style: {\n    enumerable: true,\n    get: function() {\n      return this._style;\n    },\n    set: function(v) {\n      this._style = v;\n      this._flagStyle = true;\n    }\n  },\n  weight: {\n    enumerable: true,\n    get: function() {\n      return this._weight;\n    },\n    set: function(v) {\n      this._weight = v;\n      this._flagWeight = true;\n    }\n  },\n  decoration: {\n    enumerable: true,\n    get: function() {\n      return this._decoration;\n    },\n    set: function(v) {\n      this._decoration = v;\n      this._flagDecoration = true;\n    }\n  },\n  baseline: {\n    enumerable: true,\n    get: function() {\n      return this._baseline;\n    },\n    set: function(v) {\n      this._baseline = v;\n      this._flagBaseline = true;\n    }\n  },\n  opacity: {\n    enumerable: true,\n    get: function() {\n      return this._opacity;\n    },\n    set: function(v) {\n      this._opacity = v;\n      this._flagOpacity = true;\n    }\n  },\n  visible: {\n    enumerable: true,\n    get: function() {\n      return this._visible;\n    },\n    set: function(v) {\n      this._visible = v;\n      this._flagVisible = true;\n    }\n  },\n  fill: {\n    enumerable: true,\n    get: function() {\n      return this._fill;\n    },\n    set: function(f) {\n      if (this._fill instanceof Gradient || this._fill instanceof LinearGradient || this._fill instanceof RadialGradient || this._fill instanceof Texture) {\n        this._fill.unbind(Events.Types.change, this._renderer.flagFill);\n      }\n      this._fill = f;\n      this._flagFill = true;\n      if (this._fill instanceof Gradient || this._fill instanceof LinearGradient || this._fill instanceof RadialGradient || this._fill instanceof Texture) {\n        this._fill.bind(Events.Types.change, this._renderer.flagFill);\n      }\n    }\n  },\n  stroke: {\n    enumerable: true,\n    get: function() {\n      return this._stroke;\n    },\n    set: function(f) {\n      if (this._stroke instanceof Gradient || this._stroke instanceof LinearGradient || this._stroke instanceof RadialGradient || this._stroke instanceof Texture) {\n        this._stroke.unbind(Events.Types.change, this._renderer.flagStroke);\n      }\n      this._stroke = f;\n      this._flagStroke = true;\n      if (this._stroke instanceof Gradient || this._stroke instanceof LinearGradient || this._stroke instanceof RadialGradient || this._stroke instanceof Texture) {\n        this._stroke.bind(Events.Types.change, this._renderer.flagStroke);\n      }\n    }\n  },\n  mask: {\n    enumerable: true,\n    get: function() {\n      return this._mask;\n    },\n    set: function(v) {\n      this._mask = v;\n      this._flagMask = true;\n      if (_.isObject(v) && !v.clip) {\n        v.clip = true;\n      }\n    }\n  },\n  clip: {\n    enumerable: true,\n    get: function() {\n      return this._clip;\n    },\n    set: function(v) {\n      this._clip = v;\n      this._flagClip = true;\n    }\n  },\n  dashes: {\n    enumerable: true,\n    get: function() {\n      return this._dashes;\n    },\n    set: function(v) {\n      if (typeof v.offset !== \"number\") {\n        v.offset = this.dashes && this._dashes.offset || 0;\n      }\n      this._dashes = v;\n    }\n  }\n};\nfunction FlagFill2() {\n  this._flagFill = true;\n}\nfunction FlagStroke2() {\n  this._flagStroke = true;\n}\n\n// src/utils/interpret-svg.js\nvar regex2 = {\n  path: /[+-]?(?:\\d*\\.\\d+|\\d+)(?:[eE][+-]\\d+)?/g,\n  cssBackgroundImage: /url\\(['\"]?#([\\w\\d-_]*)['\"]?\\)/i,\n  unitSuffix: /[a-zA-Z%]*/i\n};\nvar alignments = {\n  start: \"left\",\n  middle: \"center\",\n  end: \"right\"\n};\nvar reservedAttributesToRemove = [\"id\", \"class\", \"transform\", \"xmlns\", \"viewBox\"];\nvar overwriteAttrs = [\"x\", \"y\", \"width\", \"height\", \"href\", \"xlink:href\"];\nfunction getAlignment(anchor2) {\n  return alignments[anchor2];\n}\nfunction getBaseline(node) {\n  const a = node.getAttribute(\"dominant-baseline\");\n  const b = node.getAttribute(\"alignment-baseline\");\n  return a || b;\n}\nfunction getTagName(tag) {\n  return tag.replace(/svg:/ig, \"\").toLowerCase();\n}\nfunction applyTransformsToVector(transforms, vector2) {\n  vector2.x += transforms.translateX;\n  vector2.y += transforms.translateY;\n  vector2.x *= transforms.scaleX;\n  vector2.y *= transforms.scaleY;\n  if (transforms.rotation !== 0) {\n    const l = vector2.length();\n    vector2.x = l * Math.cos(transforms.rotation);\n    vector2.y = l * Math.sin(transforms.rotation);\n  }\n}\nfunction extractCSSText(text, styles) {\n  if (!styles) {\n    styles = {};\n  }\n  const commands = text.split(\";\");\n  for (let i = 0; i < commands.length; i++) {\n    const command = commands[i].split(\":\");\n    const name = command[0];\n    const value = command[1];\n    if (typeof name === \"undefined\" || typeof value === \"undefined\") {\n      continue;\n    }\n    styles[name] = value.replace(/\\s/, \"\");\n  }\n  return styles;\n}\nfunction getSvgStyles(node) {\n  const styles = {};\n  const attributes = getSvgAttributes(node);\n  const length = Math.max(attributes.length, node.style.length);\n  for (let i = 0; i < length; i++) {\n    const command = node.style[i];\n    const attribute = attributes[i];\n    if (command) {\n      styles[command] = node.style[command];\n    }\n    if (attribute) {\n      styles[attribute] = node.getAttribute(attribute);\n    }\n  }\n  return styles;\n}\nfunction getSvgAttributes(node) {\n  const attributes = node.getAttributeNames();\n  for (let i = 0; i < reservedAttributesToRemove.length; i++) {\n    const keyword = reservedAttributesToRemove[i];\n    const index = Array.prototype.indexOf.call(attributes, keyword);\n    if (index >= 0) {\n      attributes.splice(index, 1);\n    }\n  }\n  return attributes;\n}\nfunction applySvgViewBox(node, value) {\n  const elements = value.split(/[\\s,]/);\n  const x = -parseFloat(elements[0]);\n  const y = -parseFloat(elements[1]);\n  const width = parseFloat(elements[2]);\n  const height = parseFloat(elements[3]);\n  if (x && y) {\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      if (\"translation\" in child) {\n        child.translation.add(x, y);\n      } else if (\"x\" in child) {\n        child.x = x;\n      } else if (\"y\" in child) {\n        child.y = y;\n      }\n    }\n  }\n  const xExists = typeof node.x === \"number\";\n  const yExists = typeof node.y === \"number\";\n  const widthExists = typeof node.width === \"number\";\n  const heightExists = typeof node.height === \"number\";\n  if (xExists) {\n    node.translation.x += node.x;\n  }\n  if (yExists) {\n    node.translation.y += node.y;\n  }\n  if (widthExists || heightExists) {\n    node.scale = new Vector(1, 1);\n  }\n  if (widthExists) {\n    node.scale.x = node.width / width;\n  }\n  if (heightExists) {\n    node.scale.y = node.height / height;\n  }\n  node.mask = new Rectangle(0, 0, width, height);\n  node.mask.origin.set(-width / 2, -height / 2);\n  return node;\n}\nfunction applySvgAttributes(node, elem, parentStyles) {\n  const styles = {}, attributes = {}, extracted = {};\n  let i, m, key, value, prop, attr;\n  let transforms, x, y;\n  let id, scene, ref, tagName;\n  let ca, cb, cc, error;\n  if (root.getComputedStyle) {\n    const computedStyles = root.getComputedStyle(node);\n    i = computedStyles.length;\n    while (i--) {\n      key = computedStyles[i];\n      value = computedStyles[key];\n      if (typeof value !== \"undefined\") {\n        styles[key] = value;\n      }\n    }\n  }\n  for (i = 0; i < node.attributes.length; i++) {\n    attr = node.attributes[i];\n    if (/style/i.test(attr.nodeName)) {\n      extractCSSText(attr.value, extracted);\n    } else {\n      attributes[attr.nodeName] = attr.value;\n    }\n  }\n  if (typeof styles.opacity !== \"undefined\") {\n    styles[\"stroke-opacity\"] = styles.opacity;\n    styles[\"fill-opacity\"] = styles.opacity;\n    delete styles.opacity;\n  }\n  if (parentStyles) {\n    _.defaults(styles, parentStyles);\n  }\n  _.extend(styles, extracted, attributes);\n  styles.visible = !(typeof styles.display === \"undefined\" && /none/i.test(styles.display)) || typeof styles.visibility === \"undefined\" && /hidden/i.test(styles.visibility);\n  for (key in styles) {\n    value = styles[key];\n    switch (key) {\n      case \"gradientTransform\":\n        if (/none/i.test(value))\n          break;\n        m = node.gradientTransform && node.gradientTransform.baseVal && node.gradientTransform.baseVal.length > 0 ? node.gradientTransform.baseVal[0].matrix : node.getCTM ? node.getCTM() : null;\n        if (m === null)\n          break;\n        transforms = decomposeMatrix(m);\n        switch (elem._renderer.type) {\n          case \"linear-gradient\":\n            applyTransformsToVector(transforms, elem.left);\n            applyTransformsToVector(transforms, elem.right);\n            break;\n          case \"radial-gradient\":\n            elem.center.x += transforms.translateX;\n            elem.center.y += transforms.translateY;\n            elem.focal.x += transforms.translateX;\n            elem.focal.y += transforms.translateY;\n            elem.radius *= Math.max(transforms.scaleX, transforms.scaleY);\n            break;\n        }\n        break;\n      case \"transform\":\n        if (/none/i.test(value))\n          break;\n        m = node.transform && node.transform.baseVal && node.transform.baseVal.length > 0 ? node.transform.baseVal[0].matrix : node.getCTM ? node.getCTM() : null;\n        if (m === null)\n          break;\n        if (Constants.AutoCalculateImportedMatrices) {\n          transforms = decomposeMatrix(m);\n          elem.translation.set(transforms.translateX, transforms.translateY);\n          elem.rotation = Math.PI * (transforms.rotation / 180);\n          elem.scale = new Vector(transforms.scaleX, transforms.scaleY);\n          x = parseFloat((styles.x + \"\").replace(\"px\"));\n          y = parseFloat((styles.y + \"\").replace(\"px\"));\n          if (x) {\n            elem.translation.x = x;\n          }\n          if (y) {\n            elem.translation.y = y;\n          }\n        } else {\n          m = node.getCTM();\n          elem._matrix.manual = true;\n          elem._matrix.set(m.a, m.b, m.c, m.d, m.e, m.f);\n        }\n        break;\n      case \"visible\":\n        if (elem instanceof Group) {\n          elem._visible = value;\n          break;\n        }\n        elem.visible = value;\n        break;\n      case \"stroke-linecap\":\n        if (elem instanceof Group) {\n          elem._cap = value;\n          break;\n        }\n        elem.cap = value;\n        break;\n      case \"stroke-linejoin\":\n        if (elem instanceof Group) {\n          elem._join = value;\n          break;\n        }\n        elem.join = value;\n        break;\n      case \"stroke-miterlimit\":\n        if (elem instanceof Group) {\n          elem._miter = value;\n          break;\n        }\n        elem.miter = value;\n        break;\n      case \"stroke-width\":\n        if (elem instanceof Group) {\n          elem._linewidth = parseFloat(value);\n          break;\n        }\n        elem.linewidth = parseFloat(value);\n        break;\n      case \"opacity\":\n      case \"stroke-opacity\":\n      case \"fill-opacity\":\n        if (elem instanceof Group) {\n          elem._opacity = parseFloat(value);\n          break;\n        }\n        elem.opacity = parseFloat(value);\n        break;\n      case \"clip-path\":\n        if (regex2.cssBackgroundImage.test(value)) {\n          id = value.replace(regex2.cssBackgroundImage, \"$1\");\n          if (read.defs.current && read.defs.current.contains(id)) {\n            ref = read.defs.current.get(id);\n            if (ref && ref.childNodes.length > 0) {\n              ref = ref.childNodes[0];\n              tagName = getTagName(ref.nodeName);\n              elem.mask = read[tagName].call(this, ref, {});\n              switch (elem._renderer.type) {\n                case \"text\":\n                case \"path\":\n                  elem.position.add(elem.mask.position);\n                  elem.mask.position.clear();\n                  break;\n              }\n            }\n          }\n        }\n        break;\n      case \"fill\":\n      case \"stroke\":\n        prop = (elem instanceof Group ? \"_\" : \"\") + key;\n        if (regex2.cssBackgroundImage.test(value)) {\n          id = value.replace(regex2.cssBackgroundImage, \"$1\");\n          if (read.defs.current && read.defs.current.contains(id)) {\n            ref = read.defs.current.get(id);\n            if (!ref.object) {\n              tagName = getTagName(ref.nodeName);\n              ref.object = read[tagName].call(this, ref, {});\n            }\n            ref = ref.object;\n          } else {\n            scene = getScene(this);\n            ref = scene.getById(id);\n          }\n          elem[prop] = ref;\n        } else {\n          elem[prop] = /none/i.test(value) ? \"transparent\" : value;\n        }\n        break;\n      case \"id\":\n        elem.id = value;\n        break;\n      case \"class\":\n      case \"className\":\n        elem.classList = value.split(\" \");\n        elem._flagClassName = true;\n        break;\n      case \"x\":\n      case \"y\":\n        ca = elem instanceof Gradient;\n        cb = elem instanceof LinearGradient;\n        cc = elem instanceof RadialGradient;\n        if (ca || cb || cc) {\n          break;\n        }\n        if (value.match(\"[a-z%]$\") && !value.endsWith(\"px\")) {\n          error = new TwoError(\"only pixel values are supported with the \" + key + \" attribute.\");\n          console.warn(error.name, error.message);\n        }\n        elem.translation[key] = parseFloat(value);\n        break;\n      case \"font-family\":\n        if (elem instanceof Text) {\n          elem.family = value;\n        }\n        break;\n      case \"font-size\":\n        if (elem instanceof Text) {\n          elem.size = value;\n        }\n        break;\n      case \"font-weight\":\n        if (elem instanceof Text) {\n          elem.weight = value;\n        }\n        break;\n      case \"font-style\":\n        if (elem instanceof Text) {\n          elem.style = value;\n        }\n        break;\n      case \"text-decoration\":\n        if (elem instanceof Text) {\n          elem.decoration = value;\n        }\n        break;\n      case \"line-height\":\n        if (elem instanceof Text) {\n          elem.leading = value;\n        }\n        break;\n    }\n  }\n  if (Object.keys(node.dataset).length)\n    elem.dataset = node.dataset;\n  return styles;\n}\nfunction updateDefsCache(node, defsCache) {\n  for (let i = 0, l = node.childNodes.length; i < l; i++) {\n    const n = node.childNodes[i];\n    if (!n.id)\n      continue;\n    const tagName = getTagName(node.nodeName);\n    if (tagName === \"#text\")\n      continue;\n    defsCache.add(n.id, n);\n  }\n}\nfunction getScene(node) {\n  while (node.parent) {\n    node = node.parent;\n  }\n  return node.scene;\n}\nvar read = {\n  svg: function(node) {\n    const defs = read.defs.current = new Registry();\n    const elements = node.getElementsByTagName(\"defs\");\n    for (let i = 0; i < elements.length; i++) {\n      updateDefsCache(elements[i], defs);\n    }\n    const svg2 = read.g.call(this, node);\n    const viewBox = node.getAttribute(\"viewBox\");\n    const x = node.getAttribute(\"x\");\n    const y = node.getAttribute(\"y\");\n    const width = node.getAttribute(\"width\");\n    const height = node.getAttribute(\"height\");\n    svg2.defs = defs;\n    const viewBoxExists = viewBox !== null;\n    const xExists = x !== null;\n    const yExists = y !== null;\n    const widthExists = width !== null;\n    const heightExists = height !== null;\n    if (xExists) {\n      svg2.x = parseFloat(x.replace(regex2.unitSuffix, \"\"));\n    }\n    if (yExists) {\n      svg2.y = parseFloat(y.replace(regex2.unitSuffix, \"\"));\n    }\n    if (widthExists) {\n      svg2.width = parseFloat(width.replace(regex2.unitSuffix, \"\"));\n    }\n    if (heightExists) {\n      svg2.height = parseFloat(height.replace(regex2.unitSuffix, \"\"));\n    }\n    if (viewBoxExists) {\n      applySvgViewBox(svg2, viewBox);\n    }\n    delete read.defs.current;\n    return svg2;\n  },\n  defs: function(node) {\n    return null;\n  },\n  use: function(node, styles) {\n    let error;\n    const href = node.getAttribute(\"href\") || node.getAttribute(\"xlink:href\");\n    if (!href) {\n      error = new TwoError(\"encountered <use /> with no href.\");\n      console.warn(error.name, error.message);\n      return null;\n    }\n    const id = href.slice(1);\n    if (!read.defs.current.contains(id)) {\n      error = new TwoError(\"unable to find element for reference \" + href + \".\");\n      console.warn(error.name, error.message);\n      return null;\n    }\n    const template = read.defs.current.get(id);\n    const fullNode = template.cloneNode(true);\n    for (let i = 0; i < node.attributes.length; i++) {\n      const attr = node.attributes[i];\n      const ca = overwriteAttrs.includes(attr.nodeName);\n      const cb = !fullNode.hasAttribute(attr.nodeName);\n      if (ca || cb) {\n        fullNode.setAttribute(attr.nodeName, attr.value);\n      }\n    }\n    const tagName = getTagName(fullNode.nodeName);\n    return read[tagName].call(this, fullNode, styles);\n  },\n  g: function(node, parentStyles) {\n    const group = new Group();\n    applySvgAttributes.call(this, node, group, parentStyles);\n    this.add(group);\n    const styles = getSvgStyles.call(this, node);\n    for (let i = 0, l = node.childNodes.length; i < l; i++) {\n      const n = node.childNodes[i];\n      const tag = n.nodeName;\n      if (!tag)\n        return;\n      const tagName = getTagName(tag);\n      if (tagName in read) {\n        const o = read[tagName].call(group, n, styles);\n        if (!!o && !o.parent) {\n          group.add(o);\n        }\n      }\n    }\n    return group;\n  },\n  polygon: function(node, parentStyles) {\n    let points;\n    if (typeof node === \"string\") {\n      points = node;\n    } else {\n      points = node.getAttribute(\"points\");\n    }\n    const verts = [];\n    points.replace(/(-?[\\d.eE-]+)[,|\\s](-?[\\d.eE-]+)/g, function(match, p1, p2) {\n      verts.push(new Anchor(parseFloat(p1), parseFloat(p2)));\n    });\n    const poly = new Path(verts, true).noStroke();\n    poly.fill = \"black\";\n    applySvgAttributes.call(this, node, poly, parentStyles);\n    return poly;\n  },\n  polyline: function(node, parentStyles) {\n    const poly = read.polygon.call(this, node, parentStyles);\n    poly.closed = false;\n    return poly;\n  },\n  path: function(node, parentStyles) {\n    let path;\n    if (typeof node === \"string\") {\n      path = node;\n    } else {\n      path = node.getAttribute(\"d\");\n    }\n    let points = [];\n    let closed2 = false, relative = false;\n    if (path) {\n      let coord = new Anchor();\n      let control, coords;\n      let commands = path.match(/[a-df-z][^a-df-z]*/ig);\n      const last = commands.length - 1;\n      _.each(commands.slice(0), function(command, i) {\n        const items = command.slice(1).trim().match(regex2.path);\n        const type = command[0];\n        const lower = type.toLowerCase();\n        let bin, j, l, ct, times;\n        const result = [];\n        if (i === 0) {\n          commands = [];\n        }\n        switch (lower) {\n          case \"h\":\n          case \"v\":\n            if (items.length > 1) {\n              bin = 1;\n            }\n            break;\n          case \"m\":\n          case \"l\":\n          case \"t\":\n            if (items.length > 2) {\n              bin = 2;\n            }\n            break;\n          case \"s\":\n          case \"q\":\n            if (items.length > 4) {\n              bin = 4;\n            }\n            break;\n          case \"c\":\n            if (items.length > 6) {\n              bin = 6;\n            }\n            break;\n          case \"a\":\n            if (items.length > 7) {\n              bin = 7;\n            }\n            break;\n        }\n        if (bin) {\n          for (j = 0, l = items.length, times = 0; j < l; j += bin) {\n            ct = type;\n            if (times > 0) {\n              switch (type) {\n                case \"m\":\n                  ct = \"l\";\n                  break;\n                case \"M\":\n                  ct = \"L\";\n                  break;\n              }\n            }\n            result.push(ct + items.slice(j, j + bin).join(\" \"));\n            times++;\n          }\n          commands = Array.prototype.concat.apply(commands, result);\n        } else {\n          commands.push(command);\n        }\n      });\n      _.each(commands, function(command, i) {\n        let result, x, y;\n        const type = command[0];\n        const lower = type.toLowerCase();\n        coords = command.slice(1).trim().match(regex2.path);\n        relative = type === lower;\n        let x1, y1, x2, y2, x3, y3, x4, y4, reflection;\n        let a, b;\n        let anchor2, rx, ry, xAxisRotation, largeArcFlag, sweepFlag;\n        switch (lower) {\n          case \"z\":\n            if (i >= last) {\n              closed2 = true;\n            } else {\n              x = coord.x;\n              y = coord.y;\n              result = new Anchor(x, y, void 0, void 0, void 0, void 0, Commands.close);\n              for (let j = points.length - 1; j >= 0; j--) {\n                const point = points[j];\n                if (/m/i.test(point.command)) {\n                  coord = point;\n                  break;\n                }\n              }\n            }\n            break;\n          case \"m\":\n          case \"l\":\n            control = void 0;\n            x = parseFloat(coords[0]);\n            y = parseFloat(coords[1]);\n            result = new Anchor(x, y, void 0, void 0, void 0, void 0, /m/i.test(lower) ? Commands.move : Commands.line);\n            if (relative) {\n              result.addSelf(coord);\n            }\n            coord = result;\n            break;\n          case \"h\":\n          case \"v\":\n            a = /h/i.test(lower) ? \"x\" : \"y\";\n            b = /x/i.test(a) ? \"y\" : \"x\";\n            result = new Anchor(void 0, void 0, void 0, void 0, void 0, void 0, Commands.line);\n            result[a] = parseFloat(coords[0]);\n            result[b] = coord[b];\n            if (relative) {\n              result[a] += coord[a];\n            }\n            coord = result;\n            break;\n          case \"c\":\n          case \"s\":\n            x1 = coord.x;\n            y1 = coord.y;\n            if (!control) {\n              control = new Vector();\n            }\n            if (/c/i.test(lower)) {\n              x2 = parseFloat(coords[0]);\n              y2 = parseFloat(coords[1]);\n              x3 = parseFloat(coords[2]);\n              y3 = parseFloat(coords[3]);\n              x4 = parseFloat(coords[4]);\n              y4 = parseFloat(coords[5]);\n            } else {\n              reflection = getReflection(coord, control, relative);\n              x2 = reflection.x;\n              y2 = reflection.y;\n              x3 = parseFloat(coords[0]);\n              y3 = parseFloat(coords[1]);\n              x4 = parseFloat(coords[2]);\n              y4 = parseFloat(coords[3]);\n            }\n            if (relative) {\n              x2 += x1;\n              y2 += y1;\n              x3 += x1;\n              y3 += y1;\n              x4 += x1;\n              y4 += y1;\n            }\n            coord.controls.right.set(x2 - coord.x, y2 - coord.y);\n            result = new Anchor(x4, y4, x3 - x4, y3 - y4, void 0, void 0, Commands.curve);\n            coord = result;\n            control = result.controls.left;\n            break;\n          case \"t\":\n          case \"q\":\n            x1 = coord.x;\n            y1 = coord.y;\n            if (!control) {\n              control = new Vector();\n            }\n            if (/q/i.test(lower)) {\n              x2 = parseFloat(coords[0]);\n              y2 = parseFloat(coords[1]);\n              x3 = parseFloat(coords[0]);\n              y3 = parseFloat(coords[1]);\n              x4 = parseFloat(coords[2]);\n              y4 = parseFloat(coords[3]);\n            } else {\n              reflection = getReflection(coord, control, relative);\n              x2 = reflection.x;\n              y2 = reflection.y;\n              x3 = reflection.x;\n              y3 = reflection.y;\n              x4 = parseFloat(coords[0]);\n              y4 = parseFloat(coords[1]);\n            }\n            if (relative) {\n              x2 += x1;\n              y2 += y1;\n              x3 += x1;\n              y3 += y1;\n              x4 += x1;\n              y4 += y1;\n            }\n            coord.controls.right.set((x2 - coord.x) * 0.33, (y2 - coord.y) * 0.33);\n            result = new Anchor(x4, y4, x3 - x4, y3 - y4, void 0, void 0, Commands.curve);\n            coord = result;\n            control = result.controls.left;\n            break;\n          case \"a\":\n            x1 = coord.x;\n            y1 = coord.y;\n            rx = parseFloat(coords[0]);\n            ry = parseFloat(coords[1]);\n            xAxisRotation = parseFloat(coords[2]);\n            largeArcFlag = parseFloat(coords[3]);\n            sweepFlag = parseFloat(coords[4]);\n            x4 = parseFloat(coords[5]);\n            y4 = parseFloat(coords[6]);\n            if (relative) {\n              x4 += x1;\n              y4 += y1;\n            }\n            anchor2 = new Anchor(x4, y4);\n            anchor2.command = Commands.arc;\n            anchor2.rx = rx;\n            anchor2.ry = ry;\n            anchor2.xAxisRotation = xAxisRotation;\n            anchor2.largeArcFlag = largeArcFlag;\n            anchor2.sweepFlag = sweepFlag;\n            result = anchor2;\n            coord = anchor2;\n            control = void 0;\n            break;\n        }\n        if (result) {\n          if (Array.isArray(result)) {\n            points = points.concat(result);\n          } else {\n            points.push(result);\n          }\n        }\n      });\n    }\n    path = new Path(points, closed2, void 0, true).noStroke();\n    path.fill = \"black\";\n    const rect = path.getBoundingClientRect(true);\n    rect.centroid = {\n      x: rect.left + rect.width / 2,\n      y: rect.top + rect.height / 2\n    };\n    _.each(path.vertices, function(v) {\n      v.subSelf(rect.centroid);\n    });\n    applySvgAttributes.call(this, node, path, parentStyles);\n    path.translation.addSelf(rect.centroid);\n    return path;\n  },\n  circle: function(node, parentStyles) {\n    const x = parseFloat(node.getAttribute(\"cx\"));\n    const y = parseFloat(node.getAttribute(\"cy\"));\n    const r = parseFloat(node.getAttribute(\"r\"));\n    const circle = new Circle(0, 0, r).noStroke();\n    circle.fill = \"black\";\n    applySvgAttributes.call(this, node, circle, parentStyles);\n    circle.translation.x = x;\n    circle.translation.y = y;\n    return circle;\n  },\n  ellipse: function(node, parentStyles) {\n    const x = parseFloat(node.getAttribute(\"cx\"));\n    const y = parseFloat(node.getAttribute(\"cy\"));\n    const width = parseFloat(node.getAttribute(\"rx\"));\n    const height = parseFloat(node.getAttribute(\"ry\"));\n    const ellipse = new Ellipse(0, 0, width, height).noStroke();\n    ellipse.fill = \"black\";\n    applySvgAttributes.call(this, node, ellipse, parentStyles);\n    ellipse.translation.x = x;\n    ellipse.translation.y = y;\n    return ellipse;\n  },\n  rect: function(node, parentStyles) {\n    const rx = parseFloat(node.getAttribute(\"rx\"));\n    const ry = parseFloat(node.getAttribute(\"ry\"));\n    if (!_.isNaN(rx) || !_.isNaN(ry)) {\n      return read[\"rounded-rect\"](node);\n    }\n    const width = parseFloat(node.getAttribute(\"width\"));\n    const height = parseFloat(node.getAttribute(\"height\"));\n    const w2 = width / 2;\n    const h2 = height / 2;\n    const rect = new Rectangle(0, 0, width, height).noStroke();\n    rect.fill = \"black\";\n    applySvgAttributes.call(this, node, rect, parentStyles);\n    rect.translation.x += w2;\n    rect.translation.y += h2;\n    return rect;\n  },\n  \"rounded-rect\": function(node, parentStyles) {\n    const rx = parseFloat(node.getAttribute(\"rx\")) || 0;\n    const ry = parseFloat(node.getAttribute(\"ry\")) || 0;\n    const width = parseFloat(node.getAttribute(\"width\"));\n    const height = parseFloat(node.getAttribute(\"height\"));\n    const w2 = width / 2;\n    const h2 = height / 2;\n    const radius = new Vector(rx, ry);\n    const rect = new RoundedRectangle(0, 0, width, height, radius).noStroke();\n    rect.fill = \"black\";\n    applySvgAttributes.call(this, node, rect, parentStyles);\n    rect.translation.x += w2;\n    rect.translation.y += h2;\n    return rect;\n  },\n  line: function(node, parentStyles) {\n    const x1 = parseFloat(node.getAttribute(\"x1\"));\n    const y1 = parseFloat(node.getAttribute(\"y1\"));\n    const x2 = parseFloat(node.getAttribute(\"x2\"));\n    const y2 = parseFloat(node.getAttribute(\"y2\"));\n    const line = new Line(x1, y1, x2, y2).noFill();\n    applySvgAttributes.call(this, node, line, parentStyles);\n    return line;\n  },\n  lineargradient: function(node, parentStyles) {\n    let units = node.getAttribute(\"gradientUnits\");\n    let spread = node.getAttribute(\"spreadMethod\");\n    if (!units) {\n      units = \"objectBoundingBox\";\n    }\n    if (!spread) {\n      spread = \"pad\";\n    }\n    let x1 = parseFloat(node.getAttribute(\"x1\") || 0);\n    let y1 = parseFloat(node.getAttribute(\"y1\") || 0);\n    let x2 = parseFloat(node.getAttribute(\"x2\") || 0);\n    let y2 = parseFloat(node.getAttribute(\"y2\") || 0);\n    const ox = (x2 + x1) / 2;\n    const oy = (y2 + y1) / 2;\n    if (/userSpaceOnUse/i.test(units)) {\n      x1 -= ox;\n      y1 -= oy;\n      x2 -= ox;\n      y2 -= oy;\n    }\n    const stops = [];\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      let offset = child.getAttribute(\"offset\");\n      if (/%/ig.test(offset)) {\n        offset = parseFloat(offset.replace(/%/ig, \"\")) / 100;\n      }\n      offset = parseFloat(offset);\n      let color = child.getAttribute(\"stop-color\");\n      let opacity = child.getAttribute(\"stop-opacity\");\n      let style = child.getAttribute(\"style\");\n      let matches;\n      if (color === null) {\n        matches = style ? style.match(/stop-color:\\s?([#a-fA-F0-9]*)/) : false;\n        color = matches && matches.length > 1 ? matches[1] : void 0;\n      }\n      if (opacity === null) {\n        matches = style ? style.match(/stop-opacity:\\s?([0-9.-]*)/) : false;\n        opacity = matches && matches.length > 1 ? parseFloat(matches[1]) : 1;\n      } else {\n        opacity = parseFloat(opacity);\n      }\n      stops.push(new Stop(offset, color, opacity));\n    }\n    const gradient = new LinearGradient(x1, y1, x2, y2, stops);\n    gradient.spread = spread;\n    gradient.units = units;\n    applySvgAttributes.call(this, node, gradient, parentStyles);\n    return gradient;\n  },\n  radialgradient: function(node, parentStyles) {\n    let units = node.getAttribute(\"gradientUnits\");\n    let spread = node.getAttribute(\"spreadMethod\");\n    if (!units) {\n      units = \"objectBoundingBox\";\n    }\n    if (!spread) {\n      spread = \"pad\";\n    }\n    let cx = parseFloat(node.getAttribute(\"cx\")) || 0;\n    let cy = parseFloat(node.getAttribute(\"cy\")) || 0;\n    let r = parseFloat(node.getAttribute(\"r\"));\n    let fx = parseFloat(node.getAttribute(\"fx\"));\n    let fy = parseFloat(node.getAttribute(\"fy\"));\n    if (_.isNaN(fx)) {\n      fx = cx;\n    }\n    if (_.isNaN(fy)) {\n      fy = cy;\n    }\n    const ox = Math.abs(cx + fx) / 2;\n    const oy = Math.abs(cy + fy) / 2;\n    if (/userSpaceOnUse/i.test(units)) {\n      cx -= ox;\n      cy -= oy;\n      fx -= ox;\n      fy -= oy;\n    }\n    const stops = [];\n    for (let i = 0; i < node.children.length; i++) {\n      const child = node.children[i];\n      let offset = child.getAttribute(\"offset\");\n      if (/%/ig.test(offset)) {\n        offset = parseFloat(offset.replace(/%/ig, \"\")) / 100;\n      }\n      offset = parseFloat(offset);\n      let color = child.getAttribute(\"stop-color\");\n      let opacity = child.getAttribute(\"stop-opacity\");\n      let style = child.getAttribute(\"style\");\n      let matches;\n      if (color === null) {\n        matches = style ? style.match(/stop-color:\\s?([#a-fA-F0-9]*)/) : false;\n        color = matches && matches.length > 1 ? matches[1] : void 0;\n      }\n      if (opacity === null) {\n        matches = style ? style.match(/stop-opacity:\\s?([0-9.-]*)/) : false;\n        opacity = matches && matches.length > 1 ? parseFloat(matches[1]) : 1;\n      } else {\n        opacity = parseFloat(opacity);\n      }\n      stops.push(new Stop(offset, color, opacity));\n    }\n    const gradient = new RadialGradient(cx, cy, r, stops, fx, fy);\n    gradient.spread = spread;\n    gradient.units = units;\n    applySvgAttributes.call(this, node, gradient, parentStyles);\n    return gradient;\n  },\n  text: function(node, parentStyles) {\n    const alignment = getAlignment(node.getAttribute(\"text-anchor\")) || \"left\";\n    const baseline = getBaseline(node) || \"baseline\";\n    const message = node.textContent;\n    const text = new Text(message);\n    applySvgAttributes.call(this, node, text, parentStyles);\n    text.alignment = alignment;\n    text.baseline = baseline;\n    return text;\n  },\n  clippath: function(node, parentStyles) {\n    if (read.defs.current && !read.defs.current.contains(node.id)) {\n      read.defs.current.add(node.id, node);\n    }\n    return null;\n  },\n  image: function(node, parentStyles) {\n    let error;\n    const href = node.getAttribute(\"href\") || node.getAttribute(\"xlink:href\");\n    if (!href) {\n      error = new TwoError(\"encountered <image /> with no href.\");\n      console.warn(error.name, error.message);\n      return null;\n    }\n    const x = parseFloat(node.getAttribute(\"x\")) || 0;\n    const y = parseFloat(node.getAttribute(\"y\")) || 0;\n    const width = parseFloat(node.getAttribute(\"width\"));\n    const height = parseFloat(node.getAttribute(\"height\"));\n    const sprite = new Sprite(href, x, y);\n    if (!_.isNaN(width)) {\n      sprite.width = width;\n    }\n    if (!_.isNaN(height)) {\n      sprite.height = height;\n    }\n    applySvgAttributes.call(this, node, sprite, parentStyles);\n    return sprite;\n  }\n};\n\n// src/utils/xhr.js\nfunction xhr(path, callback) {\n  const xhr2 = new XMLHttpRequest();\n  xhr2.open(\"GET\", path);\n  xhr2.onreadystatechange = function() {\n    if (xhr2.readyState === 4 && xhr2.status === 200) {\n      callback(xhr2.responseText);\n    }\n  };\n  xhr2.send();\n  return xhr2;\n}\n\n// src/effects/image-sequence.js\nvar _ImageSequence = class extends Rectangle {\n  constructor(paths, ox, oy, frameRate) {\n    super(ox, oy, 0, 0);\n    __publicField(this, \"_flagTextures\", false);\n    __publicField(this, \"_flagFrameRate\", false);\n    __publicField(this, \"_flagIndex\", false);\n    __publicField(this, \"_amount\", 1);\n    __publicField(this, \"_duration\", 0);\n    __publicField(this, \"_index\", 0);\n    __publicField(this, \"_startTime\", 0);\n    __publicField(this, \"_playing\", false);\n    __publicField(this, \"_firstFrame\", 0);\n    __publicField(this, \"_lastFrame\", 0);\n    __publicField(this, \"_loop\", true);\n    __publicField(this, \"_textures\", null);\n    __publicField(this, \"_frameRate\", 0);\n    __publicField(this, \"_origin\", null);\n    for (let prop in proto19) {\n      Object.defineProperty(this, prop, proto19[prop]);\n    }\n    this._renderer.flagTextures = FlagTextures.bind(this);\n    this._renderer.bindTextures = BindTextures.bind(this);\n    this._renderer.unbindTextures = UnbindTextures.bind(this);\n    this.noStroke();\n    this.noFill();\n    if (Array.isArray(paths)) {\n      this.textures = paths.map(GenerateTexture.bind(this));\n    } else {\n      this.textures = [GenerateTexture(paths)];\n    }\n    this.origin = new Vector();\n    this._update();\n    if (typeof frameRate === \"number\") {\n      this.frameRate = frameRate;\n    } else {\n      this.frameRate = _ImageSequence.DefaultFrameRate;\n    }\n    this.index = 0;\n  }\n  play(firstFrame, lastFrame, onLastFrame) {\n    this._playing = true;\n    this._firstFrame = 0;\n    this._lastFrame = this.amount - 1;\n    this._startTime = _.performance.now();\n    if (typeof firstFrame === \"number\") {\n      this._firstFrame = firstFrame;\n    }\n    if (typeof lastFrame === \"number\") {\n      this._lastFrame = lastFrame;\n    }\n    if (typeof onLastFrame === \"function\") {\n      this._onLastFrame = onLastFrame;\n    } else {\n      delete this._onLastFrame;\n    }\n    if (this._index !== this._firstFrame) {\n      this._startTime -= 1e3 * Math.abs(this._index - this._firstFrame) / this._frameRate;\n    }\n    return this;\n  }\n  pause() {\n    this._playing = false;\n    return this;\n  }\n  stop() {\n    this._playing = false;\n    this._index = this._firstFrame;\n    return this;\n  }\n  clone(parent) {\n    const clone = new _ImageSequence(this.textures, this.translation.x, this.translation.y, this.frameRate);\n    clone._loop = this._loop;\n    if (this._playing) {\n      clone.play();\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone;\n  }\n  toObject() {\n    const object = super.toObject.call(this);\n    object.textures = this.textures.map(function(texture) {\n      return texture.toObject();\n    });\n    object.frameRate = this.frameRate;\n    object.index = this.index;\n    object._firstFrame = this._firstFrame;\n    object._lastFrame = this._lastFrame;\n    object._loop = this._loop;\n    return object;\n  }\n  _update() {\n    const effect = this._textures;\n    let width, height, elapsed, amount, duration, texture;\n    let index, frames;\n    if (effect) {\n      if (this._flagTextures) {\n        this._amount = effect.length;\n      }\n      if (this._flagFrameRate) {\n        this._duration = 1e3 * this._amount / this._frameRate;\n      }\n      if (this._playing && this._frameRate > 0) {\n        amount = this._amount;\n        if (_.isNaN(this._lastFrame)) {\n          this._lastFrame = amount - 1;\n        }\n        elapsed = _.performance.now() - this._startTime;\n        frames = this._lastFrame + 1;\n        duration = 1e3 * (frames - this._firstFrame) / this._frameRate;\n        if (this._loop) {\n          elapsed = elapsed % duration;\n        } else {\n          elapsed = Math.min(elapsed, duration);\n        }\n        index = lerp(this._firstFrame, frames, elapsed / duration);\n        index = Math.floor(index);\n        if (index !== this._index) {\n          this._index = index;\n          texture = effect[this._index];\n          if (texture.loaded) {\n            width = texture.image.width;\n            height = texture.image.height;\n            if (this.width !== width) {\n              this.width = width;\n            }\n            if (this.height !== height) {\n              this.height = height;\n            }\n            this.fill = texture;\n            if (index >= this._lastFrame - 1 && this._onLastFrame) {\n              this._onLastFrame();\n            }\n          }\n        }\n      } else if (this._flagIndex || !(this.fill instanceof Texture)) {\n        texture = effect[this._index];\n        if (texture.loaded) {\n          width = texture.image.width;\n          height = texture.image.height;\n          if (this.width !== width) {\n            this.width = width;\n          }\n          if (this.height !== height) {\n            this.height = height;\n          }\n        }\n        this.fill = texture;\n      }\n    }\n    super._update.call(this);\n    return this;\n  }\n  flagReset() {\n    this._flagTextures = this._flagFrameRate = false;\n    super.flagReset.call(this);\n    return this;\n  }\n};\nvar ImageSequence = _ImageSequence;\n__publicField(ImageSequence, \"Properties\", [\n  \"textures\",\n  \"frameRate\",\n  \"index\"\n]);\n__publicField(ImageSequence, \"DefaultFrameRate\", 30);\nvar proto19 = {\n  frameRate: {\n    enumerable: true,\n    get: function() {\n      return this._frameRate;\n    },\n    set: function(v) {\n      this._frameRate = v;\n      this._flagFrameRate = true;\n    }\n  },\n  index: {\n    enumerable: true,\n    get: function() {\n      return this._index;\n    },\n    set: function(v) {\n      this._index = v;\n      this._flagIndex = true;\n    }\n  },\n  textures: {\n    enumerable: true,\n    get: function() {\n      return this._textures;\n    },\n    set: function(textures) {\n      const bindTextures = this._renderer.bindTextures;\n      const unbindTextures = this._renderer.unbindTextures;\n      if (this._textures) {\n        this._textures.unbind(Events.Types.insert, bindTextures).unbind(Events.Types.remove, unbindTextures);\n      }\n      this._textures = new Collection((textures || []).slice(0));\n      this._textures.bind(Events.Types.insert, bindTextures).bind(Events.Types.remove, unbindTextures);\n      bindTextures(this._textures);\n    }\n  }\n};\nfunction FlagTextures() {\n  this._flagTextures = true;\n}\nfunction BindTextures(items) {\n  let i = items.length;\n  while (i--) {\n    items[i].bind(Events.Types.change, this._renderer.flagTextures);\n  }\n  this._renderer.flagTextures();\n}\nfunction UnbindTextures(items) {\n  let i = items.length;\n  while (i--) {\n    items[i].unbind(Events.Types.change, this._renderer.flagTextures);\n  }\n  this._renderer.flagTextures();\n}\nfunction GenerateTexture(obj) {\n  if (obj instanceof Texture) {\n    return obj;\n  } else if (typeof obj === \"string\") {\n    return new Texture(obj);\n  }\n}\n\n// src/shapes/arc-segment.js\nvar _ArcSegment = class extends Path {\n  constructor(x, y, ir, or, sa, ea, res) {\n    const amount = res || Constants.Resolution * 3;\n    const points = [];\n    for (let i = 0; i < amount; i++) {\n      points.push(new Anchor());\n    }\n    super(points, true, false, true);\n    __publicField(this, \"_flagStartAngle\", false);\n    __publicField(this, \"_flagEndAngle\", false);\n    __publicField(this, \"_flagInnerRadius\", false);\n    __publicField(this, \"_flagOuterRadius\", false);\n    __publicField(this, \"_startAngle\", 0);\n    __publicField(this, \"_endAngle\", TWO_PI);\n    __publicField(this, \"_innerRadius\", 0);\n    __publicField(this, \"_outerRadius\", 0);\n    for (let prop in proto20) {\n      Object.defineProperty(this, prop, proto20[prop]);\n    }\n    if (typeof ir === \"number\") {\n      this.innerRadius = ir;\n    }\n    if (typeof or === \"number\") {\n      this.outerRadius = or;\n    }\n    if (typeof sa === \"number\") {\n      this.startAngle = sa;\n    }\n    if (typeof ea === \"number\") {\n      this.endAngle = ea;\n    }\n    this._update();\n    if (typeof x === \"number\") {\n      this.translation.x = x;\n    }\n    if (typeof y === \"number\") {\n      this.translation.y = y;\n    }\n  }\n  _update() {\n    if (this._flagVertices || this._flagStartAngle || this._flagEndAngle || this._flagInnerRadius || this._flagOuterRadius) {\n      const sa = this._startAngle;\n      const ea = this._endAngle;\n      const ir = this._innerRadius;\n      const or = this._outerRadius;\n      const connected = mod(sa, TWO_PI) === mod(ea, TWO_PI);\n      const punctured = ir > 0;\n      const vertices = this.vertices;\n      let length = punctured ? vertices.length / 2 : vertices.length;\n      let command, id = 0;\n      let i, last, pct, v, theta, step, x, y, amp;\n      if (connected) {\n        length--;\n      } else if (!punctured) {\n        length -= 2;\n      }\n      for (i = 0, last = length - 1; i < length; i++) {\n        pct = i / last;\n        v = vertices[id];\n        theta = pct * (ea - sa) + sa;\n        step = (ea - sa) / length;\n        x = or * Math.cos(theta);\n        y = or * Math.sin(theta);\n        switch (i) {\n          case 0:\n            command = Commands.move;\n            break;\n          default:\n            command = Commands.curve;\n        }\n        v.command = command;\n        v.x = x;\n        v.y = y;\n        v.controls.left.clear();\n        v.controls.right.clear();\n        if (v.command === Commands.curve) {\n          amp = or * step / Math.PI;\n          v.controls.left.x = amp * Math.cos(theta - HALF_PI);\n          v.controls.left.y = amp * Math.sin(theta - HALF_PI);\n          v.controls.right.x = amp * Math.cos(theta + HALF_PI);\n          v.controls.right.y = amp * Math.sin(theta + HALF_PI);\n          if (i === 1) {\n            v.controls.left.multiplyScalar(2);\n          }\n          if (i === last) {\n            v.controls.right.multiplyScalar(2);\n          }\n        }\n        id++;\n      }\n      if (punctured) {\n        if (connected) {\n          vertices[id].command = Commands.close;\n          id++;\n        } else {\n          length--;\n          last = length - 1;\n        }\n        for (i = 0; i < length; i++) {\n          pct = i / last;\n          v = vertices[id];\n          theta = (1 - pct) * (ea - sa) + sa;\n          step = (ea - sa) / length;\n          x = ir * Math.cos(theta);\n          y = ir * Math.sin(theta);\n          command = Commands.curve;\n          if (i <= 0) {\n            command = connected ? Commands.move : Commands.line;\n          }\n          v.command = command;\n          v.x = x;\n          v.y = y;\n          v.controls.left.clear();\n          v.controls.right.clear();\n          if (v.command === Commands.curve) {\n            amp = ir * step / Math.PI;\n            v.controls.left.x = amp * Math.cos(theta + HALF_PI);\n            v.controls.left.y = amp * Math.sin(theta + HALF_PI);\n            v.controls.right.x = amp * Math.cos(theta - HALF_PI);\n            v.controls.right.y = amp * Math.sin(theta - HALF_PI);\n            if (i === 1) {\n              v.controls.left.multiplyScalar(2);\n            }\n            if (i === last) {\n              v.controls.right.multiplyScalar(2);\n            }\n          }\n          id++;\n        }\n        vertices[id].copy(vertices[0]);\n        vertices[id].command = Commands.line;\n      } else if (!connected) {\n        vertices[id].command = Commands.line;\n        vertices[id].x = 0;\n        vertices[id].y = 0;\n        id++;\n        vertices[id].copy(vertices[0]);\n        vertices[id].command = Commands.line;\n      }\n    }\n    super._update.call(this);\n    return this;\n  }\n  flagReset() {\n    super.flagReset.call(this);\n    this._flagStartAngle = this._flagEndAngle = this._flagInnerRadius = this._flagOuterRadius = false;\n    return this;\n  }\n  clone(parent) {\n    const ir = this.innerRadius;\n    const or = this.outerRadius;\n    const sa = this.startAngle;\n    const ea = this.endAngle;\n    const resolution = this.vertices.length;\n    const clone = new _ArcSegment(0, 0, ir, or, sa, ea, resolution);\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n    clone.skewX = this.skewX;\n    clone.skewY = this.skewY;\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n    for (let i = 0; i < Path.Properties.length; i++) {\n      const k = Path.Properties[i];\n      clone[k] = this[k];\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone;\n  }\n  toObject() {\n    const object = super.toObject.call(this);\n    for (let i = 0; i < _ArcSegment.Properties.length; i++) {\n      const k = _ArcSegment.Properties[i];\n      object[k] = this[k];\n    }\n    return object;\n  }\n};\nvar ArcSegment = _ArcSegment;\n__publicField(ArcSegment, \"Properties\", [\"startAngle\", \"endAngle\", \"innerRadius\", \"outerRadius\"]);\nvar proto20 = {\n  startAngle: {\n    enumerable: true,\n    get: function() {\n      return this._startAngle;\n    },\n    set: function(v) {\n      this._startAngle = v;\n      this._flagStartAngle = true;\n    }\n  },\n  endAngle: {\n    enumerable: true,\n    get: function() {\n      return this._endAngle;\n    },\n    set: function(v) {\n      this._endAngle = v;\n      this._flagEndAngle = true;\n    }\n  },\n  innerRadius: {\n    enumerable: true,\n    get: function() {\n      return this._innerRadius;\n    },\n    set: function(v) {\n      this._innerRadius = v;\n      this._flagInnerRadius = true;\n    }\n  },\n  outerRadius: {\n    enumerable: true,\n    get: function() {\n      return this._outerRadius;\n    },\n    set: function(v) {\n      this._outerRadius = v;\n      this._flagOuterRadius = true;\n    }\n  }\n};\n\n// src/shapes/points.js\nvar ceil2 = Math.ceil;\nvar floor3 = Math.floor;\nvar _Points = class extends Shape {\n  constructor(vertices) {\n    super();\n    __publicField(this, \"_flagVertices\", true);\n    __publicField(this, \"_flagLength\", true);\n    __publicField(this, \"_flagFill\", true);\n    __publicField(this, \"_flagStroke\", true);\n    __publicField(this, \"_flagLinewidth\", true);\n    __publicField(this, \"_flagOpacity\", true);\n    __publicField(this, \"_flagVisible\", true);\n    __publicField(this, \"_flagSize\", true);\n    __publicField(this, \"_flagSizeAttenuation\", true);\n    __publicField(this, \"_length\", 0);\n    __publicField(this, \"_fill\", \"#fff\");\n    __publicField(this, \"_stroke\", \"#000\");\n    __publicField(this, \"_linewidth\", 1);\n    __publicField(this, \"_opacity\", 1);\n    __publicField(this, \"_visible\", true);\n    __publicField(this, \"_size\", 1);\n    __publicField(this, \"_sizeAttenuation\", false);\n    __publicField(this, \"_beginning\", 0);\n    __publicField(this, \"_ending\", 1);\n    __publicField(this, \"_dashes\", null);\n    __publicField(this, \"noFill\", Path.prototype.noFill);\n    __publicField(this, \"noStroke\", Path.prototype.noStroke);\n    __publicField(this, \"corner\", Path.prototype.corner);\n    __publicField(this, \"center\", Path.prototype.center);\n    __publicField(this, \"getBoundingClientRect\", Path.prototype.getBoundingClientRect);\n    __publicField(this, \"_updateLength\", Path.prototype._updateLength);\n    for (let prop in proto21) {\n      Object.defineProperty(this, prop, proto21[prop]);\n    }\n    this._renderer.type = \"points\";\n    this._renderer.flagVertices = FlagVertices.bind(this);\n    this._renderer.bindVertices = BindVertices.bind(this);\n    this._renderer.unbindVertices = UnbindVertices.bind(this);\n    this._renderer.flagFill = FlagFill.bind(this);\n    this._renderer.flagStroke = FlagStroke.bind(this);\n    this._renderer.vertices = null;\n    this._renderer.collection = null;\n    this.sizeAttenuation = false;\n    this.beginning = 0;\n    this.ending = 1;\n    this.fill = \"#fff\";\n    this.stroke = \"#000\";\n    this.className = \"\";\n    this.visible = true;\n    this.vertices = vertices;\n    this.dashes = [];\n    this.dashes.offset = 0;\n  }\n  clone(parent) {\n    const clone = new _Points();\n    for (let j = 0; j < this.vertices.length; j++) {\n      clone.vertices.push(this.vertices[j].clone());\n    }\n    for (let i = 0; i < _Points.Properties.length; i++) {\n      const k = _Points.Properties[i];\n      clone[k] = this[k];\n    }\n    clone.className = this.className;\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n    clone.skewX = this.skewX;\n    clone.skewY = this.skewY;\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone._update();\n  }\n  toObject() {\n    const result = {\n      vertices: this.vertices.map(function(v) {\n        return v.toObject();\n      })\n    };\n    _.each(_Points.Properties, function(k) {\n      result[k] = this[k];\n    }, this);\n    result.className = this.className;\n    result.translation = this.translation.toObject();\n    result.rotation = this.rotation;\n    result.scale = this.scale instanceof Vector ? this.scale.toObject() : this.scale;\n    result.skewX = this.skewX;\n    result.skewY = this.skewY;\n    if (this.matrix.manual) {\n      result.matrix = this.matrix.toObject();\n    }\n    return result;\n  }\n  subdivide(limit) {\n    this._update();\n    let points = [];\n    for (let i = 0; i < this.vertices.length; i++) {\n      const a = this.vertices[i];\n      const b = this.vertices[i - 1];\n      if (!b) {\n        continue;\n      }\n      const x1 = a.x;\n      const y1 = a.y;\n      const x2 = b.x;\n      const y2 = b.y;\n      const subdivisions = subdivide(x1, y1, x1, y1, x2, y2, x2, y2, limit);\n      points = points.concat(subdivisions);\n    }\n    this.vertices = points;\n    return this;\n  }\n  _update() {\n    if (this._flagVertices) {\n      if (this._flagLength) {\n        this._updateLength(void 0, true);\n      }\n      const beginning = Math.min(this._beginning, this._ending);\n      const ending = Math.max(this._beginning, this._ending);\n      const bid = getIdByLength(this, beginning * this._length);\n      const eid = getIdByLength(this, ending * this._length);\n      const low = ceil2(bid);\n      const high = floor3(eid);\n      let j = 0, v;\n      this._renderer.vertices = [];\n      this._renderer.collection = [];\n      for (let i = 0; i < this._collection.length; i++) {\n        if (i >= low && i <= high) {\n          v = this._collection[i];\n          this._renderer.collection.push(v);\n          this._renderer.vertices[j * 2 + 0] = v.x;\n          this._renderer.vertices[j * 2 + 1] = v.y;\n          j++;\n        }\n      }\n    }\n    super._update.apply(this, arguments);\n    return this;\n  }\n  flagReset() {\n    this._flagVertices = this._flagLength = this._flagFill = this._flagStroke = this._flagLinewidth = this._flagOpacity = this._flagVisible = this._flagSize = this._flagSizeAttenuation = false;\n    super.flagReset.call(this);\n    return this;\n  }\n};\nvar Points = _Points;\n__publicField(Points, \"Properties\", [\n  \"fill\",\n  \"stroke\",\n  \"linewidth\",\n  \"opacity\",\n  \"visible\",\n  \"size\",\n  \"sizeAttenuation\",\n  \"beginning\",\n  \"ending\"\n]);\nvar proto21 = {\n  linewidth: {\n    enumerable: true,\n    get: function() {\n      return this._linewidth;\n    },\n    set: function(v) {\n      this._linewidth = v;\n      this._flagLinewidth = true;\n    }\n  },\n  opacity: {\n    enumerable: true,\n    get: function() {\n      return this._opacity;\n    },\n    set: function(v) {\n      this._opacity = v;\n      this._flagOpacity = true;\n    }\n  },\n  visible: {\n    enumerable: true,\n    get: function() {\n      return this._visible;\n    },\n    set: function(v) {\n      this._visible = v;\n      this._flagVisible = true;\n    }\n  },\n  size: {\n    enumerable: true,\n    get: function() {\n      return this._size;\n    },\n    set: function(v) {\n      this._size = v;\n      this._flagSize = true;\n    }\n  },\n  sizeAttenuation: {\n    enumerable: true,\n    get: function() {\n      return this._sizeAttenuation;\n    },\n    set: function(v) {\n      this._sizeAttenuation = v;\n      this._flagSizeAttenuation = true;\n    }\n  },\n  fill: {\n    enumerable: true,\n    get: function() {\n      return this._fill;\n    },\n    set: function(f) {\n      if (this._fill instanceof Gradient || this._fill instanceof LinearGradient || this._fill instanceof RadialGradient || this._fill instanceof Texture) {\n        this._fill.unbind(Events.Types.change, this._renderer.flagFill);\n      }\n      this._fill = f;\n      this._flagFill = true;\n      if (this._fill instanceof Gradient || this._fill instanceof LinearGradient || this._fill instanceof RadialGradient || this._fill instanceof Texture) {\n        this._fill.bind(Events.Types.change, this._renderer.flagFill);\n      }\n    }\n  },\n  stroke: {\n    enumerable: true,\n    get: function() {\n      return this._stroke;\n    },\n    set: function(f) {\n      if (this._stroke instanceof Gradient || this._stroke instanceof LinearGradient || this._stroke instanceof RadialGradient || this._stroke instanceof Texture) {\n        this._stroke.unbind(Events.Types.change, this._renderer.flagStroke);\n      }\n      this._stroke = f;\n      this._flagStroke = true;\n      if (this._stroke instanceof Gradient || this._stroke instanceof LinearGradient || this._stroke instanceof RadialGradient || this._stroke instanceof Texture) {\n        this._stroke.bind(Events.Types.change, this._renderer.flagStroke);\n      }\n    }\n  },\n  length: {\n    get: function() {\n      if (this._flagLength) {\n        this._updateLength();\n      }\n      return this._length;\n    }\n  },\n  beginning: {\n    enumerable: true,\n    get: function() {\n      return this._beginning;\n    },\n    set: function(v) {\n      this._beginning = v;\n      this._flagVertices = true;\n    }\n  },\n  ending: {\n    enumerable: true,\n    get: function() {\n      return this._ending;\n    },\n    set: function(v) {\n      this._ending = v;\n      this._flagVertices = true;\n    }\n  },\n  vertices: {\n    enumerable: true,\n    get: function() {\n      return this._collection;\n    },\n    set: function(vertices) {\n      const bindVertices = this._renderer.bindVertices;\n      const unbindVertices = this._renderer.unbindVertices;\n      if (this._collection) {\n        this._collection.unbind(Events.Types.insert, bindVertices).unbind(Events.Types.remove, unbindVertices);\n      }\n      if (vertices instanceof Collection) {\n        this._collection = vertices;\n      } else {\n        this._collection = new Collection(vertices || []);\n      }\n      this._collection.bind(Events.Types.insert, bindVertices).bind(Events.Types.remove, unbindVertices);\n      bindVertices(this._collection);\n    }\n  },\n  dashes: {\n    enumerable: true,\n    get: function() {\n      return this._dashes;\n    },\n    set: function(v) {\n      if (typeof v.offset !== \"number\") {\n        v.offset = this.dashes && this._dashes.offset || 0;\n      }\n      this._dashes = v;\n    }\n  }\n};\n\n// src/shapes/polygon.js\nvar cos5 = Math.cos;\nvar sin5 = Math.sin;\nvar _Polygon = class extends Path {\n  constructor(x, y, radius, sides) {\n    sides = Math.max(sides || 0, 3);\n    super();\n    __publicField(this, \"_flagWidth\", false);\n    __publicField(this, \"_flagHeight\", false);\n    __publicField(this, \"_flagSides\", false);\n    __publicField(this, \"_radius\", 0);\n    __publicField(this, \"_width\", 0);\n    __publicField(this, \"_height\", 0);\n    __publicField(this, \"_sides\", 0);\n    for (let prop in proto22) {\n      Object.defineProperty(this, prop, proto22[prop]);\n    }\n    this.closed = true;\n    this.automatic = false;\n    if (typeof radius === \"number\") {\n      this.radius = radius;\n    }\n    if (typeof sides === \"number\") {\n      this.sides = sides;\n    }\n    this._update();\n    if (typeof x === \"number\") {\n      this.translation.x = x;\n    }\n    if (typeof y === \"number\") {\n      this.translation.y = y;\n    }\n  }\n  _update() {\n    if (this._flagVertices || this._flagWidth || this._flagHeight || this._flagSides) {\n      const sides = this._sides;\n      const amount = sides + 1;\n      let length = this.vertices.length;\n      if (length > sides) {\n        this.vertices.splice(sides - 1, length - sides);\n        length = sides;\n      }\n      for (let i = 0; i < amount; i++) {\n        const pct = (i + 0.5) / sides;\n        const theta = TWO_PI * pct + Math.PI / 2;\n        const x = this._width * cos5(theta) / 2;\n        const y = this._height * sin5(theta) / 2;\n        if (i >= length) {\n          this.vertices.push(new Anchor(x, y));\n        } else {\n          this.vertices[i].set(x, y);\n        }\n        this.vertices[i].command = i === 0 ? Commands.move : Commands.line;\n      }\n    }\n    super._update.call(this);\n    return this;\n  }\n  flagReset() {\n    this._flagWidth = this._flagHeight = this._flagSides = false;\n    super.flagReset.call(this);\n    return this;\n  }\n  clone(parent) {\n    const clone = new _Polygon(0, 0, 0, this.sides);\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n    clone.skewX = this.skewX;\n    clone.skewY = this.skewY;\n    clone.width = this.width;\n    clone.height = this.height;\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n    for (let i = 0; i < Path.Properties.length; i++) {\n      const k = Path.Properties[i];\n      clone[k] = this[k];\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone;\n  }\n  toObject() {\n    const object = super.toObject.call(this);\n    for (let i = 0; i < _Polygon.Properties.length; i++) {\n      const k = _Polygon.Properties[i];\n      object[k] = this[k];\n    }\n    return object;\n  }\n};\nvar Polygon = _Polygon;\n__publicField(Polygon, \"Properties\", [\"width\", \"height\", \"sides\"]);\nvar proto22 = {\n  radius: {\n    enumerable: true,\n    get: function() {\n      return this._radius;\n    },\n    set: function(v) {\n      this._radius = v;\n      this.width = v * 2;\n      this.height = v * 2;\n    }\n  },\n  width: {\n    enumerable: true,\n    get: function() {\n      return this._width;\n    },\n    set: function(v) {\n      this._width = v;\n      this._flagWidth = true;\n      this._radius = Math.max(this.width, this.height) / 2;\n    }\n  },\n  height: {\n    enumerable: true,\n    get: function() {\n      return this._height;\n    },\n    set: function(v) {\n      this._height = v;\n      this._flagHeight = true;\n      this._radius = Math.max(this.width, this.height) / 2;\n    }\n  },\n  sides: {\n    enumerable: true,\n    get: function() {\n      return this._sides;\n    },\n    set: function(v) {\n      this._sides = v;\n      this._flagSides = true;\n    }\n  }\n};\n\n// src/shapes/star.js\nvar cos6 = Math.cos;\nvar sin6 = Math.sin;\nvar _Star = class extends Path {\n  constructor(x, y, innerRadius, outerRadius, sides) {\n    if (arguments.length <= 3) {\n      outerRadius = innerRadius;\n      innerRadius = outerRadius / 2;\n    }\n    if (typeof sides !== \"number\" || sides <= 0) {\n      sides = 5;\n    }\n    super();\n    __publicField(this, \"_flagInnerRadius\", false);\n    __publicField(this, \"_flagOuterRadius\", false);\n    __publicField(this, \"_flagSides\", false);\n    __publicField(this, \"_innerRadius\", 0);\n    __publicField(this, \"_outerRadius\", 0);\n    __publicField(this, \"_sides\", 0);\n    for (let prop in proto23) {\n      Object.defineProperty(this, prop, proto23[prop]);\n    }\n    this.closed = true;\n    this.automatic = false;\n    if (typeof innerRadius === \"number\") {\n      this.innerRadius = innerRadius;\n    }\n    if (typeof outerRadius === \"number\") {\n      this.outerRadius = outerRadius;\n    }\n    if (typeof sides === \"number\") {\n      this.sides = sides;\n    }\n    this._update();\n    if (typeof x === \"number\") {\n      this.translation.x = x;\n    }\n    if (typeof y === \"number\") {\n      this.translation.y = y;\n    }\n  }\n  _update() {\n    if (this._flagVertices || this._flagInnerRadius || this._flagOuterRadius || this._flagSides) {\n      const sides = this._sides * 2;\n      const amount = sides + 1;\n      let length = this.vertices.length;\n      if (length > sides) {\n        this.vertices.splice(sides - 1, length - sides);\n        length = sides;\n      }\n      for (let i = 0; i < amount; i++) {\n        const pct = (i + 0.5) / sides;\n        const theta = TWO_PI * pct;\n        const r = (!(i % 2) ? this._innerRadius : this._outerRadius) / 2;\n        const x = r * cos6(theta);\n        const y = r * sin6(theta);\n        if (i >= length) {\n          this.vertices.push(new Anchor(x, y));\n        } else {\n          this.vertices[i].set(x, y);\n        }\n        this.vertices[i].command = i === 0 ? Commands.move : Commands.line;\n      }\n    }\n    super._update.call(this);\n    return this;\n  }\n  flagReset() {\n    this._flagInnerRadius = this._flagOuterRadius = this._flagSides = false;\n    super.flagReset.call(this);\n    return this;\n  }\n  clone(parent) {\n    const ir = this.innerRadius;\n    const or = this.outerRadius;\n    const sides = this.sides;\n    const clone = new _Star(0, 0, ir, or, sides);\n    clone.translation.copy(this.translation);\n    clone.rotation = this.rotation;\n    clone.scale = this.scale;\n    clone.skewX = this.skewX;\n    clone.skewY = this.skewY;\n    if (this.matrix.manual) {\n      clone.matrix.copy(this.matrix);\n    }\n    for (let i = 0; i < Path.Properties.length; i++) {\n      const k = Path.Properties[i];\n      clone[k] = this[k];\n    }\n    if (parent) {\n      parent.add(clone);\n    }\n    return clone;\n  }\n  toObject() {\n    const object = super.toObject.call(this);\n    for (let i = 0; i < _Star.Properties.length; i++) {\n      const k = _Star.Properties[i];\n      object[k] = this[k];\n    }\n    return object;\n  }\n};\nvar Star = _Star;\n__publicField(Star, \"Properties\", [\"innerRadius\", \"outerRadius\", \"sides\"]);\nvar proto23 = {\n  innerRadius: {\n    enumerable: true,\n    get: function() {\n      return this._innerRadius;\n    },\n    set: function(v) {\n      this._innerRadius = v;\n      this._flagInnerRadius = true;\n    }\n  },\n  outerRadius: {\n    enumerable: true,\n    get: function() {\n      return this._outerRadius;\n    },\n    set: function(v) {\n      this._outerRadius = v;\n      this._flagOuterRadius = true;\n    }\n  },\n  sides: {\n    enumerable: true,\n    get: function() {\n      return this._sides;\n    },\n    set: function(v) {\n      this._sides = v;\n      this._flagSides = true;\n    }\n  }\n};\n\n// src/renderers/svg.js\nvar matrix2 = new Matrix2();\nvar svg = {\n  version: 1.1,\n  ns: \"http://www.w3.org/2000/svg\",\n  xlink: \"http://www.w3.org/1999/xlink\",\n  alignments: {\n    left: \"start\",\n    center: \"middle\",\n    right: \"end\"\n  },\n  createElement: function(name, attrs) {\n    const tag = name;\n    const elem = document.createElementNS(svg.ns, tag);\n    if (tag === \"svg\") {\n      attrs = _.defaults(attrs || {}, {\n        version: svg.version\n      });\n    }\n    if (attrs && Object.keys(attrs).length > 0) {\n      svg.setAttributes(elem, attrs);\n    }\n    return elem;\n  },\n  setAttributes: function(elem, attrs) {\n    const keys = Object.keys(attrs);\n    for (let i = 0; i < keys.length; i++) {\n      if (/href/.test(keys[i])) {\n        elem.setAttributeNS(svg.xlink, keys[i], attrs[keys[i]]);\n      } else {\n        elem.setAttribute(keys[i], attrs[keys[i]]);\n      }\n    }\n    return this;\n  },\n  removeAttributes: function(elem, attrs) {\n    for (let key in attrs) {\n      elem.removeAttribute(key);\n    }\n    return this;\n  },\n  toString: function(points, closed2) {\n    let l = points.length, last = l - 1, d, string = \"\";\n    for (let i = 0; i < l; i++) {\n      const b = points[i];\n      const prev = closed2 ? mod(i - 1, l) : Math.max(i - 1, 0);\n      const a = points[prev];\n      let command, c;\n      let vx, vy, ux, uy, ar, bl, br, cl;\n      let rx, ry, xAxisRotation, largeArcFlag, sweepFlag;\n      let x = toFixed(b.x);\n      let y = toFixed(b.y);\n      switch (b.command) {\n        case Commands.close:\n          command = Commands.close;\n          break;\n        case Commands.arc:\n          rx = b.rx;\n          ry = b.ry;\n          xAxisRotation = b.xAxisRotation;\n          largeArcFlag = b.largeArcFlag;\n          sweepFlag = b.sweepFlag;\n          command = Commands.arc + \" \" + rx + \" \" + ry + \" \" + xAxisRotation + \" \" + largeArcFlag + \" \" + sweepFlag + \" \" + x + \" \" + y;\n          break;\n        case Commands.curve:\n          ar = a.controls && a.controls.right || Vector.zero;\n          bl = b.controls && b.controls.left || Vector.zero;\n          if (a.relative) {\n            vx = toFixed(ar.x + a.x);\n            vy = toFixed(ar.y + a.y);\n          } else {\n            vx = toFixed(ar.x);\n            vy = toFixed(ar.y);\n          }\n          if (b.relative) {\n            ux = toFixed(bl.x + b.x);\n            uy = toFixed(bl.y + b.y);\n          } else {\n            ux = toFixed(bl.x);\n            uy = toFixed(bl.y);\n          }\n          command = (i === 0 ? Commands.move : Commands.curve) + \" \" + vx + \" \" + vy + \" \" + ux + \" \" + uy + \" \" + x + \" \" + y;\n          break;\n        case Commands.move:\n          d = b;\n          command = Commands.move + \" \" + x + \" \" + y;\n          break;\n        default:\n          command = b.command + \" \" + x + \" \" + y;\n      }\n      if (i >= last && closed2) {\n        if (b.command === Commands.curve) {\n          c = d;\n          br = b.controls && b.controls.right || b;\n          cl = c.controls && c.controls.left || c;\n          if (b.relative) {\n            vx = toFixed(br.x + b.x);\n            vy = toFixed(br.y + b.y);\n          } else {\n            vx = toFixed(br.x);\n            vy = toFixed(br.y);\n          }\n          if (c.relative) {\n            ux = toFixed(cl.x + c.x);\n            uy = toFixed(cl.y + c.y);\n          } else {\n            ux = toFixed(cl.x);\n            uy = toFixed(cl.y);\n          }\n          x = toFixed(c.x);\n          y = toFixed(c.y);\n          command += \" C \" + vx + \" \" + vy + \" \" + ux + \" \" + uy + \" \" + x + \" \" + y;\n        }\n        if (b.command !== Commands.close) {\n          command += \" Z\";\n        }\n      }\n      string += command + \" \";\n    }\n    return string;\n  },\n  pointsToString: function(points, size) {\n    let string = \"\";\n    const r = size * 0.5;\n    for (let i = 0; i < points.length; i++) {\n      const x = points[i].x;\n      const y = points[i].y - r;\n      string += Commands.move + \" \" + x + \" \" + y + \" \";\n      string += \"a \" + r + \" \" + r + \" 0 1 0 0.001 0 Z\";\n    }\n    return string;\n  },\n  getClip: function(shape, domElement) {\n    let clip = shape._renderer.clip;\n    if (!clip) {\n      clip = shape._renderer.clip = svg.createElement(\"clipPath\", {\n        \"clip-rule\": \"nonzero\"\n      });\n      domElement.defs.appendChild(clip);\n    }\n    return clip;\n  },\n  group: {\n    appendChild: function(object) {\n      const elem = object._renderer.elem;\n      if (!elem) {\n        return;\n      }\n      const tag = elem.nodeName;\n      if (!tag || /(radial|linear)gradient/i.test(tag) || object._clip) {\n        return;\n      }\n      this.elem.appendChild(elem);\n    },\n    removeChild: function(object) {\n      const elem = object._renderer.elem;\n      if (!elem || elem.parentNode != this.elem) {\n        return;\n      }\n      const tag = elem.nodeName;\n      if (!tag) {\n        return;\n      }\n      if (object._clip) {\n        return;\n      }\n      this.elem.removeChild(elem);\n    },\n    orderChild: function(object) {\n      this.elem.appendChild(object._renderer.elem);\n    },\n    renderChild: function(child) {\n      svg[child._renderer.type].render.call(child, this);\n    },\n    render: function(domElement) {\n      if (!this._visible && !this._flagVisible || this._opacity === 0 && !this._flagOpacity) {\n        return this;\n      }\n      this._update();\n      if (!this._renderer.elem) {\n        this._renderer.elem = svg.createElement(\"g\", {\n          id: this.id\n        });\n        domElement.appendChild(this._renderer.elem);\n      }\n      const flagMatrix = this._matrix.manual || this._flagMatrix;\n      const context = {\n        domElement,\n        elem: this._renderer.elem\n      };\n      if (flagMatrix) {\n        this._renderer.elem.setAttribute(\"transform\", \"matrix(\" + this._matrix.toString() + \")\");\n      }\n      for (let i = 0; i < this.children.length; i++) {\n        const child = this.children[i];\n        svg[child._renderer.type].render.call(child, domElement);\n      }\n      if (this._flagId) {\n        this._renderer.elem.setAttribute(\"id\", this._id);\n      }\n      if (this._flagOpacity) {\n        this._renderer.elem.setAttribute(\"opacity\", this._opacity);\n      }\n      if (this._flagVisible) {\n        this._renderer.elem.setAttribute(\"display\", this._visible ? \"inline\" : \"none\");\n      }\n      if (this._flagClassName) {\n        this._renderer.elem.setAttribute(\"class\", this.classList.join(\" \"));\n      }\n      if (this._flagAdditions) {\n        this.additions.forEach(svg.group.appendChild, context);\n      }\n      if (this._flagSubtractions) {\n        this.subtractions.forEach(svg.group.removeChild, context);\n      }\n      if (this._flagOrder) {\n        this.children.forEach(svg.group.orderChild, context);\n      }\n      if (this._flagMask) {\n        if (this._mask) {\n          svg[this._mask._renderer.type].render.call(this._mask, domElement);\n          this._renderer.elem.setAttribute(\"clip-path\", \"url(#\" + this._mask.id + \")\");\n        } else {\n          this._renderer.elem.removeAttribute(\"clip-path\");\n        }\n      }\n      if (this.dataset) {\n        Object.assign(this._renderer.elem.dataset, this.dataset);\n      }\n      return this.flagReset();\n    }\n  },\n  path: {\n    render: function(domElement) {\n      if (this._opacity === 0 && !this._flagOpacity) {\n        return this;\n      }\n      this._update();\n      const changed = {};\n      const flagMatrix = this._matrix.manual || this._flagMatrix;\n      if (flagMatrix) {\n        changed.transform = \"matrix(\" + this._matrix.toString() + \")\";\n      }\n      if (this._flagId) {\n        changed.id = this._id;\n      }\n      if (this._flagVertices) {\n        const vertices = svg.toString(this._renderer.vertices, this._closed);\n        changed.d = vertices;\n      }\n      if (this._fill && this._fill._renderer) {\n        this._fill._update();\n        svg[this._fill._renderer.type].render.call(this._fill, domElement, true);\n      }\n      if (this._flagFill) {\n        changed.fill = this._fill && this._fill.id ? \"url(#\" + this._fill.id + \")\" : this._fill;\n      }\n      if (this._stroke && this._stroke._renderer) {\n        this._stroke._update();\n        svg[this._stroke._renderer.type].render.call(this._stroke, domElement, true);\n      }\n      if (this._flagStroke) {\n        changed.stroke = this._stroke && this._stroke.id ? \"url(#\" + this._stroke.id + \")\" : this._stroke;\n      }\n      if (this._flagLinewidth) {\n        changed[\"stroke-width\"] = this._linewidth;\n      }\n      if (this._flagOpacity) {\n        changed[\"stroke-opacity\"] = this._opacity;\n        changed[\"fill-opacity\"] = this._opacity;\n      }\n      if (this._flagClassName) {\n        changed[\"class\"] = this.classList.join(\" \");\n      }\n      if (this._flagVisible) {\n        changed.visibility = this._visible ? \"visible\" : \"hidden\";\n      }\n      if (this._flagCap) {\n        changed[\"stroke-linecap\"] = this._cap;\n      }\n      if (this._flagJoin) {\n        changed[\"stroke-linejoin\"] = this._join;\n      }\n      if (this._flagMiter) {\n        changed[\"stroke-miterlimit\"] = this._miter;\n      }\n      if (this.dashes && this.dashes.length > 0) {\n        changed[\"stroke-dasharray\"] = this.dashes.join(\" \");\n        changed[\"stroke-dashoffset\"] = this.dashes.offset || 0;\n      }\n      if (!this._renderer.elem) {\n        changed.id = this._id;\n        this._renderer.elem = svg.createElement(\"path\", changed);\n        domElement.appendChild(this._renderer.elem);\n      } else {\n        svg.setAttributes(this._renderer.elem, changed);\n      }\n      if (this._flagClip) {\n        const clip = svg.getClip(this, domElement);\n        const elem = this._renderer.elem;\n        if (this._clip) {\n          elem.removeAttribute(\"id\");\n          clip.setAttribute(\"id\", this.id);\n          clip.appendChild(elem);\n        } else {\n          clip.removeAttribute(\"id\");\n          elem.setAttribute(\"id\", this.id);\n          this.parent._renderer.elem.appendChild(elem);\n        }\n      }\n      if (this._flagMask) {\n        if (this._mask) {\n          svg[this._mask._renderer.type].render.call(this._mask, domElement);\n          this._renderer.elem.setAttribute(\"clip-path\", \"url(#\" + this._mask.id + \")\");\n        } else {\n          this._renderer.elem.removeAttribute(\"clip-path\");\n        }\n      }\n      return this.flagReset();\n    }\n  },\n  points: {\n    render: function(domElement) {\n      if (this._opacity === 0 && !this._flagOpacity) {\n        return this;\n      }\n      this._update();\n      const changed = {};\n      const flagMatrix = this._matrix.manual || this._flagMatrix;\n      if (flagMatrix) {\n        changed.transform = \"matrix(\" + this._matrix.toString() + \")\";\n      }\n      if (this._flagId) {\n        changed.id = this._id;\n      }\n      if (this._flagVertices || this._flagSize || this._flagSizeAttenuation) {\n        let size = this._size;\n        if (!this._sizeAttenuation) {\n          getComputedMatrix(this, matrix2);\n          const me = matrix2.elements;\n          const m = decomposeMatrix(me[0], me[3], me[1], me[4], me[2], me[5]);\n          size /= Math.max(m.scaleX, m.scaleY);\n        }\n        const vertices = svg.pointsToString(this._renderer.collection, size);\n        changed.d = vertices;\n      }\n      if (this._fill && this._fill._renderer) {\n        this._fill._update();\n        svg[this._fill._renderer.type].render.call(this._fill, domElement, true);\n      }\n      if (this._flagFill) {\n        changed.fill = this._fill && this._fill.id ? \"url(#\" + this._fill.id + \")\" : this._fill;\n      }\n      if (this._stroke && this._stroke._renderer) {\n        this._stroke._update();\n        svg[this._stroke._renderer.type].render.call(this._stroke, domElement, true);\n      }\n      if (this._flagStroke) {\n        changed.stroke = this._stroke && this._stroke.id ? \"url(#\" + this._stroke.id + \")\" : this._stroke;\n      }\n      if (this._flagLinewidth) {\n        changed[\"stroke-width\"] = this._linewidth;\n      }\n      if (this._flagOpacity) {\n        changed[\"stroke-opacity\"] = this._opacity;\n        changed[\"fill-opacity\"] = this._opacity;\n      }\n      if (this._flagClassName) {\n        changed[\"class\"] = this.classList.join(\" \");\n      }\n      if (this._flagVisible) {\n        changed.visibility = this._visible ? \"visible\" : \"hidden\";\n      }\n      if (this.dashes && this.dashes.length > 0) {\n        changed[\"stroke-dasharray\"] = this.dashes.join(\" \");\n        changed[\"stroke-dashoffset\"] = this.dashes.offset || 0;\n      }\n      if (!this._renderer.elem) {\n        changed.id = this._id;\n        this._renderer.elem = svg.createElement(\"path\", changed);\n        domElement.appendChild(this._renderer.elem);\n      } else {\n        svg.setAttributes(this._renderer.elem, changed);\n      }\n      return this.flagReset();\n    }\n  },\n  text: {\n    render: function(domElement) {\n      this._update();\n      const changed = {};\n      const flagMatrix = this._matrix.manual || this._flagMatrix;\n      if (flagMatrix) {\n        changed.transform = \"matrix(\" + this._matrix.toString() + \")\";\n      }\n      if (this._flagId) {\n        changed.id = this._id;\n      }\n      if (this._flagFamily) {\n        changed[\"font-family\"] = this._family;\n      }\n      if (this._flagSize) {\n        changed[\"font-size\"] = this._size;\n      }\n      if (this._flagLeading) {\n        changed[\"line-height\"] = this._leading;\n      }\n      if (this._flagAlignment) {\n        changed[\"text-anchor\"] = svg.alignments[this._alignment] || this._alignment;\n      }\n      if (this._flagBaseline) {\n        changed[\"alignment-baseline\"] = changed[\"dominant-baseline\"] = this._baseline;\n      }\n      if (this._flagStyle) {\n        changed[\"font-style\"] = this._style;\n      }\n      if (this._flagWeight) {\n        changed[\"font-weight\"] = this._weight;\n      }\n      if (this._flagDecoration) {\n        changed[\"text-decoration\"] = this._decoration;\n      }\n      if (this._fill && this._fill._renderer) {\n        this._fill._update();\n        svg[this._fill._renderer.type].render.call(this._fill, domElement, true);\n      }\n      if (this._flagFill) {\n        changed.fill = this._fill && this._fill.id ? \"url(#\" + this._fill.id + \")\" : this._fill;\n      }\n      if (this._stroke && this._stroke._renderer) {\n        this._stroke._update();\n        svg[this._stroke._renderer.type].render.call(this._stroke, domElement, true);\n      }\n      if (this._flagStroke) {\n        changed.stroke = this._stroke && this._stroke.id ? \"url(#\" + this._stroke.id + \")\" : this._stroke;\n      }\n      if (this._flagLinewidth) {\n        changed[\"stroke-width\"] = this._linewidth;\n      }\n      if (this._flagOpacity) {\n        changed.opacity = this._opacity;\n      }\n      if (this._flagClassName) {\n        changed[\"class\"] = this.classList.join(\" \");\n      }\n      if (this._flagVisible) {\n        changed.visibility = this._visible ? \"visible\" : \"hidden\";\n      }\n      if (this.dashes && this.dashes.length > 0) {\n        changed[\"stroke-dasharray\"] = this.dashes.join(\" \");\n        changed[\"stroke-dashoffset\"] = this.dashes.offset || 0;\n      }\n      if (!this._renderer.elem) {\n        changed.id = this._id;\n        this._renderer.elem = svg.createElement(\"text\", changed);\n        domElement.defs.appendChild(this._renderer.elem);\n      } else {\n        svg.setAttributes(this._renderer.elem, changed);\n      }\n      if (this._flagClip) {\n        const clip = svg.getClip(this, domElement);\n        const elem = this._renderer.elem;\n        if (this._clip) {\n          elem.removeAttribute(\"id\");\n          clip.setAttribute(\"id\", this.id);\n          clip.appendChild(elem);\n        } else {\n          clip.removeAttribute(\"id\");\n          elem.setAttribute(\"id\", this.id);\n          this.parent._renderer.elem.appendChild(elem);\n        }\n      }\n      if (this._flagMask) {\n        if (this._mask) {\n          svg[this._mask._renderer.type].render.call(this._mask, domElement);\n          this._renderer.elem.setAttribute(\"clip-path\", \"url(#\" + this._mask.id + \")\");\n        } else {\n          this._renderer.elem.removeAttribute(\"clip-path\");\n        }\n      }\n      if (this._flagValue) {\n        this._renderer.elem.textContent = this._value;\n      }\n      return this.flagReset();\n    }\n  },\n  \"linear-gradient\": {\n    render: function(domElement, silent) {\n      if (!silent) {\n        this._update();\n      }\n      const changed = {};\n      if (this._flagId) {\n        changed.id = this._id;\n      }\n      if (this._flagEndPoints) {\n        changed.x1 = this.left._x;\n        changed.y1 = this.left._y;\n        changed.x2 = this.right._x;\n        changed.y2 = this.right._y;\n      }\n      if (this._flagSpread) {\n        changed.spreadMethod = this._spread;\n      }\n      if (this._flagUnits) {\n        changed.gradientUnits = this._units;\n      }\n      if (!this._renderer.elem) {\n        changed.id = this._id;\n        this._renderer.elem = svg.createElement(\"linearGradient\", changed);\n        domElement.defs.appendChild(this._renderer.elem);\n      } else {\n        svg.setAttributes(this._renderer.elem, changed);\n      }\n      if (this._flagStops) {\n        const lengthChanged = this._renderer.elem.childNodes.length !== this.stops.length;\n        if (lengthChanged) {\n          while (this._renderer.elem.lastChild) {\n            this._renderer.elem.removeChild(this._renderer.elem.lastChild);\n          }\n        }\n        for (let i = 0; i < this.stops.length; i++) {\n          const stop = this.stops[i];\n          const attrs = {};\n          if (stop._flagOffset) {\n            attrs.offset = 100 * stop._offset + \"%\";\n          }\n          if (stop._flagColor) {\n            attrs[\"stop-color\"] = stop._color;\n          }\n          if (stop._flagOpacity) {\n            attrs[\"stop-opacity\"] = stop._opacity;\n          }\n          if (!stop._renderer.elem) {\n            stop._renderer.elem = svg.createElement(\"stop\", attrs);\n          } else {\n            svg.setAttributes(stop._renderer.elem, attrs);\n          }\n          if (lengthChanged) {\n            this._renderer.elem.appendChild(stop._renderer.elem);\n          }\n          stop.flagReset();\n        }\n      }\n      return this.flagReset();\n    }\n  },\n  \"radial-gradient\": {\n    render: function(domElement, silent) {\n      if (!silent) {\n        this._update();\n      }\n      const changed = {};\n      if (this._flagId) {\n        changed.id = this._id;\n      }\n      if (this._flagCenter) {\n        changed.cx = this.center._x;\n        changed.cy = this.center._y;\n      }\n      if (this._flagFocal) {\n        changed.fx = this.focal._x;\n        changed.fy = this.focal._y;\n      }\n      if (this._flagRadius) {\n        changed.r = this._radius;\n      }\n      if (this._flagSpread) {\n        changed.spreadMethod = this._spread;\n      }\n      if (this._flagUnits) {\n        changed.gradientUnits = this._units;\n      }\n      if (!this._renderer.elem) {\n        changed.id = this._id;\n        this._renderer.elem = svg.createElement(\"radialGradient\", changed);\n        domElement.defs.appendChild(this._renderer.elem);\n      } else {\n        svg.setAttributes(this._renderer.elem, changed);\n      }\n      if (this._flagStops) {\n        const lengthChanged = this._renderer.elem.childNodes.length !== this.stops.length;\n        if (lengthChanged) {\n          while (this._renderer.elem.lastChild) {\n            this._renderer.elem.removeChild(this._renderer.elem.lastChild);\n          }\n        }\n        for (let i = 0; i < this.stops.length; i++) {\n          const stop = this.stops[i];\n          const attrs = {};\n          if (stop._flagOffset) {\n            attrs.offset = 100 * stop._offset + \"%\";\n          }\n          if (stop._flagColor) {\n            attrs[\"stop-color\"] = stop._color;\n          }\n          if (stop._flagOpacity) {\n            attrs[\"stop-opacity\"] = stop._opacity;\n          }\n          if (!stop._renderer.elem) {\n            stop._renderer.elem = svg.createElement(\"stop\", attrs);\n          } else {\n            svg.setAttributes(stop._renderer.elem, attrs);\n          }\n          if (lengthChanged) {\n            this._renderer.elem.appendChild(stop._renderer.elem);\n          }\n          stop.flagReset();\n        }\n      }\n      return this.flagReset();\n    }\n  },\n  texture: {\n    render: function(domElement, silent) {\n      if (!silent) {\n        this._update();\n      }\n      const changed = {};\n      const styles = { x: 0, y: 0 };\n      const image = this.image;\n      if (this._flagId) {\n        changed.id = this._id;\n      }\n      if (this._flagLoaded && this.loaded) {\n        switch (image.nodeName.toLowerCase()) {\n          case \"canvas\":\n            styles.href = styles[\"xlink:href\"] = image.toDataURL(\"image/png\");\n            break;\n          case \"img\":\n          case \"image\":\n            styles.href = styles[\"xlink:href\"] = this.src;\n            break;\n        }\n      }\n      if (this._flagOffset || this._flagLoaded || this._flagScale) {\n        changed.x = this._offset.x;\n        changed.y = this._offset.y;\n        if (image) {\n          changed.x -= image.width / 2;\n          changed.y -= image.height / 2;\n          if (this._scale instanceof Vector) {\n            changed.x *= this._scale.x;\n            changed.y *= this._scale.y;\n          } else {\n            changed.x *= this._scale;\n            changed.y *= this._scale;\n          }\n        }\n        if (changed.x > 0) {\n          changed.x *= -1;\n        }\n        if (changed.y > 0) {\n          changed.y *= -1;\n        }\n      }\n      if (this._flagScale || this._flagLoaded || this._flagRepeat) {\n        changed.width = 0;\n        changed.height = 0;\n        if (image) {\n          styles.width = changed.width = image.width;\n          styles.height = changed.height = image.height;\n          switch (this._repeat) {\n            case \"no-repeat\":\n              changed.width += 1;\n              changed.height += 1;\n              break;\n          }\n          if (this._scale instanceof Vector) {\n            changed.width *= this._scale.x;\n            changed.height *= this._scale.y;\n          } else {\n            changed.width *= this._scale;\n            changed.height *= this._scale;\n          }\n        }\n      }\n      if (this._flagScale || this._flagLoaded) {\n        if (!this._renderer.image) {\n          this._renderer.image = svg.createElement(\"image\", styles);\n        } else {\n          svg.setAttributes(this._renderer.image, styles);\n        }\n      }\n      if (!this._renderer.elem) {\n        changed.id = this._id;\n        changed.patternUnits = \"userSpaceOnUse\";\n        this._renderer.elem = svg.createElement(\"pattern\", changed);\n        domElement.defs.appendChild(this._renderer.elem);\n      } else if (Object.keys(changed).length !== 0) {\n        svg.setAttributes(this._renderer.elem, changed);\n      }\n      if (this._renderer.elem && this._renderer.image && !this._renderer.appended) {\n        this._renderer.elem.appendChild(this._renderer.image);\n        this._renderer.appended = true;\n      }\n      return this.flagReset();\n    }\n  }\n};\nvar Renderer2 = class extends Events {\n  constructor(params) {\n    super();\n    this.domElement = params.domElement || svg.createElement(\"svg\");\n    this.scene = new Group();\n    this.scene.parent = this;\n    this.defs = svg.createElement(\"defs\");\n    this.domElement.appendChild(this.defs);\n    this.domElement.defs = this.defs;\n    this.domElement.style.overflow = \"hidden\";\n  }\n  setSize(width, height) {\n    this.width = width;\n    this.height = height;\n    svg.setAttributes(this.domElement, {\n      width,\n      height\n    });\n    return this.trigger(Events.Types.resize, width, height);\n  }\n  render() {\n    svg.group.render.call(this.scene, this.domElement);\n    return this;\n  }\n};\n__publicField(Renderer2, \"Utils\", svg);\n\n// src/utils/shaders.js\nvar shaders = {\n  create: function(gl, source, type) {\n    const shader = gl.createShader(gl[type]);\n    gl.shaderSource(shader, source);\n    gl.compileShader(shader);\n    const compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n    if (!compiled) {\n      const error = gl.getShaderInfoLog(shader);\n      gl.deleteShader(shader);\n      throw new TwoError(\"unable to compile shader \" + shader + \": \" + error);\n    }\n    return shader;\n  },\n  types: {\n    vertex: \"VERTEX_SHADER\",\n    fragment: \"FRAGMENT_SHADER\"\n  },\n  path: {\n    vertex: `\n      precision mediump float;\n      attribute vec2 a_position;\n\n      uniform mat3 u_matrix;\n      uniform vec2 u_resolution;\n      uniform vec4 u_rect;\n\n      varying vec2 v_textureCoords;\n\n      void main() {\n        vec2 rectCoords = (a_position * (u_rect.zw - u_rect.xy)) + u_rect.xy;\n        vec2 projected = (u_matrix * vec3(rectCoords, 1.0)).xy;\n        vec2 normal = projected / u_resolution;\n        vec2 clipspace = (normal * 2.0) - 1.0;\n\n        gl_Position = vec4(clipspace * vec2(1.0, -1.0), 0.0, 1.0);\n        v_textureCoords = a_position;\n      }\n    `,\n    fragment: `\n      precision mediump float;\n\n      uniform sampler2D u_image;\n      varying vec2 v_textureCoords;\n\n      void main() {\n        vec4 texel = texture2D(u_image, v_textureCoords);\n        if (texel.a == 0.0) {\n          discard;\n        }\n        gl_FragColor = texel;\n      }\n    `\n  },\n  points: {\n    vertex: `\n      precision mediump float;\n      attribute vec2 a_position;\n\n      uniform float u_size;\n      uniform mat3 u_matrix;\n      uniform vec2 u_resolution;\n\n      varying vec2 v_textureCoords;\n\n      void main() {\n        vec2 projected = (u_matrix * vec3(a_position, 1.0)).xy;\n        vec2 normal = projected / u_resolution;\n        vec2 clipspace = (normal * 2.0) - 1.0;\n\n        gl_PointSize = u_size;\n        gl_Position = vec4(clipspace * vec2(1.0, -1.0), 0.0, 1.0);\n        v_textureCoords = a_position;\n      }\n    `,\n    fragment: `\n      precision mediump float;\n\n      uniform sampler2D u_image;\n\n      void main() {\n        vec4 texel = texture2D(u_image, gl_PointCoord);\n        if (texel.a == 0.0) {\n          discard;\n        }\n        gl_FragColor = texel;\n      }\n    `\n  }\n};\n\n// src/renderers/webgl.js\nvar multiplyMatrix = Matrix2.Multiply;\nvar identity = [1, 0, 0, 0, 1, 0, 0, 0, 1];\nvar transformation = new NumArray(9);\nvar CanvasUtils = Renderer.Utils;\nvar quad = new NumArray([\n  0,\n  0,\n  1,\n  0,\n  0,\n  1,\n  0,\n  1,\n  1,\n  0,\n  1,\n  1\n]);\nvar webgl = {\n  precision: 0.9,\n  isHidden: /(undefined|none|transparent)/i,\n  canvas: root.document ? root.document.createElement(\"canvas\") : { getContext: function() {\n  } },\n  alignments: {\n    left: \"start\",\n    middle: \"center\",\n    right: \"end\"\n  },\n  matrix: new Matrix2(),\n  group: {\n    removeChild: function(child, gl) {\n      if (child.children) {\n        for (let i = 0; i < child.children.length; i++) {\n          webgl.group.removeChild(child.children[i], gl);\n        }\n      }\n      if (child._renderer.texture) {\n        gl.deleteTexture(child._renderer.texture);\n        delete child._renderer.texture;\n      }\n      if (child._renderer.positionBuffer) {\n        gl.deleteBuffer(child._renderer.positionBuffer);\n        delete child._renderer.positionBuffer;\n      }\n    },\n    render: function(gl, programs) {\n      if (!this._visible) {\n        return;\n      }\n      this._update();\n      const parent = this.parent;\n      const flagParentMatrix = parent._matrix && parent._matrix.manual || parent._flagMatrix;\n      const flagMatrix = this._matrix.manual || this._flagMatrix;\n      if (flagParentMatrix || flagMatrix) {\n        if (!this._renderer.matrix) {\n          this._renderer.matrix = new NumArray(9);\n        }\n        this._matrix.toTransformArray(true, transformation);\n        multiplyMatrix(transformation, parent._renderer.matrix, this._renderer.matrix);\n        if (!(this._renderer.scale instanceof Vector)) {\n          this._renderer.scale = new Vector();\n        }\n        if (this._scale instanceof Vector) {\n          this._renderer.scale.x = this._scale.x;\n          this._renderer.scale.y = this._scale.y;\n        } else {\n          this._renderer.scale.x = this._scale;\n          this._renderer.scale.y = this._scale;\n        }\n        if (!/renderer/i.test(parent._renderer.type)) {\n          this._renderer.scale.x *= parent._renderer.scale.x;\n          this._renderer.scale.y *= parent._renderer.scale.y;\n        }\n        if (flagParentMatrix) {\n          this._flagMatrix = true;\n        }\n      }\n      if (this._mask) {\n        gl.clear(gl.STENCIL_BUFFER_BIT);\n        gl.enable(gl.STENCIL_TEST);\n        gl.stencilFunc(gl.ALWAYS, 1, 0);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);\n        gl.colorMask(false, false, false, false);\n        webgl[this._mask._renderer.type].render.call(this._mask, gl, programs, this);\n        gl.stencilFunc(gl.EQUAL, 1, 255);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n        gl.colorMask(true, true, true, true);\n      }\n      this._flagOpacity = parent._flagOpacity || this._flagOpacity;\n      this._renderer.opacity = this._opacity * (parent && parent._renderer ? parent._renderer.opacity : 1);\n      let i;\n      if (this._flagSubtractions) {\n        for (i = 0; i < this.subtractions.length; i++) {\n          webgl.group.removeChild(this.subtractions[i], gl);\n        }\n      }\n      for (i = 0; i < this.children.length; i++) {\n        const child = this.children[i];\n        webgl[child._renderer.type].render.call(child, gl, programs);\n      }\n      if (this._mask) {\n        gl.disable(gl.STENCIL_TEST);\n      }\n      return this.flagReset();\n    }\n  },\n  path: {\n    updateCanvas: function(elem) {\n      let prev, a, c, ux, uy, vx, vy, ar, bl, br, cl, x, y;\n      let isOffset;\n      const commands = elem._renderer.vertices;\n      const canvas2 = this.canvas;\n      const ctx = this.ctx;\n      const scale = elem._renderer.scale;\n      const stroke = elem._stroke;\n      const linewidth = elem._linewidth;\n      const fill = elem._fill;\n      const opacity = elem._renderer.opacity || elem._opacity;\n      const cap = elem._cap;\n      const join = elem._join;\n      const miter = elem._miter;\n      const closed2 = elem._closed;\n      const dashes = elem.dashes;\n      const length = commands.length;\n      const last = length - 1;\n      canvas2.width = Math.max(Math.ceil(elem._renderer.rect.width * scale.x), 1);\n      canvas2.height = Math.max(Math.ceil(elem._renderer.rect.height * scale.y), 1);\n      const centroid = elem._renderer.rect.centroid;\n      const cx = centroid.x;\n      const cy = centroid.y;\n      ctx.clearRect(0, 0, canvas2.width, canvas2.height);\n      if (fill) {\n        if (typeof fill === \"string\") {\n          ctx.fillStyle = fill;\n        } else {\n          webgl[fill._renderer.type].render.call(fill, ctx, elem);\n          ctx.fillStyle = fill._renderer.effect;\n        }\n      }\n      if (stroke) {\n        if (typeof stroke === \"string\") {\n          ctx.strokeStyle = stroke;\n        } else {\n          webgl[stroke._renderer.type].render.call(stroke, ctx, elem);\n          ctx.strokeStyle = stroke._renderer.effect;\n        }\n        if (linewidth) {\n          ctx.lineWidth = linewidth;\n        }\n        if (miter) {\n          ctx.miterLimit = miter;\n        }\n        if (join) {\n          ctx.lineJoin = join;\n        }\n        if (!closed2 && cap) {\n          ctx.lineCap = cap;\n        }\n      }\n      if (typeof opacity === \"number\") {\n        ctx.globalAlpha = opacity;\n      }\n      if (dashes && dashes.length > 0) {\n        ctx.lineDashOffset = dashes.offset || 0;\n        ctx.setLineDash(dashes);\n      }\n      let d, rx, ry, xAxisRotation, largeArcFlag, sweepFlag, ax, ay;\n      ctx.save();\n      ctx.scale(scale.x, scale.y);\n      ctx.translate(cx, cy);\n      ctx.beginPath();\n      for (let i = 0; i < commands.length; i++) {\n        const b = commands[i];\n        x = b.x;\n        y = b.y;\n        switch (b.command) {\n          case Commands.close:\n            ctx.closePath();\n            break;\n          case Commands.arc:\n            rx = b.rx;\n            ry = b.ry;\n            xAxisRotation = b.xAxisRotation;\n            largeArcFlag = b.largeArcFlag;\n            sweepFlag = b.sweepFlag;\n            prev = closed2 ? mod(i - 1, length) : Math.max(i - 1, 0);\n            a = commands[prev];\n            ax = a.x;\n            ay = a.y;\n            CanvasUtils.renderSvgArcCommand(ctx, ax, ay, rx, ry, largeArcFlag, sweepFlag, xAxisRotation, x, y);\n            break;\n          case Commands.curve:\n            prev = closed2 ? mod(i - 1, length) : Math.max(i - 1, 0);\n            a = commands[prev];\n            ar = a.controls && a.controls.right || Vector.zero;\n            bl = b.controls && b.controls.left || Vector.zero;\n            if (a._relative) {\n              vx = ar.x + a.x;\n              vy = ar.y + a.y;\n            } else {\n              vx = ar.x;\n              vy = ar.y;\n            }\n            if (b._relative) {\n              ux = bl.x + b.x;\n              uy = bl.y + b.y;\n            } else {\n              ux = bl.x;\n              uy = bl.y;\n            }\n            ctx.bezierCurveTo(vx, vy, ux, uy, x, y);\n            if (i >= last && closed2) {\n              c = d;\n              br = b.controls && b.controls.right || Vector.zero;\n              cl = c.controls && c.controls.left || Vector.zero;\n              if (b._relative) {\n                vx = br.x + b.x;\n                vy = br.y + b.y;\n              } else {\n                vx = br.x;\n                vy = br.y;\n              }\n              if (c._relative) {\n                ux = cl.x + c.x;\n                uy = cl.y + c.y;\n              } else {\n                ux = cl.x;\n                uy = cl.y;\n              }\n              x = c.x;\n              y = c.y;\n              ctx.bezierCurveTo(vx, vy, ux, uy, x, y);\n            }\n            break;\n          case Commands.line:\n            ctx.lineTo(x, y);\n            break;\n          case Commands.move:\n            d = b;\n            ctx.moveTo(x, y);\n            break;\n        }\n      }\n      if (closed2) {\n        ctx.closePath();\n      }\n      if (!webgl.isHidden.test(fill)) {\n        isOffset = fill._renderer && fill._renderer.offset;\n        if (isOffset) {\n          ctx.save();\n          ctx.translate(-fill._renderer.offset.x, -fill._renderer.offset.y);\n          ctx.scale(fill._renderer.scale.x, fill._renderer.scale.y);\n        }\n        ctx.fill();\n        if (isOffset) {\n          ctx.restore();\n        }\n      }\n      if (!webgl.isHidden.test(stroke)) {\n        isOffset = stroke._renderer && stroke._renderer.offset;\n        if (isOffset) {\n          ctx.save();\n          ctx.translate(-stroke._renderer.offset.x, -stroke._renderer.offset.y);\n          ctx.scale(stroke._renderer.scale.x, stroke._renderer.scale.y);\n          ctx.lineWidth = linewidth / stroke._renderer.scale.x;\n        }\n        ctx.stroke();\n        if (isOffset) {\n          ctx.restore();\n        }\n      }\n      ctx.restore();\n    },\n    getBoundingClientRect: function(vertices, border, rect) {\n      let left = Infinity, right = -Infinity, top = Infinity, bottom = -Infinity, width, height;\n      vertices.forEach(function(v) {\n        const x = v.x, y = v.y, controls = v.controls;\n        let a, b, c, d, cl, cr;\n        top = Math.min(y, top);\n        left = Math.min(x, left);\n        right = Math.max(x, right);\n        bottom = Math.max(y, bottom);\n        if (!v.controls) {\n          return;\n        }\n        cl = controls.left;\n        cr = controls.right;\n        if (!cl || !cr) {\n          return;\n        }\n        a = v._relative ? cl.x + x : cl.x;\n        b = v._relative ? cl.y + y : cl.y;\n        c = v._relative ? cr.x + x : cr.x;\n        d = v._relative ? cr.y + y : cr.y;\n        if (!a || !b || !c || !d) {\n          return;\n        }\n        top = Math.min(b, d, top);\n        left = Math.min(a, c, left);\n        right = Math.max(a, c, right);\n        bottom = Math.max(b, d, bottom);\n      });\n      if (typeof border === \"number\") {\n        top -= border;\n        left -= border;\n        right += border;\n        bottom += border;\n      }\n      width = right - left;\n      height = bottom - top;\n      rect.top = top;\n      rect.left = left;\n      rect.right = right;\n      rect.bottom = bottom;\n      rect.width = width;\n      rect.height = height;\n      if (!rect.centroid) {\n        rect.centroid = {};\n      }\n      rect.centroid.x = -left;\n      rect.centroid.y = -top;\n    },\n    render: function(gl, programs, forcedParent) {\n      if (!this._visible || !this._opacity) {\n        return this;\n      }\n      this._update();\n      const parent = forcedParent || this.parent;\n      const program = programs[this._renderer.type];\n      const flagParentMatrix = parent._matrix.manual || parent._flagMatrix;\n      const flagMatrix = this._matrix.manual || this._flagMatrix;\n      const parentChanged = this._renderer.parent !== parent;\n      const flagTexture = this._flagVertices || this._flagFill || this._fill instanceof LinearGradient && (this._fill._flagSpread || this._fill._flagStops || this._fill._flagEndPoints) || this._fill instanceof RadialGradient && (this._fill._flagSpread || this._fill._flagStops || this._fill._flagRadius || this._fill._flagCenter || this._fill._flagFocal) || this._fill instanceof Texture && (this._fill._flagLoaded && this._fill.loaded || this._fill._flagImage || this._fill._flagVideo || this._fill._flagRepeat || this._fill._flagOffset || this._fill._flagScale) || this._stroke instanceof LinearGradient && (this._stroke._flagSpread || this._stroke._flagStops || this._stroke._flagEndPoints) || this._stroke instanceof RadialGradient && (this._stroke._flagSpread || this._stroke._flagStops || this._stroke._flagRadius || this._stroke._flagCenter || this._stroke._flagFocal) || this._stroke instanceof Texture && (this._stroke._flagLoaded && this._stroke.loaded || this._stroke._flagImage || this._stroke._flagVideo || this._stroke._flagRepeat || this._stroke._flagOffset || this._fill._flagScale) || this._flagStroke || this._flagLinewidth || this._flagOpacity || parent._flagOpacity || this._flagVisible || this._flagCap || this._flagJoin || this._flagMiter || this._flagScale || this.dashes && this.dashes.length > 0 || !this._renderer.texture;\n      if (flagParentMatrix || flagMatrix || parentChanged) {\n        if (!this._renderer.matrix) {\n          this._renderer.matrix = new NumArray(9);\n        }\n        this._matrix.toTransformArray(true, transformation);\n        multiplyMatrix(transformation, parent._renderer.matrix, this._renderer.matrix);\n        if (!(this._renderer.scale instanceof Vector)) {\n          this._renderer.scale = new Vector();\n        }\n        if (this._scale instanceof Vector) {\n          this._renderer.scale.x = this._scale.x * parent._renderer.scale.x;\n          this._renderer.scale.y = this._scale.y * parent._renderer.scale.y;\n        } else {\n          this._renderer.scale.x = this._scale * parent._renderer.scale.x;\n          this._renderer.scale.y = this._scale * parent._renderer.scale.y;\n        }\n        if (parentChanged) {\n          this._renderer.parent = parent;\n        }\n      }\n      if (this._mask) {\n        gl.clear(gl.STENCIL_BUFFER_BIT);\n        gl.enable(gl.STENCIL_TEST);\n        gl.stencilFunc(gl.ALWAYS, 1, 0);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);\n        gl.colorMask(false, false, false, false);\n        webgl[this._mask._renderer.type].render.call(this._mask, gl, programs, this);\n        gl.stencilFunc(gl.EQUAL, 1, 255);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n        gl.colorMask(true, true, true, true);\n      }\n      if (flagTexture) {\n        if (!this._renderer.rect) {\n          this._renderer.rect = {};\n        }\n        this._renderer.opacity = this._opacity * parent._renderer.opacity;\n        webgl.path.getBoundingClientRect(this._renderer.vertices, this._linewidth, this._renderer.rect);\n        webgl.updateTexture.call(webgl, gl, this);\n      } else {\n        if (this._fill && this._fill._update) {\n          this._fill._update();\n        }\n        if (this._stroke && this._stroke._update) {\n          this._stroke._update();\n        }\n      }\n      if (this._clip && !forcedParent || !this._renderer.texture) {\n        return this;\n      }\n      if (programs.current !== program) {\n        gl.useProgram(program);\n        gl.bindBuffer(gl.ARRAY_BUFFER, programs.buffers.position);\n        gl.vertexAttribPointer(program.position, 2, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(program.position);\n        gl.bufferData(gl.ARRAY_BUFFER, quad, gl.STATIC_DRAW);\n        if (!programs.resolution.flagged) {\n          gl.uniform2f(gl.getUniformLocation(program, \"u_resolution\"), programs.resolution.width, programs.resolution.height);\n        }\n        programs.current = program;\n      }\n      if (programs.resolution.flagged) {\n        gl.uniform2f(gl.getUniformLocation(program, \"u_resolution\"), programs.resolution.width, programs.resolution.height);\n      }\n      gl.bindTexture(gl.TEXTURE_2D, this._renderer.texture);\n      const rect = this._renderer.rect;\n      gl.uniformMatrix3fv(program.matrix, false, this._renderer.matrix);\n      gl.uniform4f(program.rect, rect.left, rect.top, rect.right, rect.bottom);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      if (this._mask) {\n        gl.disable(gl.STENCIL_TEST);\n      }\n      return this.flagReset();\n    }\n  },\n  points: {\n    updateCanvas: function(elem) {\n      let isOffset;\n      const canvas2 = this.canvas;\n      const ctx = this.ctx;\n      const stroke = elem._stroke;\n      const linewidth = elem._linewidth;\n      const fill = elem._fill;\n      const opacity = elem._renderer.opacity || elem._opacity;\n      const dashes = elem.dashes;\n      const size = elem._size;\n      let dimension = size;\n      if (!webgl.isHidden.test(stroke)) {\n        dimension += linewidth;\n      }\n      canvas2.width = getPoT(dimension);\n      canvas2.height = canvas2.width;\n      const aspect = dimension / canvas2.width;\n      const cx = canvas2.width / 2;\n      const cy = canvas2.height / 2;\n      ctx.clearRect(0, 0, canvas2.width, canvas2.height);\n      if (fill) {\n        if (typeof fill === \"string\") {\n          ctx.fillStyle = fill;\n        } else {\n          webgl[fill._renderer.type].render.call(fill, ctx, elem);\n          ctx.fillStyle = fill._renderer.effect;\n        }\n      }\n      if (stroke) {\n        if (typeof stroke === \"string\") {\n          ctx.strokeStyle = stroke;\n        } else {\n          webgl[stroke._renderer.type].render.call(stroke, ctx, elem);\n          ctx.strokeStyle = stroke._renderer.effect;\n        }\n        if (linewidth) {\n          ctx.lineWidth = linewidth / aspect;\n        }\n      }\n      if (typeof opacity === \"number\") {\n        ctx.globalAlpha = opacity;\n      }\n      if (dashes && dashes.length > 0) {\n        ctx.lineDashOffset = dashes.offset || 0;\n        ctx.setLineDash(dashes);\n      }\n      ctx.save();\n      ctx.translate(cx, cy);\n      ctx.scale(webgl.precision, webgl.precision);\n      ctx.beginPath();\n      ctx.arc(0, 0, size / aspect * 0.5, 0, TWO_PI);\n      ctx.restore();\n      if (closed) {\n        ctx.closePath();\n      }\n      if (!webgl.isHidden.test(fill)) {\n        isOffset = fill._renderer && fill._renderer.offset;\n        if (isOffset) {\n          ctx.save();\n          ctx.translate(-fill._renderer.offset.x, -fill._renderer.offset.y);\n          ctx.scale(fill._renderer.scale.x, fill._renderer.scale.y);\n        }\n        ctx.fill();\n        if (isOffset) {\n          ctx.restore();\n        }\n      }\n      if (!webgl.isHidden.test(stroke)) {\n        isOffset = stroke._renderer && stroke._renderer.offset;\n        if (isOffset) {\n          ctx.save();\n          ctx.translate(-stroke._renderer.offset.x, -stroke._renderer.offset.y);\n          ctx.scale(stroke._renderer.scale.x, stroke._renderer.scale.y);\n          ctx.lineWidth = linewidth / stroke._renderer.scale.x;\n        }\n        ctx.stroke();\n        if (isOffset) {\n          ctx.restore();\n        }\n      }\n    },\n    render: function(gl, programs, forcedParent) {\n      if (!this._visible || !this._opacity) {\n        return this;\n      }\n      this._update();\n      let size = this._size;\n      const parent = forcedParent || this.parent;\n      const program = programs[this._renderer.type];\n      const sizeAttenuation = this._sizeAttenuation;\n      const stroke = this._stroke;\n      const linewidth = this._linewidth;\n      const flagParentMatrix = parent._matrix.manual || parent._flagMatrix;\n      const flagMatrix = this._matrix.manual || this._flagMatrix;\n      const parentChanged = this._renderer.parent !== parent;\n      const commands = this._renderer.vertices;\n      const length = this._renderer.collection.length;\n      const flagVertices = this._flagVertices;\n      const flagTexture = this._flagFill || this._fill instanceof LinearGradient && (this._fill._flagSpread || this._fill._flagStops || this._fill._flagEndPoints) || this._fill instanceof RadialGradient && (this._fill._flagSpread || this._fill._flagStops || this._fill._flagRadius || this._fill._flagCenter || this._fill._flagFocal) || this._fill instanceof Texture && (this._fill._flagLoaded && this._fill.loaded || this._fill._flagImage || this._fill._flagVideo || this._fill._flagRepeat || this._fill._flagOffset || this._fill._flagScale) || this._stroke instanceof LinearGradient && (this._stroke._flagSpread || this._stroke._flagStops || this._stroke._flagEndPoints) || this._stroke instanceof RadialGradient && (this._stroke._flagSpread || this._stroke._flagStops || this._stroke._flagRadius || this._stroke._flagCenter || this._stroke._flagFocal) || this._stroke instanceof Texture && (this._stroke._flagLoaded && this._stroke.loaded || this._stroke._flagImage || this._stroke._flagVideo || this._stroke._flagRepeat || this._stroke._flagOffset || this._fill._flagScale) || this._flagStroke || this._flagLinewidth || this._flagOpacity || parent._flagOpacity || this._flagVisible || this._flagScale || this.dashes && this.dashes.length > 0 || !this._renderer.texture;\n      if (flagParentMatrix || flagMatrix || parentChanged) {\n        if (!this._renderer.matrix) {\n          this._renderer.matrix = new NumArray(9);\n        }\n        this._matrix.toTransformArray(true, transformation);\n        multiplyMatrix(transformation, parent._renderer.matrix, this._renderer.matrix);\n        if (!(this._renderer.scale instanceof Vector)) {\n          this._renderer.scale = new Vector();\n        }\n        if (this._scale instanceof Vector) {\n          this._renderer.scale.x = this._scale.x * parent._renderer.scale.x;\n          this._renderer.scale.y = this._scale.y * parent._renderer.scale.y;\n        } else {\n          this._renderer.scale.x = this._scale * parent._renderer.scale.x;\n          this._renderer.scale.y = this._scale * parent._renderer.scale.y;\n        }\n        if (parentChanged) {\n          this._renderer.parent = parent;\n        }\n      }\n      if (flagVertices) {\n        const positionBuffer = this._renderer.positionBuffer;\n        if (positionBuffer) {\n          gl.deleteBuffer(positionBuffer);\n        }\n        this._renderer.positionBuffer = gl.createBuffer();\n        gl.bindBuffer(gl.ARRAY_BUFFER, this._renderer.positionBuffer);\n        gl.vertexAttribPointer(program.position, 2, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(program.position);\n        gl.bufferData(gl.ARRAY_BUFFER, commands, gl.STATIC_DRAW);\n      }\n      if (flagTexture) {\n        this._renderer.opacity = this._opacity * parent._renderer.opacity;\n        webgl.updateTexture.call(webgl, gl, this);\n      } else {\n        if (this._fill && this._fill._update) {\n          this._fill._update();\n        }\n        if (this._stroke && this._stroke._update) {\n          this._stroke._update();\n        }\n      }\n      if (this._clip && !forcedParent || !this._renderer.texture) {\n        return this;\n      }\n      if (!webgl.isHidden.test(stroke)) {\n        size += linewidth;\n      }\n      size /= webgl.precision;\n      if (sizeAttenuation) {\n        size *= Math.max(this._renderer.scale.x, this._renderer.scale.y);\n      }\n      if (programs.current !== program) {\n        gl.useProgram(program);\n        if (!programs.resolution.flagged) {\n          gl.uniform2f(gl.getUniformLocation(program, \"u_resolution\"), programs.resolution.width, programs.resolution.height);\n        }\n        programs.current = program;\n      }\n      if (programs.resolution.flagged) {\n        gl.uniform2f(gl.getUniformLocation(program, \"u_resolution\"), programs.resolution.width, programs.resolution.height);\n      }\n      gl.bindTexture(gl.TEXTURE_2D, this._renderer.texture);\n      gl.uniformMatrix3fv(program.matrix, false, this._renderer.matrix);\n      gl.uniform1f(program.size, size * programs.resolution.ratio);\n      gl.drawArrays(gl.POINTS, 0, length);\n      return this.flagReset();\n    }\n  },\n  text: {\n    updateCanvas: function(elem) {\n      const canvas2 = this.canvas;\n      const ctx = this.ctx;\n      const scale = elem._renderer.scale;\n      const stroke = elem._stroke;\n      const linewidth = elem._linewidth * scale;\n      const fill = elem._fill;\n      const opacity = elem._renderer.opacity || elem._opacity;\n      const dashes = elem.dashes;\n      const decoration = elem._decoration;\n      canvas2.width = Math.max(Math.ceil(elem._renderer.rect.width * scale.x), 1);\n      canvas2.height = Math.max(Math.ceil(elem._renderer.rect.height * scale.y), 1);\n      const centroid = elem._renderer.rect.centroid;\n      const cx = centroid.x;\n      const cy = centroid.y;\n      let a, b, c, d, e, sx, sy, x1, y1, x2, y2;\n      const isOffset = fill._renderer && fill._renderer.offset && stroke._renderer && stroke._renderer.offset;\n      ctx.clearRect(0, 0, canvas2.width, canvas2.height);\n      if (!isOffset) {\n        ctx.font = [elem._style, elem._weight, elem._size + \"px/\" + elem._leading + \"px\", elem._family].join(\" \");\n      }\n      ctx.textAlign = \"center\";\n      ctx.textBaseline = \"middle\";\n      if (fill) {\n        if (typeof fill === \"string\") {\n          ctx.fillStyle = fill;\n        } else {\n          webgl[fill._renderer.type].render.call(fill, ctx, elem);\n          ctx.fillStyle = fill._renderer.effect;\n        }\n      }\n      if (stroke) {\n        if (typeof stroke === \"string\") {\n          ctx.strokeStyle = stroke;\n        } else {\n          webgl[stroke._renderer.type].render.call(stroke, ctx, elem);\n          ctx.strokeStyle = stroke._renderer.effect;\n        }\n        if (linewidth) {\n          ctx.lineWidth = linewidth;\n        }\n      }\n      if (typeof opacity === \"number\") {\n        ctx.globalAlpha = opacity;\n      }\n      if (dashes && dashes.length > 0) {\n        ctx.lineDashOffset = dashes.offset || 0;\n        ctx.setLineDash(dashes);\n      }\n      ctx.save();\n      ctx.scale(scale.x, scale.y);\n      ctx.translate(cx, cy);\n      if (!webgl.isHidden.test(fill)) {\n        if (fill._renderer && fill._renderer.offset) {\n          sx = fill._renderer.scale.x;\n          sy = fill._renderer.scale.y;\n          ctx.save();\n          ctx.translate(-fill._renderer.offset.x, -fill._renderer.offset.y);\n          ctx.scale(sx, sy);\n          a = elem._size / fill._renderer.scale.y;\n          b = elem._leading / fill._renderer.scale.y;\n          ctx.font = [\n            elem._style,\n            elem._weight,\n            a + \"px/\",\n            b + \"px\",\n            elem._family\n          ].join(\" \");\n          c = fill._renderer.offset.x / fill._renderer.scale.x;\n          d = fill._renderer.offset.y / fill._renderer.scale.y;\n          ctx.fillText(elem.value, c, d);\n          ctx.restore();\n        } else {\n          ctx.fillText(elem.value, 0, 0);\n        }\n      }\n      if (!webgl.isHidden.test(stroke)) {\n        if (stroke._renderer && stroke._renderer.offset) {\n          sx = stroke._renderer.scale.x;\n          sy = stroke._renderer.scale.y;\n          ctx.save();\n          ctx.translate(-stroke._renderer.offset.x, -stroke._renderer.offset.y);\n          ctx.scale(sx, sy);\n          a = elem._size / stroke._renderer.scale.y;\n          b = elem._leading / stroke._renderer.scale.y;\n          ctx.font = [\n            elem._style,\n            elem._weight,\n            a + \"px/\",\n            b + \"px\",\n            elem._family\n          ].join(\" \");\n          c = stroke._renderer.offset.x / stroke._renderer.scale.x;\n          d = stroke._renderer.offset.y / stroke._renderer.scale.y;\n          e = linewidth / stroke._renderer.scale.x;\n          ctx.lineWidth = e;\n          ctx.strokeText(elem.value, c, d);\n          ctx.restore();\n        } else {\n          ctx.strokeText(elem.value, 0, 0);\n        }\n      }\n      if (/(underline|strikethrough)/i.test(decoration)) {\n        const metrics = ctx.measureText(elem.value);\n        switch (decoration) {\n          case \"underline\":\n            y1 = metrics.actualBoundingBoxAscent;\n            y2 = metrics.actualBoundingBoxAscent;\n            break;\n          case \"strikethrough\":\n            y1 = 0;\n            y2 = 0;\n            break;\n        }\n        x1 = -metrics.width / 2;\n        x2 = metrics.width / 2;\n        ctx.lineWidth = Math.max(Math.floor(elem._size / 15), 1);\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n      }\n      ctx.restore();\n    },\n    getBoundingClientRect: function(elem, rect) {\n      const ctx = webgl.ctx;\n      ctx.font = [elem._style, elem._weight, elem._size + \"px/\" + elem._leading + \"px\", elem._family].join(\" \");\n      ctx.textAlign = \"center\";\n      ctx.textBaseline = elem._baseline;\n      let width = ctx.measureText(elem._value).width * 1.25;\n      let height = Math.max(elem._size, elem._leading) * 1.25;\n      if (this._linewidth && !webgl.isHidden.test(this._stroke)) {\n        width += this._linewidth * 2;\n        height += this._linewidth * 2;\n      }\n      const w = width / 2;\n      const h = height / 2;\n      switch (webgl.alignments[elem._alignment] || elem._alignment) {\n        case webgl.alignments.left:\n          rect.left = 0;\n          rect.right = width;\n          break;\n        case webgl.alignments.right:\n          rect.left = -width;\n          rect.right = 0;\n          break;\n        default:\n          rect.left = -w;\n          rect.right = w;\n      }\n      switch (elem._baseline) {\n        case \"bottom\":\n          rect.top = -height;\n          rect.bottom = 0;\n          break;\n        case \"top\":\n          rect.top = 0;\n          rect.bottom = height;\n          break;\n        default:\n          rect.top = -h;\n          rect.bottom = h;\n      }\n      rect.width = width;\n      rect.height = height;\n      if (!rect.centroid) {\n        rect.centroid = {};\n      }\n      rect.centroid.x = w;\n      rect.centroid.y = h;\n    },\n    render: function(gl, programs, forcedParent) {\n      if (!this._visible || !this._opacity) {\n        return this;\n      }\n      this._update();\n      const parent = forcedParent || this.parent;\n      const program = programs[this._renderer.type];\n      const flagParentMatrix = parent._matrix.manual || parent._flagMatrix;\n      const flagMatrix = this._matrix.manual || this._flagMatrix;\n      const parentChanged = this._renderer.parent !== parent;\n      const flagTexture = this._flagVertices || this._flagFill || this._fill instanceof LinearGradient && (this._fill._flagSpread || this._fill._flagStops || this._fill._flagEndPoints) || this._fill instanceof RadialGradient && (this._fill._flagSpread || this._fill._flagStops || this._fill._flagRadius || this._fill._flagCenter || this._fill._flagFocal) || this._fill instanceof Texture && (this._fill._flagLoaded && this._fill.loaded || this._fill._flagImage || this._fill._flagVideo || this._fill._flagRepeat || this._fill._flagOffset || this._fill._flagScale) || this._stroke instanceof LinearGradient && (this._stroke._flagSpread || this._stroke._flagStops || this._stroke._flagEndPoints) || this._stroke instanceof RadialGradient && (this._stroke._flagSpread || this._stroke._flagStops || this._stroke._flagRadius || this._stroke._flagCenter || this._stroke._flagFocal) || this._stroke instanceof Texture && (this._stroke._flagLoaded && this._stroke.loaded || this._stroke._flagImage || this._stroke._flagVideo || this._stroke._flagRepeat || this._stroke._flagOffset || this._fill._flagScale) || this._flagStroke || this._flagLinewidth || this._flagOpacity || parent._flagOpacity || this._flagVisible || this._flagScale || this._flagValue || this._flagFamily || this._flagSize || this._flagLeading || this._flagAlignment || this._flagBaseline || this._flagStyle || this._flagWeight || this._flagDecoration || this.dashes && this.dashes.length > 0 || !this._renderer.texture;\n      if (flagParentMatrix || flagMatrix || parentChanged) {\n        if (!this._renderer.matrix) {\n          this._renderer.matrix = new NumArray(9);\n        }\n        this._matrix.toTransformArray(true, transformation);\n        multiplyMatrix(transformation, parent._renderer.matrix, this._renderer.matrix);\n        if (!(this._renderer.scale instanceof Vector)) {\n          this._renderer.scale = new Vector();\n        }\n        if (this._scale instanceof Vector) {\n          this._renderer.scale.x = this._scale.x * parent._renderer.scale.x;\n          this._renderer.scale.y = this._scale.y * parent._renderer.scale.y;\n        } else {\n          this._renderer.scale.x = this._scale * parent._renderer.scale.x;\n          this._renderer.scale.y = this._scale * parent._renderer.scale.y;\n        }\n        if (parentChanged) {\n          this._renderer.parent = parent;\n        }\n      }\n      if (this._mask) {\n        gl.clear(gl.STENCIL_BUFFER_BIT);\n        gl.enable(gl.STENCIL_TEST);\n        gl.stencilFunc(gl.ALWAYS, 1, 0);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);\n        gl.colorMask(false, false, false, false);\n        webgl[this._mask._renderer.type].render.call(this._mask, gl, programs, this);\n        gl.stencilFunc(gl.EQUAL, 1, 255);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n        gl.colorMask(true, true, true, true);\n      }\n      if (flagTexture) {\n        if (!this._renderer.rect) {\n          this._renderer.rect = {};\n        }\n        this._renderer.opacity = this._opacity * parent._renderer.opacity;\n        webgl.text.getBoundingClientRect(this, this._renderer.rect);\n        webgl.updateTexture.call(webgl, gl, this);\n      } else {\n        if (this._fill && this._fill._update) {\n          this._fill._update();\n        }\n        if (this._stroke && this._stroke._update) {\n          this._stroke._update();\n        }\n      }\n      if (this._clip && !forcedParent || !this._renderer.texture) {\n        return this;\n      }\n      if (programs.current !== program) {\n        gl.useProgram(program);\n        gl.bindBuffer(gl.ARRAY_BUFFER, programs.buffers.position);\n        gl.vertexAttribPointer(program.position, 2, gl.FLOAT, false, 0, 0);\n        gl.enableVertexAttribArray(program.position);\n        gl.bufferData(gl.ARRAY_BUFFER, quad, gl.STATIC_DRAW);\n        if (!programs.resolution.flagged) {\n          gl.uniform2f(gl.getUniformLocation(program, \"u_resolution\"), programs.resolution.width, programs.resolution.height);\n        }\n        programs.current = program;\n      }\n      if (programs.resolution.flagged) {\n        gl.uniform2f(gl.getUniformLocation(program, \"u_resolution\"), programs.resolution.width, programs.resolution.height);\n      }\n      gl.bindTexture(gl.TEXTURE_2D, this._renderer.texture);\n      const rect = this._renderer.rect;\n      gl.uniformMatrix3fv(program.matrix, false, this._renderer.matrix);\n      gl.uniform4f(program.rect, rect.left, rect.top, rect.right, rect.bottom);\n      gl.drawArrays(gl.TRIANGLES, 0, 6);\n      if (this._mask) {\n        gl.disable(gl.STENCIL_TEST);\n      }\n      return this.flagReset();\n    }\n  },\n  \"linear-gradient\": {\n    render: function(ctx, parent) {\n      if (!ctx.canvas.getContext(\"2d\") || !parent) {\n        return;\n      }\n      this._update();\n      if (!this._renderer.effect || this._flagEndPoints || this._flagStops || this._flagUnits) {\n        let rect;\n        let lx = this.left._x;\n        let ly = this.left._y;\n        let rx = this.right._x;\n        let ry = this.right._y;\n        if (/objectBoundingBox/i.test(this._units)) {\n          rect = parent.getBoundingClientRect(true);\n          lx = (lx - 0.5) * rect.width;\n          ly = (ly - 0.5) * rect.height;\n          rx = (rx - 0.5) * rect.width;\n          ry = (ry - 0.5) * rect.height;\n        }\n        this._renderer.effect = ctx.createLinearGradient(lx, ly, rx, ry);\n        for (let i = 0; i < this.stops.length; i++) {\n          const stop = this.stops[i];\n          this._renderer.effect.addColorStop(stop._offset, stop._color);\n        }\n      }\n      return this.flagReset();\n    }\n  },\n  \"radial-gradient\": {\n    render: function(ctx, parent) {\n      if (!ctx.canvas.getContext(\"2d\") || !parent) {\n        return;\n      }\n      this._update();\n      if (!this._renderer.effect || this._flagCenter || this._flagFocal || this._flagRadius || this._flagStops || this._flagUnits) {\n        let rect;\n        let cx = this.center._x;\n        let cy = this.center._y;\n        let fx = this.focal._x;\n        let fy = this.focal._y;\n        let radius = this._radius;\n        if (/objectBoundingBox/i.test(this._units)) {\n          rect = parent.getBoundingClientRect(true);\n          cx = cx * rect.width * 0.5;\n          cy = cy * rect.height * 0.5;\n          fx = fx * rect.width * 0.5;\n          fy = fy * rect.height * 0.5;\n          radius *= Math.min(rect.width, rect.height) * 0.5;\n        }\n        this._renderer.effect = ctx.createRadialGradient(cx, cy, 0, fx, fy, radius);\n        for (let i = 0; i < this.stops.length; i++) {\n          const stop = this.stops[i];\n          this._renderer.effect.addColorStop(stop._offset, stop._color);\n        }\n      }\n      return this.flagReset();\n    }\n  },\n  texture: {\n    render: function(ctx, elem) {\n      if (!ctx.canvas.getContext(\"2d\")) {\n        return;\n      }\n      this._update();\n      const image = this.image;\n      if ((this._flagLoaded || this._flagImage || this._flagVideo || this._flagRepeat) && this.loaded) {\n        this._renderer.effect = ctx.createPattern(image, this._repeat);\n      } else if (!this._renderer.effect) {\n        return this.flagReset();\n      }\n      if (this._flagOffset || this._flagLoaded || this._flagScale) {\n        if (!(this._renderer.offset instanceof Vector)) {\n          this._renderer.offset = new Vector();\n        }\n        this._renderer.offset.x = -this._offset.x;\n        this._renderer.offset.y = -this._offset.y;\n        if (image) {\n          this._renderer.offset.x += image.width / 2;\n          this._renderer.offset.y += image.height / 2;\n          if (this._scale instanceof Vector) {\n            this._renderer.offset.x *= this._scale.x;\n            this._renderer.offset.y *= this._scale.y;\n          } else {\n            this._renderer.offset.x *= this._scale;\n            this._renderer.offset.y *= this._scale;\n          }\n        }\n      }\n      if (this._flagScale || this._flagLoaded) {\n        if (!(this._renderer.scale instanceof Vector)) {\n          this._renderer.scale = new Vector();\n        }\n        if (this._scale instanceof Vector) {\n          this._renderer.scale.copy(this._scale);\n        } else {\n          this._renderer.scale.set(this._scale, this._scale);\n        }\n      }\n      return this.flagReset();\n    }\n  },\n  updateTexture: function(gl, elem) {\n    this[elem._renderer.type].updateCanvas.call(webgl, elem);\n    if (this.canvas.width <= 0 || this.canvas.height <= 0) {\n      if (elem._renderer.texture) {\n        gl.deleteTexture(elem._renderer.texture);\n      }\n      delete elem._renderer.texture;\n      return;\n    }\n    if (!elem._renderer.texture) {\n      elem._renderer.texture = gl.createTexture();\n    }\n    gl.bindTexture(gl.TEXTURE_2D, elem._renderer.texture);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, this.canvas);\n  },\n  program: {\n    create: function(gl, shaders2) {\n      let program, linked, error;\n      program = gl.createProgram();\n      _.each(shaders2, function(s) {\n        gl.attachShader(program, s);\n      });\n      gl.linkProgram(program);\n      linked = gl.getProgramParameter(program, gl.LINK_STATUS);\n      if (!linked) {\n        error = gl.getProgramInfoLog(program);\n        gl.deleteProgram(program);\n        throw new TwoError(\"unable to link program: \" + error);\n      }\n      return program;\n    }\n  },\n  TextureRegistry: new Registry()\n};\nwebgl.ctx = webgl.canvas.getContext(\"2d\");\nvar Renderer3 = class extends Events {\n  constructor(params) {\n    super();\n    let gl, program, vs, fs;\n    this.domElement = params.domElement || document.createElement(\"canvas\");\n    if (typeof params.offscreenElement !== \"undefined\") {\n      webgl.canvas = params.offscreenElement;\n      webgl.ctx = webgl.canvas.getContext(\"2d\");\n    }\n    this.scene = new Group();\n    this.scene.parent = this;\n    this._renderer = {\n      type: \"renderer\",\n      matrix: new NumArray(identity),\n      scale: 1,\n      opacity: 1\n    };\n    this._flagMatrix = true;\n    params = _.defaults(params || {}, {\n      antialias: false,\n      alpha: true,\n      premultipliedAlpha: true,\n      stencil: true,\n      preserveDrawingBuffer: true,\n      overdraw: false\n    });\n    this.overdraw = params.overdraw;\n    gl = this.ctx = this.domElement.getContext(\"webgl\", params) || this.domElement.getContext(\"experimental-webgl\", params);\n    if (!this.ctx) {\n      throw new TwoError(\"unable to create a webgl context. Try using another renderer.\");\n    }\n    vs = shaders.create(gl, shaders.path.vertex, shaders.types.vertex);\n    fs = shaders.create(gl, shaders.path.fragment, shaders.types.fragment);\n    this.programs = {\n      current: null,\n      buffers: {\n        position: gl.createBuffer()\n      },\n      resolution: {\n        width: 0,\n        height: 0,\n        ratio: 1,\n        flagged: false\n      }\n    };\n    program = this.programs.path = webgl.program.create(gl, [vs, fs]);\n    this.programs.text = this.programs.path;\n    program.position = gl.getAttribLocation(program, \"a_position\");\n    program.matrix = gl.getUniformLocation(program, \"u_matrix\");\n    program.rect = gl.getUniformLocation(program, \"u_rect\");\n    const positionBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);\n    gl.vertexAttribPointer(program.position, 2, gl.FLOAT, false, 0, 0);\n    gl.enableVertexAttribArray(program.position);\n    gl.bufferData(gl.ARRAY_BUFFER, quad, gl.STATIC_DRAW);\n    vs = shaders.create(gl, shaders.points.vertex, shaders.types.vertex);\n    fs = shaders.create(gl, shaders.points.fragment, shaders.types.fragment);\n    program = this.programs.points = webgl.program.create(gl, [vs, fs]);\n    program.position = gl.getAttribLocation(program, \"a_position\");\n    program.matrix = gl.getUniformLocation(program, \"u_matrix\");\n    program.size = gl.getUniformLocation(program, \"u_size\");\n    gl.enable(gl.BLEND);\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true);\n    gl.blendEquation(gl.FUNC_ADD);\n    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n  }\n  setSize(width, height, ratio) {\n    let w, h;\n    const ctx = this.ctx;\n    this.width = width;\n    this.height = height;\n    this.ratio = typeof ratio === \"undefined\" ? getRatio(ctx) : ratio;\n    this.domElement.width = width * this.ratio;\n    this.domElement.height = height * this.ratio;\n    if (_.isObject(this.domElement.style)) {\n      _.extend(this.domElement.style, {\n        width: width + \"px\",\n        height: height + \"px\"\n      });\n    }\n    this._renderer.matrix[0] = this._renderer.matrix[4] = this._renderer.scale = this.ratio;\n    this._flagMatrix = true;\n    w = width * this.ratio;\n    h = height * this.ratio;\n    ctx.viewport(0, 0, w, h);\n    this.programs.resolution.width = w;\n    this.programs.resolution.height = h;\n    this.programs.resolution.ratio = this.ratio;\n    this.programs.resolution.flagged = true;\n    return this.trigger(Events.Types.resize, width, height, ratio);\n  }\n  render() {\n    const gl = this.ctx;\n    if (!this.overdraw) {\n      gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n    webgl.group.render.call(this.scene, gl, this.programs);\n    this._flagMatrix = false;\n    this.programs.resolution.flagged = true;\n    return this;\n  }\n};\n__publicField(Renderer3, \"Utils\", webgl);\n\n// src/two.js\nvar Utils = _.extend({\n  Error: TwoError,\n  getRatio,\n  read,\n  xhr\n}, _, CanvasShim, curves_exports, math_exports);\nvar _Two = class {\n  constructor(options) {\n    __publicField(this, \"_events\", new Events());\n    __publicField(this, \"type\", \"\");\n    __publicField(this, \"renderer\", null);\n    __publicField(this, \"scene\", null);\n    __publicField(this, \"width\", 0);\n    __publicField(this, \"height\", 0);\n    __publicField(this, \"frameCount\", 0);\n    __publicField(this, \"timeDelta\", 0);\n    __publicField(this, \"playing\", false);\n    const params = _.defaults(options || {}, {\n      fullscreen: false,\n      fitted: false,\n      width: 640,\n      height: 480,\n      type: _Two.Types.svg,\n      autostart: false\n    });\n    _.each(params, function(v, k) {\n      if (/fullscreen/i.test(k) || /autostart/i.test(k)) {\n        return;\n      }\n      this[k] = v;\n    }, this);\n    if (_.isElement(params.domElement)) {\n      const tagName = params.domElement.tagName.toLowerCase();\n      if (!/^(CanvasRenderer-canvas|WebGLRenderer-canvas|SVGRenderer-svg)$/.test(this.type + \"-\" + tagName)) {\n        this.type = _Two.Types[tagName];\n      }\n    }\n    this.renderer = new _Two[this.type](this);\n    this.setPlaying(params.autostart);\n    this.frameCount = 0;\n    if (params.fullscreen) {\n      this.fit = fitToWindow.bind(this);\n      this.fit.domElement = window;\n      this.fit.attached = true;\n      _.extend(document.body.style, {\n        overflow: \"hidden\",\n        margin: 0,\n        padding: 0,\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        position: \"fixed\"\n      });\n      _.extend(this.renderer.domElement.style, {\n        display: \"block\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        position: \"fixed\"\n      });\n      dom.bind(this.fit.domElement, \"resize\", this.fit);\n      this.fit();\n    } else if (params.fitted) {\n      this.fit = fitToParent.bind(this);\n      _.extend(this.renderer.domElement.style, {\n        display: \"block\"\n      });\n    } else if (!_.isElement(params.domElement)) {\n      this.renderer.setSize(params.width, params.height, this.ratio);\n      this.width = params.width;\n      this.height = params.height;\n    }\n    this.renderer.bind(Events.Types.resize, updateDimensions.bind(this));\n    this.scene = this.renderer.scene;\n    _Two.Instances.push(this);\n    if (params.autostart) {\n      raf.init();\n    }\n  }\n  get _bound() {\n    return this._events._bound;\n  }\n  set _bound(v) {\n    this._events._bound = v;\n  }\n  addEventListener() {\n    return this._events.addEventListener.apply(this, arguments);\n  }\n  on() {\n    return this._events.addEventListener.apply(this, arguments);\n  }\n  bind() {\n    return this._events.addEventListener.apply(this, arguments);\n  }\n  removeEventListener() {\n    return this._events.removeEventListener.apply(this, arguments);\n  }\n  off() {\n    return this._events.removeEventListener.apply(this, arguments);\n  }\n  unbind() {\n    return this._events.removeEventListener.apply(this, arguments);\n  }\n  dispatchEvent() {\n    return this._events.dispatchEvent.apply(this, arguments);\n  }\n  trigger() {\n    return this._events.dispatchEvent.apply(this, arguments);\n  }\n  listen() {\n    return this._events.listen.apply(this, arguments);\n  }\n  ignore() {\n    return this._events.ignore.apply(this, arguments);\n  }\n  appendTo(elem) {\n    elem.appendChild(this.renderer.domElement);\n    if (this.fit) {\n      if (this.fit.domElement !== window) {\n        this.fit.domElement = elem;\n        this.fit.attached = false;\n      }\n      this.update();\n    }\n    return this;\n  }\n  play() {\n    this.playing = true;\n    raf.init();\n    return this.trigger(Events.Types.play);\n  }\n  pause() {\n    this.playing = false;\n    return this.trigger(Events.Types.pause);\n  }\n  setPlaying(p) {\n    this.playing = p;\n  }\n  release(obj) {\n    let i, v, child;\n    if (!_.isObject(obj)) {\n      return this.release(this.scene);\n    }\n    if (typeof obj.unbind === \"function\") {\n      obj.unbind();\n    }\n    if (obj.vertices) {\n      if (typeof obj.vertices.unbind === \"function\") {\n        obj.vertices.unbind();\n      }\n      for (i = 0; i < obj.vertices.length; i++) {\n        v = obj.vertices[i];\n        if (typeof v.unbind === \"function\") {\n          v.unbind();\n        }\n        if (v.controls) {\n          if (v.controls.left && typeof v.controls.left.unbind === \"function\") {\n            v.controls.left.unbind();\n          }\n          if (v.controls.right && typeof v.controls.right.unbind === \"function\") {\n            v.controls.right.unbind();\n          }\n        }\n      }\n    }\n    if (obj.children) {\n      for (i = 0; i < obj.children.length; i++) {\n        child = obj.children[i];\n        this.release(child);\n      }\n      if (typeof obj.children.unbind === \"function\") {\n        obj.children.unbind();\n      }\n    }\n    return obj;\n  }\n  update() {\n    const animated = !!this._lastFrame;\n    const now = _.performance.now();\n    if (animated) {\n      this.timeDelta = parseFloat((now - this._lastFrame).toFixed(3));\n    }\n    this._lastFrame = now;\n    if (this.fit && this.fit.domElement && !this.fit.attached) {\n      dom.bind(this.fit.domElement, \"resize\", this.fit);\n      this.fit.attached = true;\n      this.fit();\n    }\n    const width = this.width;\n    const height = this.height;\n    const renderer = this.renderer;\n    if (width !== renderer.width || height !== renderer.height) {\n      renderer.setSize(width, height, this.ratio);\n    }\n    this.trigger(Events.Types.update, this.frameCount, this.timeDelta);\n    return this.render();\n  }\n  render() {\n    this.renderer.render();\n    return this.trigger(Events.Types.render, this.frameCount++);\n  }\n  add(objects) {\n    if (!(objects instanceof Array)) {\n      objects = Array.prototype.slice.call(arguments);\n    }\n    this.scene.add(objects);\n    return this;\n  }\n  remove(objects) {\n    if (!(objects instanceof Array)) {\n      objects = Array.prototype.slice.call(arguments);\n    }\n    this.scene.remove(objects);\n    return this;\n  }\n  clear() {\n    this.scene.remove(this.scene.children);\n    return this;\n  }\n  makeLine(x1, y1, x2, y2) {\n    const line = new Line(x1, y1, x2, y2);\n    this.scene.add(line);\n    return line;\n  }\n  makeArrow(x1, y1, x2, y2, size) {\n    const headlen = typeof size === \"number\" ? size : 10;\n    const angle = Math.atan2(y2 - y1, x2 - x1);\n    const vertices = [\n      new Anchor(x1, y1, void 0, void 0, void 0, void 0, Commands.move),\n      new Anchor(x2, y2, void 0, void 0, void 0, void 0, Commands.line),\n      new Anchor(x2 - headlen * Math.cos(angle - Math.PI / 4), y2 - headlen * Math.sin(angle - Math.PI / 4), void 0, void 0, void 0, void 0, Commands.line),\n      new Anchor(x2, y2, void 0, void 0, void 0, void 0, Commands.move),\n      new Anchor(x2 - headlen * Math.cos(angle + Math.PI / 4), y2 - headlen * Math.sin(angle + Math.PI / 4), void 0, void 0, void 0, void 0, Commands.line)\n    ];\n    const path = new Path(vertices, false, false, true);\n    path.noFill();\n    path.cap = \"round\";\n    path.join = \"round\";\n    this.scene.add(path);\n    return path;\n  }\n  makeRectangle(x, y, width, height) {\n    const rect = new Rectangle(x, y, width, height);\n    this.scene.add(rect);\n    return rect;\n  }\n  makeRoundedRectangle(x, y, width, height, sides) {\n    const rect = new RoundedRectangle(x, y, width, height, sides);\n    this.scene.add(rect);\n    return rect;\n  }\n  makeCircle(x, y, radius, resolution) {\n    const circle = new Circle(x, y, radius, resolution);\n    this.scene.add(circle);\n    return circle;\n  }\n  makeEllipse(x, y, rx, ry, resolution) {\n    const ellipse = new Ellipse(x, y, rx, ry, resolution);\n    this.scene.add(ellipse);\n    return ellipse;\n  }\n  makeStar(x, y, outerRadius, innerRadius, sides) {\n    const star = new Star(x, y, outerRadius, innerRadius, sides);\n    this.scene.add(star);\n    return star;\n  }\n  makeCurve(points) {\n    const l = arguments.length;\n    if (!Array.isArray(points)) {\n      points = [];\n      for (let i = 0; i < l; i += 2) {\n        const x = arguments[i];\n        if (typeof x !== \"number\") {\n          break;\n        }\n        const y = arguments[i + 1];\n        points.push(new Anchor(x, y));\n      }\n    }\n    const last = arguments[l - 1];\n    const curve = new Path(points, !(typeof last === \"boolean\" ? last : void 0), true);\n    const rect = curve.getBoundingClientRect();\n    curve.center().translation.set(rect.left + rect.width / 2, rect.top + rect.height / 2);\n    this.scene.add(curve);\n    return curve;\n  }\n  makePolygon(x, y, radius, sides) {\n    const poly = new Polygon(x, y, radius, sides);\n    this.scene.add(poly);\n    return poly;\n  }\n  makeArcSegment(x, y, innerRadius, outerRadius, startAngle, endAngle, resolution) {\n    const arcSegment = new ArcSegment(x, y, innerRadius, outerRadius, startAngle, endAngle, resolution);\n    this.scene.add(arcSegment);\n    return arcSegment;\n  }\n  makePoints(p) {\n    const l = arguments.length;\n    let vertices = p;\n    if (!Array.isArray(p)) {\n      vertices = [];\n      for (let i = 0; i < l; i += 2) {\n        const x = arguments[i];\n        if (typeof x !== \"number\") {\n          break;\n        }\n        const y = arguments[i + 1];\n        vertices.push(new Vector(x, y));\n      }\n    }\n    const points = new Points(vertices);\n    this.scene.add(points);\n    return points;\n  }\n  makePath(p) {\n    const l = arguments.length;\n    let points = p;\n    if (!Array.isArray(p)) {\n      points = [];\n      for (let i = 0; i < l; i += 2) {\n        const x = arguments[i];\n        if (typeof x !== \"number\") {\n          break;\n        }\n        const y = arguments[i + 1];\n        points.push(new Anchor(x, y));\n      }\n    }\n    const last = arguments[l - 1];\n    const path = new Path(points, !(typeof last === \"boolean\" ? last : void 0));\n    const rect = path.getBoundingClientRect();\n    if (typeof rect.top === \"number\" && typeof rect.left === \"number\" && typeof rect.right === \"number\" && typeof rect.bottom === \"number\") {\n      path.center().translation.set(rect.left + rect.width / 2, rect.top + rect.height / 2);\n    }\n    this.scene.add(path);\n    return path;\n  }\n  makeText(message, x, y, styles) {\n    const text = new Text(message, x, y, styles);\n    this.add(text);\n    return text;\n  }\n  makeLinearGradient(x1, y1, x2, y2) {\n    const stops = Array.prototype.slice.call(arguments, 4);\n    const gradient = new LinearGradient(x1, y1, x2, y2, stops);\n    this.add(gradient);\n    return gradient;\n  }\n  makeRadialGradient(x1, y1, radius) {\n    const stops = Array.prototype.slice.call(arguments, 3);\n    const gradient = new RadialGradient(x1, y1, radius, stops);\n    this.add(gradient);\n    return gradient;\n  }\n  makeSprite(pathOrTexture, x, y, columns, rows, frameRate, autostart) {\n    const sprite = new Sprite(pathOrTexture, x, y, columns, rows, frameRate);\n    if (autostart) {\n      sprite.play();\n    }\n    this.add(sprite);\n    return sprite;\n  }\n  makeImageSequence(pathsOrTextures, x, y, frameRate, autostart) {\n    const imageSequence = new ImageSequence(pathsOrTextures, x, y, frameRate);\n    if (autostart) {\n      imageSequence.play();\n    }\n    this.add(imageSequence);\n    return imageSequence;\n  }\n  makeTexture(pathOrSource, callback) {\n    const texture = new Texture(pathOrSource, callback);\n    return texture;\n  }\n  makeGroup(objects) {\n    if (!(objects instanceof Array)) {\n      objects = Array.prototype.slice.call(arguments);\n    }\n    const group = new Group();\n    this.scene.add(group);\n    group.add(objects);\n    return group;\n  }\n  interpret(svg2, shallow, add) {\n    const tag = svg2.tagName.toLowerCase();\n    add = typeof add !== \"undefined\" ? add : true;\n    if (!(tag in read)) {\n      return null;\n    }\n    const node = read[tag].call(this, svg2);\n    if (add) {\n      this.add(shallow && node instanceof Group ? node.children : node);\n    } else if (node.parent) {\n      node.remove();\n    }\n    return node;\n  }\n  load(pathOrSVGContent, callback) {\n    const group = new Group();\n    let elem, i, child;\n    const attach = function(data) {\n      dom.temp.innerHTML = data;\n      for (i = 0; i < dom.temp.children.length; i++) {\n        elem = dom.temp.children[i];\n        child = this.interpret(elem, false, false);\n        if (child !== null) {\n          group.add(child);\n        }\n      }\n      if (typeof callback === \"function\") {\n        const svg2 = dom.temp.children.length <= 1 ? dom.temp.children[0] : dom.temp.children;\n        callback(group, svg2);\n      }\n    }.bind(this);\n    if (/\\.svg$/i.test(pathOrSVGContent)) {\n      xhr(pathOrSVGContent, attach);\n      return group;\n    }\n    attach(pathOrSVGContent);\n    return group;\n  }\n};\nvar Two = _Two;\n__publicField(Two, \"nextFrameID\", Constants.nextFrameID);\n__publicField(Two, \"Types\", Constants.Types);\n__publicField(Two, \"Version\", Constants.Version);\n__publicField(Two, \"PublishDate\", Constants.PublishDate);\n__publicField(Two, \"Identifier\", Constants.Identifier);\n__publicField(Two, \"Resolution\", Constants.Resolution);\n__publicField(Two, \"AutoCalculateImportedMatrices\", Constants.AutoCalculateImportedMatrices);\n__publicField(Two, \"Instances\", Constants.Instances);\n__publicField(Two, \"uniqueId\", Constants.uniqueId);\n__publicField(Two, \"Anchor\", Anchor);\n__publicField(Two, \"Collection\", Collection);\n__publicField(Two, \"Events\", Events);\n__publicField(Two, \"Group\", Group);\n__publicField(Two, \"Matrix\", Matrix2);\n__publicField(Two, \"Path\", Path);\n__publicField(Two, \"Registry\", Registry);\n__publicField(Two, \"Shape\", Shape);\n__publicField(Two, \"Text\", Text);\n__publicField(Two, \"Vector\", Vector);\n__publicField(Two, \"Gradient\", Gradient);\n__publicField(Two, \"ImageSequence\", ImageSequence);\n__publicField(Two, \"LinearGradient\", LinearGradient);\n__publicField(Two, \"RadialGradient\", RadialGradient);\n__publicField(Two, \"Sprite\", Sprite);\n__publicField(Two, \"Stop\", Stop);\n__publicField(Two, \"Texture\", Texture);\n__publicField(Two, \"ArcSegment\", ArcSegment);\n__publicField(Two, \"Circle\", Circle);\n__publicField(Two, \"Ellipse\", Ellipse);\n__publicField(Two, \"Line\", Line);\n__publicField(Two, \"Points\", Points);\n__publicField(Two, \"Polygon\", Polygon);\n__publicField(Two, \"Rectangle\", Rectangle);\n__publicField(Two, \"RoundedRectangle\", RoundedRectangle);\n__publicField(Two, \"Star\", Star);\n__publicField(Two, \"CanvasRenderer\", Renderer);\n__publicField(Two, \"SVGRenderer\", Renderer2);\n__publicField(Two, \"WebGLRenderer\", Renderer3);\n__publicField(Two, \"Commands\", Commands);\n__publicField(Two, \"Utils\", Utils);\nfunction fitToWindow() {\n  const wr = document.body.getBoundingClientRect();\n  const width = this.width = wr.width;\n  const height = this.height = wr.height;\n  this.renderer.setSize(width, height, this.ratio);\n}\nfunction fitToParent() {\n  const parent = this.renderer.domElement.parentElement;\n  if (!parent) {\n    console.warn(\"Two.js: Attempting to fit to parent, but no parent found.\");\n    return;\n  }\n  const wr = parent.getBoundingClientRect();\n  const width = this.width = wr.width;\n  const height = this.height = wr.height;\n  this.renderer.setSize(width, height, this.ratio);\n}\nfunction updateDimensions(width, height) {\n  this.width = width;\n  this.height = height;\n  this.trigger(Events.Types.resize, width, height);\n}\nvar raf = dom.getRequestAnimationFrame();\nfunction loop() {\n  for (let i = 0; i < Two.Instances.length; i++) {\n    const t = Two.Instances[i];\n    if (t.playing) {\n      t.update();\n    }\n  }\n  Two.nextFrameID = raf(loop);\n}\nraf.init = function() {\n  loop();\n  raf.init = function() {\n  };\n};\n\n\n\n//# sourceURL=webpack://ocaduillustration/./node_modules/two.js/build/two.module.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/amd options */
/******/ 	(() => {
/******/ 		__webpack_require__.amdO = {};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/harmony module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.hmd = (module) => {
/******/ 			module = Object.create(module);
/******/ 			if (!module.children) module.children = [];
/******/ 			Object.defineProperty(module, 'exports', {
/******/ 				enumerable: true,
/******/ 				set: () => {
/******/ 					throw new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);
/******/ 				}
/******/ 			});
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./assets/src/js/home.js");
/******/ 	
/******/ })()
;